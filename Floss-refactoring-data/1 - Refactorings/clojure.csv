"Number";"Commit";"Parent";"Refactoring";"EntityBefore";"EntityAfter";"FullDescription"
68;"c3be1aab7f857cd2bc5ad8a8fac1603e87d9f021";"271674c9b484d798484d134a5ac40a6df15d3ac3";"Extract Method";"clojure.lang.Compiler.macroexpand1(Object)";"clojure.lang.Compiler.checkSpecs(Var,ISeq)";"Extract Method public checkSpecs(v Var, form ISeq) : void extracted from public macroexpand1(x Object) : Object in class clojure.lang.Compiler"
85;"90ad4d6aa7ec0677916525633837dded55576af7";"ebfdbca535b81808b3ddc369d4a4e98b8f1524c7";"Extract Method";"clojure.lang.Numbers.hasheq(Number)";"clojure.lang.Numbers.hasheqFrom(Number,Class)";"Extract Method package hasheqFrom(x Number, xc Class) : int extracted from package hasheq(x Number) : int in class clojure.lang.Numbers"
321;"87a7d7892a0cbf80b639cd33f81009667c2dded6";"722e023ea00b27a47b11afc29fa7fe0a282696f4";"Extract Method";"clojure.lang.Compiler.HostExpr.tagToClass(Object)";"clojure.lang.Compiler.HostExpr.maybeSpecialTag(Symbol)";"Extract Method public maybeSpecialTag(sym Symbol) : Class extracted from package tagToClass(tag Object) : Class in class clojure.lang.Compiler.HostExpr"
351;"309c03055b06525c275b278542c881019424760e";"838302612551ef6a50a8adbdb9708cb1362b0898";"Extract Method";"clojure.lang.Compiler.InvokeExpr.(String,int,int,Symbol,Expr,IPersistentVector,boolean)";"clojure.lang.Compiler.InvokeExpr.sigTag(int,Var)";"Extract Method package sigTag(argcount int, v Var) : Object extracted from public InvokeExpr(source String, line int, column int, tag Symbol, fexpr Expr, args IPersistentVector, tailPosition boolean) in class clojure.lang.Compiler.InvokeExpr"
352;"838302612551ef6a50a8adbdb9708cb1362b0898";"494ab1345ce3d638be2bae1bd9f49beacdeb68a8";"Move Method";"clojure.lang.Tuple.T2.setValue(Object)";"clojure.lang.APersistentVector.setValue(Object)";"Move Method public setValue(value Object) : Object from class clojure.lang.Tuple.T2 to public setValue(value Object) : Object from class clojure.lang.APersistentVector"
399;"676a7e4a2bdc9771e515e2d545e089f9e2c29e03";"01b4228483b2f48fade9038f970b267380d8ab0f";"Inline Method";"clojure.lang.LongRange.absCount(long,long,long)";"clojure.lang.LongRange.count()";"Inline Method public absCount(start long, end long, step long) : int inlined to public count() : int in class clojure.lang.LongRange"
417;"cbc967caf23c6a07d4afe56d44b60c5fed09afa7";"a1af66777bc7ff8311a1e670ee97ad4912edd952";"Extract Method";"clojure.lang.Cycle.next()";"clojure.lang.Cycle.current()";"Extract Method private current() : ISeq extracted from public next() : ISeq in class clojure.lang.Cycle"
426;"caa3b4fdc8da5880309b317d0045b1280181c452";"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"Extract Method";"clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean)";"clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean,Object)";"Extract Method public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean, opts Object) : Object extracted from public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean) : Object in class clojure.lang.LispReader"
426;"caa3b4fdc8da5880309b317d0045b1280181c452";"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"Extract Method";"clojure.lang.RT.readString(String)";"clojure.lang.RT.readString(String,Object)";"Extract Method public readString(s String, opts Object) : Object extracted from public readString(s String) : Object in class clojure.lang.RT"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Method";"clojure.lang.LazyTransformer.remove(Object)";"clojure.lang.TransformerIterator.remove()";"Move Method public remove(o Object) : boolean from class clojure.lang.LazyTransformer to public remove() : void from class clojure.lang.TransformerIterator"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Method";"clojure.lang.LazyTransformer.remove(int)";"clojure.lang.TransformerIterator.remove()";"Move Method public remove(index int) : Object from class clojure.lang.LazyTransformer to public remove() : void from class clojure.lang.TransformerIterator"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Method";"clojure.lang.LazyTransformer.MultiStepper.hasNext()";"clojure.lang.TransformerIterator.MultiIterator.hasNext()";"Move Method package hasNext() : boolean from class clojure.lang.LazyTransformer.MultiStepper to public hasNext() : boolean from class clojure.lang.TransformerIterator.MultiIterator"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Method";"clojure.lang.LazyTransformer.MultiStepper.next()";"clojure.lang.TransformerIterator.MultiIterator.next()";"Move Method package next() : ISeq from class clojure.lang.LazyTransformer.MultiStepper to public next() : Object from class clojure.lang.TransformerIterator.MultiIterator"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Method";"clojure.lang.LazyTransformer.createMulti(IFn,Object[])";"clojure.lang.TransformerIterator.createMulti(IFn,List)";"Move Method public createMulti(xform IFn, colls Object[]) : LazyTransformer from class clojure.lang.LazyTransformer to public createMulti(xform IFn, sources List) : Iterator from class clojure.lang.TransformerIterator"
427;"c47e1bbcfa227723df28d1c9e0a6df2bcb0fecc1";"fab940dbe44c27059837bedc6da1843f459dc272";"Move Attribute";"clojure.lang.LazyTransformer.MultiStepper.iters";"clojure.lang.TransformerIterator.MultiIterator.iters";"Move Attribute private iters : Iterator[] from class clojure.lang.LazyTransformer.MultiStepper to class clojure.lang.TransformerIterator.MultiIterator"
457;"9f277c80258b3d2951128ce26a07c30ad0b47af0";"e5a104e894ed82f244d69513918d570cee5df67d";"Extract Method";"clojure.lang.DynamicClassLoader.findClass(String)";"clojure.lang.DynamicClassLoader.findInMemoryClass(String)";"Extract Method package findInMemoryClass(name String) : Class extracted from protected findClass(name String) : Class in class clojure.lang.DynamicClassLoader"
457;"9f277c80258b3d2951128ce26a07c30ad0b47af0";"e5a104e894ed82f244d69513918d570cee5df67d";"Extract Method";"clojure.lang.RT.classForName(String)";"clojure.lang.RT.classForName(String,boolean,ClassLoader)";"Extract Method public classForName(name String, load boolean, loader ClassLoader) : Class extracted from public classForName(name String) : Class in class clojure.lang.RT"
457;"9f277c80258b3d2951128ce26a07c30ad0b47af0";"e5a104e894ed82f244d69513918d570cee5df67d";"Extract Method";"clojure.lang.RT.classForNameNonLoading(String)";"clojure.lang.RT.classForName(String,boolean,ClassLoader)";"Extract Method public classForName(name String, load boolean, loader ClassLoader) : Class extracted from public classForNameNonLoading(name String) : Class in class clojure.lang.RT"
494;"2b8e2078ddc3b73d4634adba339fae22fded4169";"8765800e23a057957986c7d2bbb1f09cd3f1a676";"Extract Interface";"clojure.lang.Atom";"clojure.lang.IAtom";"Extract Interface clojure.lang.IAtom from class clojure.lang.Atom"
497;"4c963fb0f9ef9e4fc68b8b167729d857ced4b530";"695f03cf1b737ff465e9a0144978593df262516d";"Extract Interface";"clojure.lang.IReduce";"clojure.lang.IReduceInit";"Extract Interface clojure.lang.IReduceInit from class clojure.lang.IReduce"
562;"5fda6cb262d1807566ecadd3af9aaafb58ee5544";"3b1a1ddbb78a9e7deaf0213a248c96dc0cc22624";"Extract Method";"clojure.lang.Reflector.invokeNoArgInstanceMember(Object,String)";"clojure.lang.Reflector.invokeNoArgInstanceMember(Object,String,boolean)";"Extract Method public invokeNoArgInstanceMember(target Object, name String, requireField boolean) : Object extracted from public invokeNoArgInstanceMember(target Object, name String) : Object in class clojure.lang.Reflector"
574;"6aaaa0a88da15fb814e12a8a4e9af864edfafd6f";"9bd8d657f76675d462fb9533cd7d547788f56e7f";"Rename Method";"clojure.lang.Murmur3.fixCollHash(int,int)";"clojure.lang.Murmur3.mixCollHash(int,int)";"Rename Method public fixCollHash(hash int, count int) : int renamed to public mixCollHash(hash int, count int) : int in class clojure.lang.Murmur3"
590;"17b18350bdd28154241bc7ae80f423a5976c6de2";"96e72517615cd2ccdb4fdbbeb6ffba5ad99dbdac";"Extract Method";"clojure.lang.Murmur3.hashOrdered(Iterable)";"clojure.lang.Murmur3.fixCollHash(int,int)";"Extract Method public fixCollHash(hash int, count int) : int extracted from public hashOrdered(xs Iterable) : int in class clojure.lang.Murmur3"
590;"17b18350bdd28154241bc7ae80f423a5976c6de2";"96e72517615cd2ccdb4fdbbeb6ffba5ad99dbdac";"Extract Method";"clojure.lang.Murmur3.hashUnordered(Iterable)";"clojure.lang.Murmur3.fixCollHash(int,int)";"Extract Method public fixCollHash(hash int, count int) : int extracted from public hashUnordered(xs Iterable) : int in class clojure.lang.Murmur3"
592;"dff9600387b962f16fc78e6477e10e34651fd366";"12646c6941983e40987bef6e82d5cb0a5f096ab7";"Extract Method";"clojure.lang.APersistentVector.hasheq()";"clojure.lang.Murmur3.hashOrdered(Iterable)";"Extract Method public hashOrdered(xs Iterable) : int extracted from public hasheq() : int in class clojure.lang.APersistentVector"
592;"dff9600387b962f16fc78e6477e10e34651fd366";"12646c6941983e40987bef6e82d5cb0a5f096ab7";"Extract Method";"clojure.lang.ASeq.hasheq()";"clojure.lang.Murmur3.hashOrdered(Iterable)";"Extract Method public hashOrdered(xs Iterable) : int extracted from public hasheq() : int in class clojure.lang.ASeq"
592;"dff9600387b962f16fc78e6477e10e34651fd366";"12646c6941983e40987bef6e82d5cb0a5f096ab7";"Extract Method";"clojure.lang.PersistentQueue.hasheq()";"clojure.lang.Murmur3.hashOrdered(Iterable)";"Extract Method public hashOrdered(xs Iterable) : int extracted from public hasheq() : int in class clojure.lang.PersistentQueue"
592;"dff9600387b962f16fc78e6477e10e34651fd366";"12646c6941983e40987bef6e82d5cb0a5f096ab7";"Extract Method";"clojure.lang.APersistentSet.hasheq()";"clojure.lang.Murmur3.hashUnordered(Iterable)";"Extract Method public hashUnordered(xs Iterable) : int extracted from public hasheq() : int in class clojure.lang.APersistentSet"
595;"43873e477dff33e5c53323bf8ceddc014b870a40";"f7215fdb8ca7d23faa7b47865d5acab1af8437a3";"Move And Rename Class";"clojure.api.API";"clojure.java.api.Clojure";"Move And Rename Class clojure.api.API moved to clojure.java.api.Clojure"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Method";"clojure.asm.MethodWriter.getArgumentsAndReturnSizes(String)";"clojure.asm.Type.getArgumentsAndReturnSizes(String)";"Move Method package getArgumentsAndReturnSizes(desc String) : int from class clojure.asm.MethodWriter to public getArgumentsAndReturnSizes(desc String) : int from class clojure.asm.Type"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Method";"clojure.asm.MethodAdapter.visitTableSwitchInsn(int,int,Label,Label[])";"clojure.asm.commons.InstructionAdapter.visitTableSwitchInsn(int,int,Label,Label[])";"Move Method public visitTableSwitchInsn(min int, max int, dflt Label, labels Label[]) : void from class clojure.asm.MethodAdapter to public visitTableSwitchInsn(min int, max int, dflt Label, labels Label[]) : void from class clojure.asm.commons.InstructionAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Method";"clojure.asm.MethodAdapter.visitLookupSwitchInsn(Label,int[],Label[])";"clojure.asm.commons.InstructionAdapter.visitLookupSwitchInsn(Label,int[],Label[])";"Move Method public visitLookupSwitchInsn(dflt Label, keys int[], labels Label[]) : void from class clojure.asm.MethodAdapter to public visitLookupSwitchInsn(dflt Label, keys int[], labels Label[]) : void from class clojure.asm.commons.InstructionAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Method";"clojure.asm.MethodAdapter.visitIincInsn(int,int)";"clojure.asm.commons.InstructionAdapter.visitIincInsn(int,int)";"Move Method public visitIincInsn(var int, increment int) : void from class clojure.asm.MethodAdapter to public visitIincInsn(var int, increment int) : void from class clojure.asm.commons.InstructionAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassReader.accept(ClassVisitor,Attribute[],int)";"clojure.asm.ClassReader.getAttributes()";"Extract Method private getAttributes() : int extracted from public accept(classVisitor ClassVisitor, attrs Attribute[], flags int) : void in class clojure.asm.ClassReader"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassReader.accept(ClassVisitor,Attribute[],int)";"clojure.asm.ClassReader.readField(ClassVisitor,Context,int)";"Extract Method private readField(classVisitor ClassVisitor, context Context, u int) : int extracted from public accept(classVisitor ClassVisitor, attrs Attribute[], flags int) : void in class clojure.asm.ClassReader"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassReader.readFrameType(Object[],int,int,char[],Label[])";"clojure.asm.ClassReader.readLabel(int,Label[])";"Extract Method protected readLabel(offset int, labels Label[]) : Label extracted from private readFrameType(frame Object[], index int, v int, buf char[], labels Label[]) : int in class clojure.asm.ClassReader"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassReader.accept(ClassVisitor,Attribute[],int)";"clojure.asm.ClassReader.readMethod(ClassVisitor,Context,int)";"Extract Method private readMethod(classVisitor ClassVisitor, context Context, u int) : int extracted from public accept(classVisitor ClassVisitor, attrs Attribute[], flags int) : void in class clojure.asm.ClassReader"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassWriter.newNameType(String,String)";"clojure.asm.ClassWriter.newNameTypeItem(String,String)";"Extract Method package newNameTypeItem(name String, desc String) : Item extracted from public newNameType(name String, desc String) : int in class clojure.asm.ClassWriter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.ClassReader.readConst(int,char[])";"clojure.asm.Type.getMethodType(String)";"Extract Method public getMethodType(methodDescriptor String) : Type extracted from public readConst(item int, buf char[]) : Object in class clojure.asm.ClassReader"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.commons.GeneratorAdapter.box(Type)";"clojure.asm.commons.GeneratorAdapter.getBoxedType(Type)";"Extract Method private getBoxedType(type Type) : Type extracted from public box(type Type) : void in class clojure.asm.commons.GeneratorAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.MethodAdapter.visitIincInsn(int,int)";"clojure.asm.commons.InstructionAdapter.iinc(int,int)";"Extract Method public iinc(var int, increment int) : void extracted from public visitIincInsn(var int, increment int) : void in class clojure.asm.MethodAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.MethodAdapter.visitLookupSwitchInsn(Label,int[],Label[])";"clojure.asm.commons.InstructionAdapter.lookupswitch(Label,int[],Label[])";"Extract Method public lookupswitch(dflt Label, keys int[], labels Label[]) : void extracted from public visitLookupSwitchInsn(dflt Label, keys int[], labels Label[]) : void in class clojure.asm.MethodAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.MethodAdapter.visitTableSwitchInsn(int,int,Label,Label[])";"clojure.asm.commons.InstructionAdapter.tableswitch(int,int,Label,Label[])";"Extract Method public tableswitch(min int, max int, dflt Label, labels Label[]) : void extracted from public visitTableSwitchInsn(min int, max int, dflt Label, labels Label[]) : void in class clojure.asm.MethodAdapter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.commons.LocalVariablesSorter.newLocal(Type)";"clojure.asm.commons.LocalVariablesSorter.newLocalMapping(Type)";"Extract Method protected newLocalMapping(type Type) : int extracted from public newLocal(type Type) : int in class clojure.asm.commons.LocalVariablesSorter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.commons.LocalVariablesSorter.remap(int,Type)";"clojure.asm.commons.LocalVariablesSorter.newLocalMapping(Type)";"Extract Method protected newLocalMapping(type Type) : int extracted from private remap(var int, type Type) : int in class clojure.asm.commons.LocalVariablesSorter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Extract Method";"clojure.asm.commons.SerialVersionUIDAdder.visitEnd()";"clojure.asm.commons.SerialVersionUIDAdder.addSVUID(long)";"Extract Method protected addSVUID(svuid long) : void extracted from public visitEnd() : void in class clojure.asm.commons.SerialVersionUIDAdder"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Inline Method";"clojure.asm.MethodWriter.findSubroutine(Label,int)";"clojure.asm.MethodWriter.visitMaxs(int,int)";"Inline Method private findSubroutine(block Label, id int) : void inlined to public visitMaxs(maxStack int, maxLocals int) : void in class clojure.asm.MethodWriter"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Attribute";"clojure.asm.MethodAdapter.mv";"clojure.asm.MethodVisitor.mv";"Move Attribute protected mv : MethodVisitor from class clojure.asm.MethodAdapter to class clojure.asm.MethodVisitor"
597;"c8d3ef3929e8049a84957002bc7e2071844bfb53";"6be05801ff060122bec43e4eac5fdddf5e174fcf";"Move Attribute";"clojure.asm.ClassAdapter.cv";"clojure.asm.ClassVisitor.cv";"Move Attribute protected cv : ClassVisitor from class clojure.asm.ClassAdapter to class clojure.asm.ClassVisitor"
604;"22164511c43ef19fbff91fb75ef5f7147526769d";"1e5e5be1f52ebed5466b592b1cffd46c84ef6cb8";"Rename Method";"clojure.lang.Numbers.shiftRightLogical(long,long)";"clojure.lang.Numbers.unsignedShiftRight(long,long)";"Rename Method public shiftRightLogical(x long, n long) : long renamed to public unsignedShiftRight(x long, n long) : long in class clojure.lang.Numbers"
604;"22164511c43ef19fbff91fb75ef5f7147526769d";"1e5e5be1f52ebed5466b592b1cffd46c84ef6cb8";"Rename Method";"clojure.lang.Numbers.shiftRightLogicalInt(int,int)";"clojure.lang.Numbers.unsignedShiftRightInt(int,int)";"Rename Method public shiftRightLogicalInt(x int, n int) : int renamed to public unsignedShiftRightInt(x int, n int) : int in class clojure.lang.Numbers"
604;"22164511c43ef19fbff91fb75ef5f7147526769d";"1e5e5be1f52ebed5466b592b1cffd46c84ef6cb8";"Rename Method";"clojure.lang.Numbers.shiftRightLogical(Object,Object)";"clojure.lang.Numbers.unsignedShiftRight(Object,Object)";"Rename Method public shiftRightLogical(x Object, y Object) : long renamed to public unsignedShiftRight(x Object, y Object) : long in class clojure.lang.Numbers"
604;"22164511c43ef19fbff91fb75ef5f7147526769d";"1e5e5be1f52ebed5466b592b1cffd46c84ef6cb8";"Rename Method";"clojure.lang.Numbers.shiftRightLogical(Object,long)";"clojure.lang.Numbers.unsignedShiftRight(Object,long)";"Rename Method public shiftRightLogical(x Object, y long) : long renamed to public unsignedShiftRight(x Object, y long) : long in class clojure.lang.Numbers"
604;"22164511c43ef19fbff91fb75ef5f7147526769d";"1e5e5be1f52ebed5466b592b1cffd46c84ef6cb8";"Rename Method";"clojure.lang.Numbers.shiftRightLogical(long,Object)";"clojure.lang.Numbers.unsignedShiftRight(long,Object)";"Rename Method public shiftRightLogical(x long, y Object) : long renamed to public unsignedShiftRight(x long, y Object) : long in class clojure.lang.Numbers"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.FnExpr.parse(C,ISeq,String)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from package parse(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler.FnExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyzeSeq(C,ISeq,String)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from private analyzeSeq(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.NewExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.eval(Object,boolean)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public eval(form Object, freshLoader boolean) : Object in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.compile1(GeneratorAdapter,ObjExpr,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from package compile1(gen GeneratorAdapter, objx ObjExpr, form Object) : void in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewInstanceMethod.parse(ObjExpr,ISeq,Symbol,Map)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from package parse(objx ObjExpr, form ISeq, thistag Symbol, overrideables Map) : NewInstanceMethod in class clojure.lang.Compiler.NewInstanceMethod"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.HostExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.HostExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.DefExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, form Object) : Expr in class clojure.lang.Compiler.DefExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.InvokeExpr.parse(C,ISeq)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, form ISeq) : Expr in class clojure.lang.Compiler.InvokeExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyzeSymbol(Symbol)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from private analyzeSymbol(sym Symbol) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.RecurExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.RecurExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,Symbol,ISeq,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className Symbol, typeTag Symbol, methodForms ISeq, frm Object) : ObjExpr in class clojure.lang.Compiler.NewInstanceExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq,boolean)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from package parse(objx ObjExpr, form ISeq, isStatic boolean) : FnMethod in class clojure.lang.Compiler.FnMethod"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyze(C,Object,String)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from private analyze(context C, form Object, name String) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.IfExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.columnDeref()";"Extract Method package columnDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.IfExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.FnExpr.parse(C,ISeq,String)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from package parse(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler.FnExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyzeSeq(C,ISeq,String)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from private analyzeSeq(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.NewExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.eval(Object,boolean)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public eval(form Object, freshLoader boolean) : Object in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.compile1(GeneratorAdapter,ObjExpr,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from package compile1(gen GeneratorAdapter, objx ObjExpr, form Object) : void in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewInstanceMethod.parse(ObjExpr,ISeq,Symbol,Map)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from package parse(objx ObjExpr, form ISeq, thistag Symbol, overrideables Map) : NewInstanceMethod in class clojure.lang.Compiler.NewInstanceMethod"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.HostExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.HostExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.DefExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, form Object) : Expr in class clojure.lang.Compiler.DefExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.InvokeExpr.parse(C,ISeq)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, form ISeq) : Expr in class clojure.lang.Compiler.InvokeExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyzeSymbol(Symbol)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from private analyzeSymbol(sym Symbol) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.RecurExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.RecurExpr.Parser"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,Symbol,ISeq,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className Symbol, typeTag Symbol, methodForms ISeq, frm Object) : ObjExpr in class clojure.lang.Compiler.NewInstanceExpr"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq,boolean)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from package parse(objx ObjExpr, form ISeq, isStatic boolean) : FnMethod in class clojure.lang.Compiler.FnMethod"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.analyze(C,Object,String)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from private analyze(context C, form Object, name String) : Expr in class clojure.lang.Compiler"
662;"229bf8fe9a751e4f48bb2b7ea57e27ebc43d26ae";"ef00c7cffad10e6104d333f7f71a29163b06cd0a";"Extract Method";"clojure.lang.Compiler.IfExpr.Parser.parse(C,Object)";"clojure.lang.Compiler.lineDeref()";"Extract Method package lineDeref() : int extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.IfExpr.Parser"
709;"21425a642c44bd1cdb8d3e537a7b6a23c1267bc7";"8262a7e8f547c2fdba80143a05d9021a468c9bdb";"Extract Method";"clojure.lang.APersistentSet.equals(Object)";"clojure.lang.APersistentSet.setEquals(IPersistentSet,Object)";"Extract Method public setEquals(s1 IPersistentSet, obj Object) : boolean extracted from public equals(obj Object) : boolean in class clojure.lang.APersistentSet"
713;"692817a10283c98c5d57bf3515ba39cf533d7aad";"19f1e493500724a2dfd878349cf18a49ba20e94b";"Extract Method";"clojure.lang.EdnReader.readString(String)";"clojure.lang.EdnReader.read(PushbackReader,IPersistentMap)";"Extract Method public read(r PushbackReader, opts IPersistentMap) : Object extracted from public readString(s String) : Object in class clojure.lang.EdnReader"
755;"93505932f782f6de94b7b9a06a5b6dfd884c7d8b";"d77489d3ce912c177fe288a6f399a5c1da6683db";"Extract Method";"clojure.lang.Util.hasheq(Object)";"clojure.lang.Util.dohasheq(Object)";"Extract Method public dohasheq(o Object) : int extracted from public hasheq(o Object) : int in class clojure.lang.Util"
756;"d77489d3ce912c177fe288a6f399a5c1da6683db";"372f03e2fa63ff7c3544be82d85e8943e85e640b";"Extract Method";"clojure.lang.APersistentMap.hasheq()";"clojure.lang.APersistentMap.mapHasheq(IPersistentMap)";"Extract Method public mapHasheq(m IPersistentMap) : int extracted from public hasheq() : int in class clojure.lang.APersistentMap"
784;"01b4cb7156f0b378e70020d0abe293bffe35b031";"c1884eaca8ffb7aff2c3d393a9d5fa3306cf3f33";"Extract Interface";"clojure.lang.ExceptionInfo";"clojure.lang.IExceptionInfo";"Extract Interface clojure.lang.IExceptionInfo from class clojure.lang.ExceptionInfo"
904;"4036c7720949cb21ccf53c5c7c54ed1daaff2fda";"0131c587bc12c2de7ed6c5851dd991b8a8b51a72";"Extract Method";"clojure.lang.Compiler.elideMeta(Object)";"clojure.lang.Compiler.getCompilerOption(Keyword)";"Extract Method public getCompilerOption(k Keyword) : Object extracted from package elideMeta(m Object) : Object in class clojure.lang.Compiler"
918;"bc2cd8f139399545f445e2f6d4d24bd2ed1c76ed";"e38137386713ea430141cb07bf6d954e63b6357f";"Extract Method";"clojure.lang.Reflector.invokeStaticMethod(String,String,Object[])";"clojure.lang.Reflector.getCauseOrElse(Exception)";"Extract Method private getCauseOrElse(e Exception) : Throwable extracted from public invokeStaticMethod(className String, methodName String, args Object[]) : Object in class clojure.lang.Reflector"
918;"bc2cd8f139399545f445e2f6d4d24bd2ed1c76ed";"e38137386713ea430141cb07bf6d954e63b6357f";"Extract Method";"clojure.lang.Reflector.invokeInstanceMethod(Object,String,Object[])";"clojure.lang.Reflector.getCauseOrElse(Exception)";"Extract Method private getCauseOrElse(e Exception) : Throwable extracted from public invokeInstanceMethod(target Object, methodName String, args Object[]) : Object in class clojure.lang.Reflector"
918;"bc2cd8f139399545f445e2f6d4d24bd2ed1c76ed";"e38137386713ea430141cb07bf6d954e63b6357f";"Extract Method";"clojure.lang.Reflector.invokeMatchingMethod(String,List,Object,Object[])";"clojure.lang.Reflector.getCauseOrElse(Exception)";"Extract Method private getCauseOrElse(e Exception) : Throwable extracted from package invokeMatchingMethod(methodName String, methods List, target Object, args Object[]) : Object in class clojure.lang.Reflector"
918;"bc2cd8f139399545f445e2f6d4d24bd2ed1c76ed";"e38137386713ea430141cb07bf6d954e63b6357f";"Extract Method";"clojure.lang.Reflector.invokeConstructor(Class,Object[])";"clojure.lang.Reflector.getCauseOrElse(Exception)";"Extract Method private getCauseOrElse(e Exception) : Throwable extracted from public invokeConstructor(c Class, args Object[]) : Object in class clojure.lang.Reflector"
924;"7e49f98391b089505e328c662c176cd2a79a95bc";"f5bcf647d480c4eaa4e808ec41edb698ad66ec63";"Extract Method";"clojure.lang.APersistentVector.toArray(Object[])";"clojure.lang.RT.seqToPassedArray(ISeq,Object[])";"Extract Method public seqToPassedArray(seq ISeq, passed Object[]) : Object[] extracted from public toArray(a Object[]) : Object[] in class clojure.lang.APersistentVector"
924;"7e49f98391b089505e328c662c176cd2a79a95bc";"f5bcf647d480c4eaa4e808ec41edb698ad66ec63";"Extract Method";"clojure.lang.ASeq.toArray(Object[])";"clojure.lang.RT.seqToPassedArray(ISeq,Object[])";"Extract Method public seqToPassedArray(seq ISeq, passed Object[]) : Object[] extracted from public toArray(a Object[]) : Object[] in class clojure.lang.ASeq"
924;"7e49f98391b089505e328c662c176cd2a79a95bc";"f5bcf647d480c4eaa4e808ec41edb698ad66ec63";"Extract Method";"clojure.lang.APersistentSet.toArray(Object[])";"clojure.lang.RT.seqToPassedArray(ISeq,Object[])";"Extract Method public seqToPassedArray(seq ISeq, passed Object[]) : Object[] extracted from public toArray(a Object[]) : Object[] in class clojure.lang.APersistentSet"
924;"7e49f98391b089505e328c662c176cd2a79a95bc";"f5bcf647d480c4eaa4e808ec41edb698ad66ec63";"Extract Method";"clojure.lang.LazySeq.toArray(Object[])";"clojure.lang.RT.seqToPassedArray(ISeq,Object[])";"Extract Method public seqToPassedArray(seq ISeq, passed Object[]) : Object[] extracted from public toArray(a Object[]) : Object[] in class clojure.lang.LazySeq"
924;"7e49f98391b089505e328c662c176cd2a79a95bc";"f5bcf647d480c4eaa4e808ec41edb698ad66ec63";"Extract Method";"clojure.lang.PersistentQueue.toArray(Object[])";"clojure.lang.RT.seqToPassedArray(ISeq,Object[])";"Extract Method public seqToPassedArray(seq ISeq, passed Object[]) : Object[] extracted from public toArray(a Object[]) : Object[] in class clojure.lang.PersistentQueue"
939;"d3b5665d21457ad27bda702f567ca2f55b14283b";"59d3c724684c212fbb5eafaaaac30761c2c75a37";"Extract Method";"clojure.lang.LispReader.CtorReader.invoke(Object,Object)";"clojure.lang.LispReader.CtorReader.readRecord(PushbackReader,Symbol)";"Extract Method private readRecord(r PushbackReader, recordName Symbol) : Object extracted from public invoke(reader Object, firstChar Object) : Object in class clojure.lang.LispReader.CtorReader"
939;"d3b5665d21457ad27bda702f567ca2f55b14283b";"59d3c724684c212fbb5eafaaaac30761c2c75a37";"Extract Method";"clojure.lang.LispReader.CtorReader.invoke(Object,Object)";"clojure.lang.LispReader.CtorReader.readTagged(PushbackReader,Symbol)";"Extract Method private readTagged(reader PushbackReader, tag Symbol) : Object extracted from public invoke(reader Object, firstChar Object) : Object in class clojure.lang.LispReader.CtorReader"
959;"d69c32394d06f75e32bdbeafd37e7b1b5b6da351";"ec59ebac31d1d6722793f988685154c83232f964";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Compiler.lookupVar(Symbol,boolean,boolean)";"Extract Method package lookupVar(sym Symbol, internNew boolean, registerMacro boolean) : Var extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.TransientHashMap.doWithout(Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from package doWithout(key Object) : ITransientMap in class clojure.lang.PersistentHashMap.TransientHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.TransientHashMap.doValAt(Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from package doValAt(key Object, notFound Object) : Object in class clojure.lang.PersistentHashMap.TransientHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.BitmapIndexedNode.assoc(AtomicReference,int,int,Object,Object,Box)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public assoc(edit AtomicReference, shift int, hash int, key Object, val Object, addedLeaf Box) : INode in class clojure.lang.PersistentHashMap.BitmapIndexedNode"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.containsKey(Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public containsKey(key Object) : boolean in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.entryAt(Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public entryAt(key Object) : IMapEntry in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.assoc(Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public assoc(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.valAt(Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public valAt(key Object, notFound Object) : Object in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.without(Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public without(key Object) : IPersistentMap in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.BitmapIndexedNode.assoc(int,int,Object,Object,Box)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from public assoc(shift int, hash int, key Object, val Object, addedLeaf Box) : INode in class clojure.lang.PersistentHashMap.BitmapIndexedNode"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.createNode(int,Object,Object,int,Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from private createNode(shift int, key1 Object, val1 Object, key2hash int, key2 Object, val2 Object) : INode in class clojure.lang.PersistentHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.TransientHashMap.doAssoc(Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from package doAssoc(key Object, val Object) : ITransientMap in class clojure.lang.PersistentHashMap.TransientHashMap"
979;"b5f5ba2e15dc2f20e14e05141f7de7c6a3d91179";"f006a81dcf5714832515781ee44a9091a3ea06df";"Extract Method";"clojure.lang.PersistentHashMap.createNode(AtomicReference,int,Object,Object,int,Object,Object)";"clojure.lang.PersistentHashMap.hash(Object)";"Extract Method package hash(k Object) : int extracted from private createNode(edit AtomicReference, shift int, key1 Object, val1 Object, key2hash int, key2 Object, val2 Object) : INode in class clojure.lang.PersistentHashMap"
1006;"3035a6fb75ac351382614c9c91862db1dd93fb2d";"2b878696b94205552267cf4872a7db8661c3db5f";"Extract Method";"clojure.lang.RT.loadResourceScript(Class,String,boolean)";"clojure.lang.RT.resourceAsStream(ClassLoader,String)";"Extract Method public resourceAsStream(loader ClassLoader, name String) : InputStream extracted from public loadResourceScript(c Class, name String, failIfNotFound boolean) : void in class clojure.lang.RT"
1006;"3035a6fb75ac351382614c9c91862db1dd93fb2d";"2b878696b94205552267cf4872a7db8661c3db5f";"Extract Method";"clojure.lang.RT.compile(String)";"clojure.lang.RT.resourceAsStream(ClassLoader,String)";"Extract Method public resourceAsStream(loader ClassLoader, name String) : InputStream extracted from package compile(cljfile String) : void in class clojure.lang.RT"
1017;"684fca15040e1ec8753429909b2d463e99d857e7";"40fb14a79dc01000265af3c1ec4a96e1dbe5b657";"Extract Method";"clojure.lang.Numbers.BigIntOps.add(Number,Number)";"clojure.lang.BigInt.add(BigInt)";"Extract Method public add(y BigInt) : Number extracted from public add(x Number, y Number) : Number in class clojure.lang.Numbers.BigIntOps"
1017;"684fca15040e1ec8753429909b2d463e99d857e7";"40fb14a79dc01000265af3c1ec4a96e1dbe5b657";"Extract Method";"clojure.lang.Numbers.BigIntOps.lt(Number,Number)";"clojure.lang.BigInt.lt(BigInt)";"Extract Method public lt(y BigInt) : boolean extracted from public lt(x Number, y Number) : boolean in class clojure.lang.Numbers.BigIntOps"
1017;"684fca15040e1ec8753429909b2d463e99d857e7";"40fb14a79dc01000265af3c1ec4a96e1dbe5b657";"Extract Method";"clojure.lang.Numbers.BigIntOps.multiply(Number,Number)";"clojure.lang.BigInt.multiply(BigInt)";"Extract Method public multiply(y BigInt) : Number extracted from public multiply(x Number, y Number) : Number in class clojure.lang.Numbers.BigIntOps"
1017;"684fca15040e1ec8753429909b2d463e99d857e7";"40fb14a79dc01000265af3c1ec4a96e1dbe5b657";"Extract Method";"clojure.lang.Numbers.BigIntOps.quotient(Number,Number)";"clojure.lang.BigInt.quotient(BigInt)";"Extract Method public quotient(y BigInt) : Number extracted from public quotient(x Number, y Number) : Number in class clojure.lang.Numbers.BigIntOps"
1017;"684fca15040e1ec8753429909b2d463e99d857e7";"40fb14a79dc01000265af3c1ec4a96e1dbe5b657";"Extract Method";"clojure.lang.Numbers.BigIntOps.remainder(Number,Number)";"clojure.lang.BigInt.remainder(BigInt)";"Extract Method public remainder(y BigInt) : Number extracted from public remainder(x Number, y Number) : Number in class clojure.lang.Numbers.BigIntOps"
1056;"ac1e8ad9f182dc2e8a5254f3e4b7b77c0258353d";"914b77f25773a646d4706e179d427fce7bb745af";"Extract Method";"clojure.lang.Reflector.getAsMethodOfPublicBase(Class,Method)";"clojure.lang.Reflector.isMatch(Method,Method)";"Extract Method public isMatch(lhs Method, rhs Method) : boolean extracted from public getAsMethodOfPublicBase(c Class, m Method) : Method in class clojure.lang.Reflector"
1061;"601d9521f88f8fb00e670d2823857cdcb2b2e1c3";"e89e95fe82f430cc5fe9ea1c3f1974434a9ccda3";"Rename Method";"clojure.lang.Numbers.bitOps(Object)";"clojure.lang.Numbers.bitOpsCast(Object)";"Rename Method package bitOps(x Object) : BitOps renamed to package bitOpsCast(x Object) : long in class clojure.lang.Numbers"
1061;"601d9521f88f8fb00e670d2823857cdcb2b2e1c3";"e89e95fe82f430cc5fe9ea1c3f1974434a9ccda3";"Move Method";"clojure.lang.Numbers.LongBitOps.andNot(Number,Number)";"clojure.lang.Numbers.andNot(long,long)";"Move Method public andNot(x Number, y Number) : Number from class clojure.lang.Numbers.LongBitOps to public andNot(x long, y long) : long from class clojure.lang.Numbers"
1061;"601d9521f88f8fb00e670d2823857cdcb2b2e1c3";"e89e95fe82f430cc5fe9ea1c3f1974434a9ccda3";"Extract Method";"clojure.lang.Numbers.shiftLeft(Object,Object)";"clojure.lang.Numbers.shiftLeft(long,long)";"Extract Method public shiftLeft(x long, n long) : long extracted from public shiftLeft(x Object, n Object) : Number in class clojure.lang.Numbers"
1061;"601d9521f88f8fb00e670d2823857cdcb2b2e1c3";"e89e95fe82f430cc5fe9ea1c3f1974434a9ccda3";"Extract Method";"clojure.lang.Numbers.shiftRight(Object,Object)";"clojure.lang.Numbers.shiftRight(long,long)";"Extract Method public shiftRight(x long, n long) : long extracted from public shiftRight(x Object, n Object) : Number in class clojure.lang.Numbers"
1067;"34489bddcceb2c1102c30e6b3e417d981097453c";"71b5461dca083a4a60b65d6d2e46322d977774c9";"Extract Method";"clojure.lang.Compiler.CaseExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Compiler.CaseExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)";"Extract Method public doEmit(context C, objx ObjExpr, gen GeneratorAdapter, emitUnboxed boolean) : void extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.CaseExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.readToken(PushbackReader,char)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from private readToken(r PushbackReader, initch char) : String in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.CommentReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, semicolon Object) : Object in class clojure.lang.LispReader.CommentReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.UnquoteReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, comma Object) : Object in class clojure.lang.LispReader.UnquoteReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.readNumber(PushbackReader,char)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from private readNumber(r PushbackReader, initch char) : Object in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.CharacterReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, backslash Object) : Object in class clojure.lang.LispReader.CharacterReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.readUnicodeChar(PushbackReader,int,int,int,boolean)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from private readUnicodeChar(r PushbackReader, initch int, base int, length int, exact boolean) : int in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.readDelimitedList(char,PushbackReader,boolean)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public readDelimitedList(delim char, r PushbackReader, isRecursive boolean) : List in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.ArgReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, pct Object) : Object in class clojure.lang.LispReader.ArgReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.RegexReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, doublequote Object) : Object in class clojure.lang.LispReader.RegexReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.StringReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, doublequote Object) : Object in class clojure.lang.LispReader.StringReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean) : Object in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.DispatchReader.invoke(Object,Object)";"clojure.lang.LispReader.read1(Reader)";"Extract Method public read1(r Reader) : int extracted from public invoke(reader Object, hash Object) : Object in class clojure.lang.LispReader.DispatchReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.TryExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.TryExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentHashMap.assocEx(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentHashMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentArrayMap.assocEx(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.ThrowExpr.eval()";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public eval() : Object in class clojure.lang.Compiler.ThrowExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.LetExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.LetExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.writeClassFile(String,byte[])";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public writeClassFile(internalName String, bytecode byte[]) : void in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.RT.findKey(Keyword,ISeq)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public findKey(key Keyword, keyvals ISeq) : ISeq in class clojure.lang.RT"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.DefExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, form Object) : Expr in class clojure.lang.Compiler.DefExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.compile(Reader,String,String)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public compile(rdr Reader, sourcePath String, sourceName String) : Object in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.UnquoteReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, comma Object) : Object in class clojure.lang.LispReader.UnquoteReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.CharacterReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, backslash Object) : Object in class clojure.lang.LispReader.CharacterReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentStructMap.getAccessor(Def,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public getAccessor(def Def, key Object) : IFn in class clojure.lang.PersistentStructMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentStructMap$1.invoke(Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(arg1 Object) : Object in class clojure.lang.PersistentStructMap$1"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.CtorReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, leftangle Object) : Object in class clojure.lang.LispReader.CtorReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.EvalReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, eq Object) : Object in class clojure.lang.LispReader.EvalReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LockingTransaction.run(Callable)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from package run(fn Callable) : Object in class clojure.lang.LockingTransaction"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.NewExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.NewExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.MapReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, leftparen Object) : Object in class clojure.lang.LispReader.MapReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean) : Object in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentStructMap.assocEx(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentStructMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentStructMap.without(Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public without(key Object) : IPersistentMap in class clojure.lang.PersistentStructMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from package parse(objx ObjExpr, form ISeq, isStatic boolean) : FnMethod in class clojure.lang.Compiler.FnMethod"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.UnmatchedDelimiterReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, rightdelim Object) : Object in class clojure.lang.LispReader.UnmatchedDelimiterReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.UnreadableReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, leftangle Object) : Object in class clojure.lang.LispReader.UnreadableReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.interpretToken(String)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from private interpretToken(s String) : Object in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.readDelimitedList(char,PushbackReader,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public readDelimitedList(delim char, r PushbackReader, isRecursive boolean) : List in class clojure.lang.LispReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.TheVarExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, form Object) : Expr in class clojure.lang.Compiler.TheVarExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.RegexReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, doublequote Object) : Object in class clojure.lang.LispReader.RegexReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.StringReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, doublequote Object) : Object in class clojure.lang.LispReader.StringReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.ObjExpr.emitValue(Object,GeneratorAdapter)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from package emitValue(value Object, gen GeneratorAdapter) : void in class clojure.lang.Compiler.ObjExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.FnExpr.parse(C,ISeq,String)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from package parse(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler.FnExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.IfExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.IfExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Agent.restart(Object,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public restart(newState Object, clearActions boolean) : Object in class clojure.lang.Agent"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.analyzeSymbol(Symbol)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from private analyzeSymbol(sym Symbol) : Expr in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.MethodParamExpr.eval()";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public eval() : Object in class clojure.lang.Compiler.MethodParamExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.MethodParamExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.MethodParamExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.RT.toArray(Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public toArray(coll Object) : Object[] in class clojure.lang.RT"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.LetFnExpr.Parser.parse(C,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public parse(context C, frm Object) : Expr in class clojure.lang.Compiler.LetFnExpr.Parser"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.PersistentTreeMap.assocEx(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public assocEx(key Object, val Object) : PersistentTreeMap in class clojure.lang.PersistentTreeMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.resolveIn(Namespace,Symbol,boolean)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public resolveIn(n Namespace, sym Symbol, allowPrivate boolean) : Object in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.MethodParamExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public emitUnboxed(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.MethodParamExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LispReader.DispatchReader.invoke(Object,Object)";"clojure.lang.Util.runtimeException(String)";"Extract Method public runtimeException(s String) : RuntimeException extracted from public invoke(reader Object, hash Object) : Object in class clojure.lang.LispReader.DispatchReader"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Agent.dispatch(IFn,ISeq,boolean)";"clojure.lang.Util.runtimeException(String,Throwable)";"Extract Method public runtimeException(s String, e Throwable) : RuntimeException extracted from public dispatch(fn IFn, args ISeq, solo boolean) : Object in class clojure.lang.Agent"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.AFn.run()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public run() : void in class clojure.lang.AFn"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.ARef.setValidator(IFn)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public setValidator(vf IFn) : void in class clojure.lang.ARef"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.ARef.removeWatch(Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public removeWatch(key Object) : IRef in class clojure.lang.ARef"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.StaticInvokeExpr.emitUnboxed(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public emitUnboxed(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.StaticInvokeExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.RT.printString(Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public printString(x Object) : String in class clojure.lang.RT"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.ARef.notifyWatches(Object,Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public notifyWatches(oldval Object, newval Object) : void in class clojure.lang.ARef"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.RT.readString(String)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public readString(s String) : Object in class clojure.lang.RT"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Var.setMacro()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public setMacro() : void in class clojure.lang.Var"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.maybePrimitiveType(Expr)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from package maybePrimitiveType(e Expr) : Class in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Var.setTag(Symbol)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public setTag(tag Symbol) : void in class clojure.lang.Var"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Var.bindRoot(Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public bindRoot(root Object) : void in class clojure.lang.Var"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.RecurExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.RecurExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.LazySeq.sval()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from package sval() : Object in class clojure.lang.LazySeq"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Var.run()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public run() : void in class clojure.lang.Var"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.FnMethod.doEmitStatic(ObjExpr,ClassVisitor)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public doEmitStatic(fn ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.FnMethod"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.FnMethod.doEmitPrim(ObjExpr,ClassVisitor)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public doEmitPrim(fn ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.FnMethod"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.AFunction.compare(Object,Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public compare(o1 Object, o2 Object) : int in class clojure.lang.AFunction"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Ref.run()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public run() : void in class clojure.lang.Ref"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.IfExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public doEmit(context C, objx ObjExpr, gen GeneratorAdapter, emitUnboxed boolean) : void in class clojure.lang.Compiler.IfExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.NewInstanceMethod.emit(ObjExpr,ClassVisitor)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public emit(obj ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.NewInstanceMethod"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.addAnnotation(Object,IPersistentMap)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from package addAnnotation(visitor Object, meta IPersistentMap) : void in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.ObjExpr.getCompiledClass()";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from package getCompiledClass() : Class in class clojure.lang.Compiler.ObjExpr"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.Compiler.addParameterAnnotation(Object,IPersistentMap,int)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from package addParameterAnnotation(visitor Object, meta IPersistentMap, i int) : void in class clojure.lang.Compiler"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.TransactionalHashMap.remove(Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public remove(k Object) : V in class clojure.lang.TransactionalHashMap"
1077;"8fda34e4c77cac079b711da59d5fe49b74605553";"0245f15c9c7bd2d043f0f6e59fff0a692d7466b1";"Extract Method";"clojure.lang.TransactionalHashMap.remove(Object,Object)";"clojure.lang.Util.runtimeException(Throwable)";"Extract Method public runtimeException(e Throwable) : RuntimeException extracted from public remove(k Object, v Object) : boolean in class clojure.lang.TransactionalHashMap"
1095;"877c875235aaa7d9bc1bf5392f1c4991e9ea3f63";"7030355458db72c0ab7f502939cad954b7a25def";"Extract Method";"clojure.lang.Compiler.ObjExpr.ctorTypes()";"clojure.lang.Compiler.ObjExpr.supportsMeta()";"Extract Method package supportsMeta() : boolean extracted from package ctorTypes() : Type[] in class clojure.lang.Compiler.ObjExpr"
1095;"877c875235aaa7d9bc1bf5392f1c4991e9ea3f63";"7030355458db72c0ab7f502939cad954b7a25def";"Extract Method";"clojure.lang.Compiler.ObjExpr.compile(String,String[],boolean)";"clojure.lang.Compiler.ObjExpr.supportsMeta()";"Extract Method package supportsMeta() : boolean extracted from package compile(superName String, interfaceNames String[], oneTimeUse boolean) : void in class clojure.lang.Compiler.ObjExpr"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_add(long,long)";"clojure.lang.Numbers.unchecked_add(long,long)";"Rename Method public unchecked_long_add(x long, y long) : long renamed to public unchecked_add(x long, y long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_dec(long)";"clojure.lang.Numbers.unchecked_dec(long)";"Rename Method public unchecked_long_dec(x long) : long renamed to public unchecked_dec(x long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_divide(long,long)";"clojure.lang.Numbers.quotient(long,long)";"Rename Method public unchecked_long_divide(x long, y long) : long renamed to public quotient(x long, y long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_inc(long)";"clojure.lang.Numbers.unchecked_inc(long)";"Rename Method public unchecked_long_inc(x long) : long renamed to public unchecked_inc(x long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_multiply(long,long)";"clojure.lang.Numbers.unchecked_multiply(long,long)";"Rename Method public unchecked_long_multiply(x long, y long) : long renamed to public unchecked_multiply(x long, y long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_negate(long)";"clojure.lang.Numbers.unchecked_minus(long)";"Rename Method public unchecked_long_negate(x long) : long renamed to public unchecked_minus(x long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_remainder(long,long)";"clojure.lang.Numbers.remainder(long,long)";"Rename Method public unchecked_long_remainder(x long, y long) : long renamed to public remainder(x long, y long) : long in class clojure.lang.Numbers"
1165;"3e644c768b1f769217ecd484c019580384c7a670";"cbd789d1a5b472d92b91f2fe0e273f48c2583483";"Rename Method";"clojure.lang.Numbers.unchecked_long_subtract(long,long)";"clojure.lang.Numbers.unchecked_minus(long,long)";"Rename Method public unchecked_long_subtract(x long, y long) : long renamed to public unchecked_minus(x long, y long) : long in class clojure.lang.Numbers"
1187;"52adb74f5335c8256f6468581028f44220547dca";"c643a37953964eb15a2f39fa31fc317079467bf0";"Extract Method";"clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq,boolean)";"clojure.lang.Compiler.primClass(Class)";"Extract Method package primClass(c Class) : Class extracted from package parse(objx ObjExpr, form ISeq, isStatic boolean) : FnMethod in class clojure.lang.Compiler.FnMethod"
1189;"b7281364e3f9cfeca365d7884f1f4765660cc756";"d1006391595641f16e9c54187a8df0a0138d3a53";"Extract Method";"clojure.lang.Compiler.FnMethod.doEmit(ObjExpr,ClassVisitor)";"clojure.lang.Compiler.ObjMethod.emitVarReloadPreamble(ObjExpr,GeneratorAdapter)";"Extract Method package emitVarReloadPreamble(fn ObjExpr, gen GeneratorAdapter) : void extracted from public doEmit(fn ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.FnMethod"
1189;"b7281364e3f9cfeca365d7884f1f4765660cc756";"d1006391595641f16e9c54187a8df0a0138d3a53";"Extract Method";"clojure.lang.Compiler.ObjMethod.emit(ObjExpr,ClassVisitor)";"clojure.lang.Compiler.ObjMethod.emitVarReloadPreamble(ObjExpr,GeneratorAdapter)";"Extract Method package emitVarReloadPreamble(fn ObjExpr, gen GeneratorAdapter) : void extracted from public emit(fn ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.ObjMethod"
1189;"b7281364e3f9cfeca365d7884f1f4765660cc756";"d1006391595641f16e9c54187a8df0a0138d3a53";"Extract Method";"clojure.lang.Compiler.NewInstanceMethod.emit(ObjExpr,ClassVisitor)";"clojure.lang.Compiler.ObjMethod.emitVarReloadPreamble(ObjExpr,GeneratorAdapter)";"Extract Method package emitVarReloadPreamble(fn ObjExpr, gen GeneratorAdapter) : void extracted from public emit(obj ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.NewInstanceMethod"
1190;"d1006391595641f16e9c54187a8df0a0138d3a53";"58be0895bc3c8248ee2c1bb862cf28b86dce8b6c";"Extract Method";"clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,Symbol,ISeq,Object)";"clojure.lang.Compiler.emptyVarCallSites()";"Extract Method package emptyVarCallSites() : IPersistentCollection extracted from package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, tagName String, className Symbol, typeTag Symbol, methodForms ISeq, frm Object) : ObjExpr in class clojure.lang.Compiler.NewInstanceExpr"
1190;"d1006391595641f16e9c54187a8df0a0138d3a53";"58be0895bc3c8248ee2c1bb862cf28b86dce8b6c";"Extract Method";"clojure.lang.Compiler.FnExpr.parse(C,ISeq,String)";"clojure.lang.Compiler.emptyVarCallSites()";"Extract Method package emptyVarCallSites() : IPersistentCollection extracted from package parse(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler.FnExpr"
1190;"d1006391595641f16e9c54187a8df0a0138d3a53";"58be0895bc3c8248ee2c1bb862cf28b86dce8b6c";"Extract Method";"clojure.lang.Compiler.ObjExpr.compile(String,String[],boolean)";"clojure.lang.Compiler.ObjExpr.cachedVarName(int)";"Extract Method package cachedVarName(n int) : String extracted from package compile(superName String, interfaceNames String[], oneTimeUse boolean) : void in class clojure.lang.Compiler.ObjExpr"
1194;"b9b1a094499b69a94bd47fc94c4f082d80239fa9";"64e4a00b25baed8315e17752241a3a3d28b5280c";"Move Attribute";"clojure.lang.Compiler.InvokeExpr.dynamicKey";"clojure.lang.Compiler.dynamicKey";"Move Attribute package dynamicKey : Keyword from class clojure.lang.Compiler.InvokeExpr to class clojure.lang.Compiler"
1244;"07f05862c2362f6b51e7c92ccd9476c45c9dff6e";"845c63e9317826a5564ef766550562b3fbe68181";"Rename Class";"clojure.lang.Numbers.BigIntegerBitOps";"clojure.lang.Numbers.BigIntBitOps";"Rename Class clojure.lang.Numbers.BigIntegerBitOps renamed to clojure.lang.Numbers.BigIntBitOps"
1244;"07f05862c2362f6b51e7c92ccd9476c45c9dff6e";"845c63e9317826a5564ef766550562b3fbe68181";"Rename Class";"clojure.lang.Numbers.BigIntegerOps";"clojure.lang.Numbers.BigIntOps";"Rename Class clojure.lang.Numbers.BigIntegerOps renamed to clojure.lang.Numbers.BigIntOps"
1244;"07f05862c2362f6b51e7c92ccd9476c45c9dff6e";"845c63e9317826a5564ef766550562b3fbe68181";"Rename Method";"clojure.lang.Numbers.reduceBigInteger(BigInteger)";"clojure.lang.Numbers.reduceBigInt(BigInt)";"Rename Method public reduceBigInteger(val BigInteger) : Number renamed to public reduceBigInt(val BigInt) : Number in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.add(float,float)";"clojure.lang.Numbers.unchecked_int_add(int,int)";"Rename Method public add(x float, y float) : float renamed to public unchecked_int_add(x int, y int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.dec(float)";"clojure.lang.Numbers.unchecked_int_dec(int)";"Rename Method public dec(x float) : float renamed to public unchecked_int_dec(x int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.divide(float,float)";"clojure.lang.Numbers.unchecked_int_divide(int,int)";"Rename Method public divide(x float, y float) : float renamed to public unchecked_int_divide(x int, y int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.inc(float)";"clojure.lang.Numbers.unchecked_int_inc(int)";"Rename Method public inc(x float) : float renamed to public unchecked_int_inc(x int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.minus(float)";"clojure.lang.Numbers.unchecked_int_negate(int)";"Rename Method public minus(x float) : float renamed to public unchecked_int_negate(x int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.minus(float,float)";"clojure.lang.Numbers.unchecked_int_subtract(int,int)";"Rename Method public minus(x float, y float) : float renamed to public unchecked_int_subtract(x int, y int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.multiply(float,float)";"clojure.lang.Numbers.unchecked_int_multiply(int,int)";"Rename Method public multiply(x float, y float) : float renamed to public unchecked_int_multiply(x int, y int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.shiftLeft(int,int)";"clojure.lang.Numbers.shiftLeftInt(int,int)";"Rename Method public shiftLeft(x int, n int) : int renamed to public shiftLeftInt(x int, n int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.shiftRight(int,int)";"clojure.lang.Numbers.shiftRightInt(int,int)";"Rename Method public shiftRight(x int, n int) : int renamed to public shiftRightInt(x int, n int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_add(int,int)";"clojure.lang.Numbers.unchecked_long_add(long,long)";"Rename Method public unchecked_add(x int, y int) : int renamed to public unchecked_long_add(x long, y long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_dec(int)";"clojure.lang.Numbers.unchecked_long_dec(long)";"Rename Method public unchecked_dec(x int) : int renamed to public unchecked_long_dec(x long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_divide(int,int)";"clojure.lang.Numbers.unchecked_long_divide(long,long)";"Rename Method public unchecked_divide(x int, y int) : int renamed to public unchecked_long_divide(x long, y long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_inc(int)";"clojure.lang.Numbers.unchecked_long_inc(long)";"Rename Method public unchecked_inc(x int) : int renamed to public unchecked_long_inc(x long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_multiply(int,int)";"clojure.lang.Numbers.unchecked_long_multiply(long,long)";"Rename Method public unchecked_multiply(x int, y int) : int renamed to public unchecked_long_multiply(x long, y long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_negate(int)";"clojure.lang.Numbers.unchecked_long_negate(long)";"Rename Method public unchecked_negate(x int) : int renamed to public unchecked_long_negate(x long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_remainder(int,int)";"clojure.lang.Numbers.unchecked_int_remainder(int,int)";"Rename Method public unchecked_remainder(x int, y int) : int renamed to public unchecked_int_remainder(x int, y int) : int in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_remainder(long,long)";"clojure.lang.Numbers.unchecked_long_remainder(long,long)";"Rename Method public unchecked_remainder(x long, y long) : long renamed to public unchecked_long_remainder(x long, y long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Rename Method";"clojure.lang.Numbers.unchecked_subtract(int,int)";"clojure.lang.Numbers.unchecked_long_subtract(long,long)";"Rename Method public unchecked_subtract(x int, y int) : int renamed to public unchecked_long_subtract(x long, y long) : long in class clojure.lang.Numbers"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Extract Method";"clojure.lang.Compiler.NewInstanceMethod.emit(ObjExpr,ClassVisitor)";"clojure.lang.Compiler.ObjMethod.emitBody(ObjExpr,GeneratorAdapter,Class,Expr)";"Extract Method package emitBody(objx ObjExpr, gen GeneratorAdapter, retClass Class, body Expr) : void extracted from public emit(obj ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.NewInstanceMethod"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Extract Method";"clojure.lang.Compiler.FnMethod.doEmitStatic(ObjExpr,ClassVisitor)";"clojure.lang.Compiler.ObjMethod.emitBody(ObjExpr,GeneratorAdapter,Class,Expr)";"Extract Method package emitBody(objx ObjExpr, gen GeneratorAdapter, retClass Class, body Expr) : void extracted from public doEmitStatic(fn ObjExpr, cv ClassVisitor) : void in class clojure.lang.Compiler.FnMethod"
1264;"6ab3e4cd672092823a04c944210a23c29142785d";"8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07";"Extract Method";"clojure.lang.Numbers.reduceBigInteger(BigInteger)";"clojure.lang.Numbers.box(long)";"Extract Method package box(val long) : Number extracted from public reduceBigInteger(val BigInteger) : Number in class clojure.lang.Numbers"
1266;"c5d0985af6c17103eaabe523e442f14c29916266";"3f74c9ff6e9bf8e5e120129ea1c1c7e4719b4dcc";"Rename Method";"clojure.lang.Numbers.reduce(BigInteger)";"clojure.lang.Numbers.reduceBigInteger(BigInteger)";"Rename Method public reduce(val BigInteger) : Number renamed to public reduceBigInteger(val BigInteger) : Number in class clojure.lang.Numbers"
1266;"c5d0985af6c17103eaabe523e442f14c29916266";"3f74c9ff6e9bf8e5e120129ea1c1c7e4719b4dcc";"Move Method";"clojure.lang.Numbers.IntegerBitOps.not(Number)";"clojure.lang.Numbers.not(long)";"Move Method public not(x Number) : Number from class clojure.lang.Numbers.IntegerBitOps to public not(x long) : long from class clojure.lang.Numbers"
1266;"c5d0985af6c17103eaabe523e442f14c29916266";"3f74c9ff6e9bf8e5e120129ea1c1c7e4719b4dcc";"Move Method";"clojure.lang.Numbers.IntegerBitOps.or(Number,Number)";"clojure.lang.Numbers.or(long,long)";"Move Method public or(x Number, y Number) : Number from class clojure.lang.Numbers.IntegerBitOps to public or(x long, y long) : long from class clojure.lang.Numbers"
1266;"c5d0985af6c17103eaabe523e442f14c29916266";"3f74c9ff6e9bf8e5e120129ea1c1c7e4719b4dcc";"Move Method";"clojure.lang.Numbers.IntegerBitOps.and(Number,Number)";"clojure.lang.Numbers.and(long,long)";"Move Method public and(x Number, y Number) : Number from class clojure.lang.Numbers.IntegerBitOps to public and(x long, y long) : long from class clojure.lang.Numbers"
1266;"c5d0985af6c17103eaabe523e442f14c29916266";"3f74c9ff6e9bf8e5e120129ea1c1c7e4719b4dcc";"Move Method";"clojure.lang.Numbers.IntegerBitOps.xor(Number,Number)";"clojure.lang.Numbers.xor(long,long)";"Move Method public xor(x Number, y Number) : Number from class clojure.lang.Numbers.IntegerBitOps to public xor(x long, y long) : long from class clojure.lang.Numbers"
1312;"c37c15c81a299c617779bff738480b1a2fb45524";"f47b3d6f028e0370c495383731a449092d0ae451";"Extract Method";"clojure.lang.Compiler.IfExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Compiler.IfExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)";"Extract Method public doEmit(context C, objx ObjExpr, gen GeneratorAdapter, emitUnboxed boolean) : void extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.IfExpr"
1312;"c37c15c81a299c617779bff738480b1a2fb45524";"f47b3d6f028e0370c495383731a449092d0ae451";"Extract Method";"clojure.lang.Compiler.LetExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Compiler.LetExpr.doEmit(C,ObjExpr,GeneratorAdapter,boolean)";"Extract Method public doEmit(context C, objx ObjExpr, gen GeneratorAdapter, emitUnboxed boolean) : void extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.LetExpr"
1330;"095734ac5064329c03eba65ade873993a890201e";"65ae4928119a50e892bc33e8cbb47a82ebef98ee";"Rename Method";"clojure.lang.Namespace.warnOnReplace(Symbol,Object,Object)";"clojure.lang.Namespace.warnOrFailOnReplace(Symbol,Object,Object)";"Rename Method private warnOnReplace(sym Symbol, o Object, v Object) : void renamed to private warnOrFailOnReplace(sym Symbol, o Object, v Object) : void in class clojure.lang.Namespace"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compiler.MethodExpr.emitTypedArgs(ObjExpr,GeneratorAdapter,Class[],IPersistentVector)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public emitTypedArgs(objx ObjExpr, gen GeneratorAdapter, parameterTypes Class[], args IPersistentVector) : void in class clojure.lang.Compiler.MethodExpr"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.RT.init()";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public init() : void in class clojure.lang.RT"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compile.main(String[])";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public main(args String[]) : void in class clojure.lang.Compile"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compiler.InstanceFieldExpr.(int,Expr,String,Symbol)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public InstanceFieldExpr(line int, target Expr, fieldName String, tag Symbol) in class clojure.lang.Compiler.InstanceFieldExpr"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Namespace.warnOnReplace(Symbol,Object,Object)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from private warnOnReplace(sym Symbol, o Object, v Object) : void in class clojure.lang.Namespace"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compiler.InstanceMethodExpr.(String,int,Symbol,Expr,String,IPersistentVector)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public InstanceMethodExpr(source String, line int, tag Symbol, target Expr, methodName String, args IPersistentVector) in class clojure.lang.Compiler.InstanceMethodExpr"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compiler.NewExpr.(Class,IPersistentVector,int)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public NewExpr(c Class, args IPersistentVector, line int) in class clojure.lang.Compiler.NewExpr"
1349;"c4eb5719b0f30ea4c113e6e98a1c171c43a01abe";"33a3759f9f511f0566d8c590181f04fa1196b512";"Extract Method";"clojure.lang.Compiler.StaticMethodExpr.(String,int,Symbol,Class,String,IPersistentVector)";"clojure.lang.RT.errPrintWriter()";"Extract Method public errPrintWriter() : PrintWriter extracted from public StaticMethodExpr(source String, line int, tag Symbol, c Class, methodName String, args IPersistentVector) in class clojure.lang.Compiler.StaticMethodExpr"
1351;"ab9a567faecc8cfde4625654fe9bb92988d7494d";"68a14c88d11555353bb471efd94ba7d40c2d5008";"Extract Method";"clojure.lang.Namespace.reference(Symbol,Object)";"clojure.lang.Namespace.warnOnReplace(Symbol,Object,Object)";"Extract Method private warnOnReplace(sym Symbol, o Object, v Object) : void extracted from package reference(sym Symbol, val Object) : Object in class clojure.lang.Namespace"
1351;"ab9a567faecc8cfde4625654fe9bb92988d7494d";"68a14c88d11555353bb471efd94ba7d40c2d5008";"Extract Method";"clojure.lang.Namespace.intern(Symbol)";"clojure.lang.Namespace.warnOnReplace(Symbol,Object,Object)";"Extract Method private warnOnReplace(sym Symbol, o Object, v Object) : void extracted from public intern(sym Symbol) : Var in class clojure.lang.Namespace"
1393;"e660e467789ccc8e9922948b3498939e0239fc7c";"ccd7ae47ece97bed6b5eb39e5ba8779b214548cc";"Extract Method";"clojure.lang.MethodImplCache.fnFor(Class)";"clojure.lang.MethodImplCache.findFnFor(Class)";"Extract Method package findFnFor(c Class) : IFn extracted from public fnFor(c Class) : IFn in class clojure.lang.MethodImplCache"
1418;"f81e612cc9ff91ddefc1d86e270cd7f018701802";"68322a4c604693e8b51802abba70861a87adfaf0";"Extract Method";"clojure.lang.RT.count(Object)";"clojure.lang.RT.countFrom(Object)";"Extract Method package countFrom(o Object) : int extracted from public count(o Object) : int in class clojure.lang.RT"
1418;"f81e612cc9ff91ddefc1d86e270cd7f018701802";"68322a4c604693e8b51802abba70861a87adfaf0";"Extract Method";"clojure.lang.RT.get(Object,Object)";"clojure.lang.RT.getFrom(Object,Object)";"Extract Method package getFrom(coll Object, key Object) : Object extracted from public get(coll Object, key Object) : Object in class clojure.lang.RT"
1418;"f81e612cc9ff91ddefc1d86e270cd7f018701802";"68322a4c604693e8b51802abba70861a87adfaf0";"Extract Method";"clojure.lang.RT.get(Object,Object,Object)";"clojure.lang.RT.getFrom(Object,Object,Object)";"Extract Method package getFrom(coll Object, key Object, notFound Object) : Object extracted from public get(coll Object, key Object, notFound Object) : Object in class clojure.lang.RT"
1418;"f81e612cc9ff91ddefc1d86e270cd7f018701802";"68322a4c604693e8b51802abba70861a87adfaf0";"Extract Method";"clojure.lang.RT.nth(Object,int)";"clojure.lang.RT.nthFrom(Object,int)";"Extract Method package nthFrom(coll Object, n int) : Object extracted from public nth(coll Object, n int) : Object in class clojure.lang.RT"
1418;"f81e612cc9ff91ddefc1d86e270cd7f018701802";"68322a4c604693e8b51802abba70861a87adfaf0";"Extract Method";"clojure.lang.RT.nth(Object,int,Object)";"clojure.lang.RT.nthFrom(Object,int,Object)";"Extract Method package nthFrom(coll Object, n int, notFound Object) : Object extracted from public nth(coll Object, n int, notFound Object) : Object in class clojure.lang.RT"
1422;"e6e39d5931fbdf3dfa68cd2d059b8e26ce45c965";"ba6cc3bde1a1ea9801b2133748a45f1277166368";"Rename Method";"clojure.lang.PersistentHashMap.create(List)";"clojure.lang.PersistentHashMap.createWithCheck(ISeq)";"Rename Method public create(init List) : PersistentHashMap renamed to public createWithCheck(items ISeq) : PersistentHashMap in class clojure.lang.PersistentHashMap"
1492;"a64704a9f163ed7271e527587c4d27073c25fc48";"8c16415f8206f023eb932a99428a61b91fc10200";"Extract Method";"clojure.lang.Compiler.InvokeExpr.emit(C,ObjExpr,GeneratorAdapter)";"clojure.lang.Compiler.InvokeExpr.emitArgsAndCall(int,C,ObjExpr,GeneratorAdapter)";"Extract Method package emitArgsAndCall(firstArgToEmit int, context C, objx ObjExpr, gen GeneratorAdapter) : void extracted from public emit(context C, objx ObjExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.InvokeExpr"
1499;"292836f87260fdb994d25a98ef65b4edebf9d09e";"451390fc83bcd3a35144d62a173553572b7ad6d4";"Rename Class";"clojure.lang.Compiler.NewInstanceExpr.DefclassParser";"clojure.lang.Compiler.NewInstanceExpr.DeftypeParser";"Rename Class clojure.lang.Compiler.NewInstanceExpr.DefclassParser renamed to clojure.lang.Compiler.NewInstanceExpr.DeftypeParser"
1499;"292836f87260fdb994d25a98ef65b4edebf9d09e";"451390fc83bcd3a35144d62a173553572b7ad6d4";"Rename Method";"clojure.lang.Compiler.ObjExpr.isDefclass()";"clojure.lang.Compiler.ObjExpr.isDeftype()";"Rename Method package isDefclass() : boolean renamed to package isDeftype() : boolean in class clojure.lang.Compiler.ObjExpr"
1507;"2e7e41c9788b9cc02fe070d8e5319929d996ee32";"73d51aef645c6103eb641dbc19a50dd868df64f1";"Extract Method";"clojure.lang.KeywordLookupSite.fault(Object,ILookupHost)";"clojure.lang.KeywordLookupSite.ilookupThunk(Class)";"Extract Method private ilookupThunk(c Class) : ILookupThunk extracted from public fault(target Object, host ILookupHost) : Object in class clojure.lang.KeywordLookupSite"
1519;"1c8e76b1a0e6616c780902a317a7ab9a8423288b";"eea980a7c21525f1281acf41e2bf6a2c7ae1a3dc";"Move Method";"clojure.lang.Compiler.NewInstanceExpr.parse(C,ISeq)";"clojure.lang.Compiler.NewInstanceExpr.ReifyParser.parse(C,Object)";"Move Method package parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.NewInstanceExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.NewInstanceExpr.ReifyParser"
1529;"6362e0f2522c4f7b2b2e626016b291d4832bb58a";"2ebf995173c5c6ee89cc753f059d4ba044e6d073";"Extract Method";"clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,ISeq)";"clojure.lang.Compiler.NewInstanceExpr.interfaceNames(IPersistentVector)";"Extract Method package interfaceNames(interfaces IPersistentVector) : String[] extracted from package build(interfaceSyms IPersistentVector, fieldSyms IPersistentVector, thisSym Symbol, className String, typeTag Symbol, methodForms ISeq) : Expr in class clojure.lang.Compiler.NewInstanceExpr"
1530;"2ebf995173c5c6ee89cc753f059d4ba044e6d073";"712fd91105ae257ec09005e793ede1eed39a167c";"Move Method";"clojure.lang.Compiler.NewInstanceMethod.primClass(Symbol)";"clojure.lang.Compiler.primClass(Symbol)";"Move Method package primClass(sym Symbol) : Class from class clojure.lang.Compiler.NewInstanceMethod to package primClass(sym Symbol) : Class from class clojure.lang.Compiler"
1530;"2ebf995173c5c6ee89cc753f059d4ba044e6d073";"712fd91105ae257ec09005e793ede1eed39a167c";"Move Method";"clojure.lang.Compiler.NewInstanceMethod.tagClass(Object)";"clojure.lang.Compiler.tagClass(Object)";"Move Method package tagClass(tag Object) : Class from class clojure.lang.Compiler.NewInstanceMethod to package tagClass(tag Object) : Class from class clojure.lang.Compiler"
1531;"712fd91105ae257ec09005e793ede1eed39a167c";"893a0e5601b207bfe852421e394322c64fdcad48";"Extract Method";"clojure.lang.Compiler.NewInstanceExpr.parse(C,ISeq)";"clojure.lang.Compiler.NewInstanceExpr.build(IPersistentVector,IPersistentVector,Symbol,String,Symbol,ISeq)";"Extract Method package build(interfaceSyms IPersistentVector, fieldsSyms IPersistentVector, thisSym Symbol, className String, typeTag Symbol, methodForms ISeq) : Expr extracted from package parse(context C, form ISeq) : Expr in class clojure.lang.Compiler.NewInstanceExpr"
1532;"893a0e5601b207bfe852421e394322c64fdcad48";"c0218cfc80ba9ae4c1808e8f5644e14c464a5268";"Extract Method";"clojure.lang.Compiler.eval(Object)";"clojure.lang.Compiler.eval(Object,boolean)";"Extract Method public eval(form Object, freshLoader boolean) : Object extracted from public eval(form Object) : Object in class clojure.lang.Compiler"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Method";"clojure.lang.Compiler.ObjMethod.isVariadic()";"clojure.lang.Compiler.FnMethod.isVariadic()";"Push Down Method package isVariadic() : boolean from class clojure.lang.Compiler.ObjMethod to package isVariadic() : boolean from class clojure.lang.Compiler.FnMethod"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Method";"clojure.lang.Compiler.ObjMethod.reqParms()";"clojure.lang.Compiler.FnMethod.reqParms()";"Push Down Method public reqParms() : PersistentVector from class clojure.lang.Compiler.ObjMethod to public reqParms() : PersistentVector from class clojure.lang.Compiler.FnMethod"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Method";"clojure.lang.Compiler.ObjMethod.restParm()";"clojure.lang.Compiler.FnMethod.restParm()";"Push Down Method public restParm() : LocalBinding from class clojure.lang.Compiler.ObjMethod to public restParm() : LocalBinding from class clojure.lang.Compiler.FnMethod"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Method";"clojure.lang.Compiler.ObjMethod.parse(ObjExpr,ISeq)";"clojure.lang.Compiler.FnMethod.parse(ObjExpr,ISeq)";"Push Down Method private parse(objx ObjExpr, form ISeq) : ObjMethod from class clojure.lang.Compiler.ObjMethod to package parse(objx ObjExpr, form ISeq) : FnMethod from class clojure.lang.Compiler.FnMethod"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Attribute";"clojure.lang.Compiler.ObjExpr.onceOnly";"clojure.lang.Compiler.FnExpr.onceOnly";"Push Down Attribute package onceOnly : boolean from class clojure.lang.Compiler.ObjExpr to class clojure.lang.Compiler.FnExpr"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Attribute";"clojure.lang.Compiler.ObjMethod.restParm";"clojure.lang.Compiler.FnMethod.restParm";"Push Down Attribute package restParm : LocalBinding from class clojure.lang.Compiler.ObjMethod to class clojure.lang.Compiler.FnMethod"
1544;"c5ff863c30917cbc4eb728583f494886806a064e";"332a5a472b2f6d831580ccc6f81acc9581559893";"Push Down Attribute";"clojure.lang.Compiler.ObjMethod.reqParms";"clojure.lang.Compiler.FnMethod.reqParms";"Push Down Attribute package reqParms : PersistentVector from class clojure.lang.Compiler.ObjMethod to class clojure.lang.Compiler.FnMethod"
1545;"332a5a472b2f6d831580ccc6f81acc9581559893";"3e60eff602652e753a54ba88b25dbdd2615c3b2e";"Rename Class";"clojure.lang.Compiler.FnMethod";"clojure.lang.Compiler.ObjMethod";"Rename Class clojure.lang.Compiler.FnMethod renamed to clojure.lang.Compiler.ObjMethod"
1545;"332a5a472b2f6d831580ccc6f81acc9581559893";"3e60eff602652e753a54ba88b25dbdd2615c3b2e";"Extract Superclass";"clojure.lang.Compiler.FnExpr";"clojure.lang.Compiler.ObjExpr";"Extract Superclass clojure.lang.Compiler.ObjExpr from class clojure.lang.Compiler.FnExpr"
1545;"332a5a472b2f6d831580ccc6f81acc9581559893";"3e60eff602652e753a54ba88b25dbdd2615c3b2e";"Extract Method";"clojure.lang.Compiler.FnExpr.compile()";"clojure.lang.Compiler.ObjExpr.emitMethods(ClassVisitor)";"Extract Method protected emitMethods(gen ClassVisitor) : void extracted from private compile() : void in class clojure.lang.Compiler.FnExpr"
1551;"a1397390d8b3b63f2039359520629d87b152d717";"c4a5cd208aef54ae5b292fa41c4880017315e553";"Inline Method";"clojure.lang.RT.do_nth(Object,int)";"clojure.lang.RT.nth(Object,int)";"Inline Method public do_nth(coll Object, n int) : Object inlined to public nth(coll Object, n int) : Object in class clojure.lang.RT"
1568;"f79e724224f86d938cd6ed287355808233c899e9";"16420cd99a274d5f69930a46cde4899c091a5398";"Extract Method";"clojure.lang.RT.nth(Object,int)";"clojure.lang.RT.do_nth(Object,int)";"Extract Method public do_nth(coll Object, n int) : Object extracted from public nth(coll Object, n int) : Object in class clojure.lang.RT"
1578;"ff27522840fb3c1681c331ad1fb44a313bd44e0a";"b045a379215d1f48e6a2e6cedcdb41526cd5bb25";"Extract Interface";"clojure.lang.IPersistentVector";"clojure.lang.Indexed";"Extract Interface clojure.lang.Indexed from class clojure.lang.IPersistentVector"
1578;"ff27522840fb3c1681c331ad1fb44a313bd44e0a";"b045a379215d1f48e6a2e6cedcdb41526cd5bb25";"Extract Method";"clojure.lang.LazySeq.seq()";"clojure.lang.LazySeq.sval()";"Extract Method package sval() : Object extracted from public seq() : ISeq in class clojure.lang.LazySeq"
1578;"ff27522840fb3c1681c331ad1fb44a313bd44e0a";"b045a379215d1f48e6a2e6cedcdb41526cd5bb25";"Extract Method";"clojure.lang.PersistentVector.nth(int)";"clojure.lang.PersistentVector.nodeFor(int)";"Extract Method public nodeFor(i int) : Object[] extracted from public nth(i int) : Object in class clojure.lang.PersistentVector"
1579;"b045a379215d1f48e6a2e6cedcdb41526cd5bb25";"d0fe0d1c544fb4d8d05ba3c7b6bf83fc2f4692a3";"Inline Method";"clojure.lang.RT.getRootClassLoader()";"clojure.lang.RT.addURL(Object)";"Inline Method public getRootClassLoader() : DynamicClassLoader inlined to public addURL(url Object) : void in class clojure.lang.RT"
1585;"dbb85aafafc90a9b6021ef58c5cd4bd8a20600fc";"939976735ea071cb00944b066392ab8b8d749918";"Extract Method";"clojure.lang.Compiler.compile(Reader,String,String)";"clojure.lang.Compiler.compile1(GeneratorAdapter,FnExpr,Object)";"Extract Method package compile1(gen GeneratorAdapter, fn FnExpr, form Object) : void extracted from public compile(rdr Reader, sourcePath String, sourceName String) : Object in class clojure.lang.Compiler"
1597;"be925c49b9d7c9e799711fd4caa4cf248ac16023";"e8fce745c782a34f8729acea76bb191fcb41eb0f";"Rename Method";"clojure.lang.Stream.makeSeq(IFn)";"clojure.lang.Stream.makeSequence(IFn)";"Rename Method package makeSeq(tap IFn) : ISeq renamed to package makeSequence(tap IFn) : ISeq in class clojure.lang.Stream"
1597;"be925c49b9d7c9e799711fd4caa4cf248ac16023";"e8fce745c782a34f8729acea76bb191fcb41eb0f";"Extract Method";"clojure.lang.Stream.seq()";"clojure.lang.Stream.sequence()";"Extract Method public sequence() : ISeq extracted from public seq() : ISeq in class clojure.lang.Stream"
1614;"37606d41d3dcc574dd6b755de4849fe899c01af2";"487b713ce0f6fe49470a7f0aa7acf14bdb58c985";"Extract Method";"clojure.lang.MultiFn.getFn(Object)";"clojure.lang.MultiFn.getMethod(Object)";"Extract Method public getMethod(dispatchVal Object) : IFn extracted from private getFn(dispatchVal Object) : IFn in class clojure.lang.MultiFn"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Class";"clojure.lang.ASeq.Stream";"clojure.lang.ASeq.Src";"Rename Class clojure.lang.ASeq.Stream renamed to clojure.lang.ASeq.Src"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.IteratorStream.next()";"clojure.lang.IteratorStream.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.IteratorStream"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.next()";"clojure.lang.ArrayStream.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_boolean.next()";"clojure.lang.ArrayStream.ArrayStream_boolean.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_boolean"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_byte.next()";"clojure.lang.ArrayStream.ArrayStream_byte.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_byte"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_char.next()";"clojure.lang.ArrayStream.ArrayStream_char.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_char"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_double.next()";"clojure.lang.ArrayStream.ArrayStream_double.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_double"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_float.next()";"clojure.lang.ArrayStream.ArrayStream_float.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_float"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_int.next()";"clojure.lang.ArrayStream.ArrayStream_int.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_int"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_long.next()";"clojure.lang.ArrayStream.ArrayStream_long.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_long"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ArrayStream.ArrayStream_short.next()";"clojure.lang.ArrayStream.ArrayStream_short.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_short"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Rename Method";"clojure.lang.ASeq.Stream.next()";"clojure.lang.ASeq.Src.invoke()";"Rename Method public next() : Object renamed to public invoke() : Object in class clojure.lang.ASeq.Src"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_double.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_double"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_char.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_char"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_byte.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_byte"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_short.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_short"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_int.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_int"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_boolean.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_boolean"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_long.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_long"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.IteratorStream.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.IteratorStream"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ASeq.Src.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ASeq.Src"
1625;"ed1a4e373ad3bfce7acae1fed7a64144fc3d26df";"703c847b1a470100d2113ae76352647400d32476";"Inline Method";"clojure.lang.RT.eos()";"clojure.lang.ArrayStream.ArrayStream_float.invoke()";"Inline Method public eos() : Object inlined to public invoke() : Object in class clojure.lang.ArrayStream.ArrayStream_float"
1629;"9723a7b5d693bec38dc57269b423094ababa9dd1";"7dc9d669d55392fc83b1145f44f5e4878c73b668";"Extract Method";"clojure.lang.Compiler.FnExpr.emitConstants(GeneratorAdapter)";"clojure.lang.Compiler.FnExpr.emitValue(Object,GeneratorAdapter)";"Extract Method package emitValue(value Object, gen GeneratorAdapter) : void extracted from package emitConstants(clinitgen GeneratorAdapter) : void in class clojure.lang.Compiler.FnExpr"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Extract Interface";"clojure.lang.IPersistentCollection";"clojure.lang.Seqable";"Extract Interface clojure.lang.Seqable from class clojure.lang.IPersistentCollection"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.APersistentVector.RSeq.rest()";"clojure.lang.APersistentVector.RSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.APersistentVector.RSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.APersistentVector.Seq.rest()";"clojure.lang.APersistentVector.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.APersistentVector.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.ArraySeq.rest()";"clojure.lang.ArraySeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.ArraySeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.ArraySeq.ArraySeq_double.rest()";"clojure.lang.ArraySeq.ArraySeq_double.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.ArraySeq.ArraySeq_double"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.ArraySeq.ArraySeq_float.rest()";"clojure.lang.ArraySeq.ArraySeq_float.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.ArraySeq.ArraySeq_float"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.ArraySeq.ArraySeq_int.rest()";"clojure.lang.ArraySeq.ArraySeq_int.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.ArraySeq.ArraySeq_int"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.ArraySeq.ArraySeq_long.rest()";"clojure.lang.ArraySeq.ArraySeq_long.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.ArraySeq.ArraySeq_long"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.EnumerationSeq.rest()";"clojure.lang.EnumerationSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.EnumerationSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.IteratorSeq.rest()";"clojure.lang.IteratorSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.IteratorSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.LazyCons.rest()";"clojure.lang.LazyCons.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.LazyCons"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentArrayMap.Seq.rest()";"clojure.lang.PersistentArrayMap.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentArrayMap.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentList.rest()";"clojure.lang.PersistentList.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentList"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.Range.rest()";"clojure.lang.Range.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.Range"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.StreamSeq.rest()";"clojure.lang.StreamSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.StreamSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.StringSeq.rest()";"clojure.lang.StringSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.StringSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentTreeMap.Seq.rest()";"clojure.lang.PersistentTreeMap.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentTreeMap.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentQueue.Seq.rest()";"clojure.lang.PersistentQueue.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentQueue.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.rest()";"clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentHashMap.BitmapIndexedNode.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentHashMap.FullNode.Seq.rest()";"clojure.lang.PersistentHashMap.FullNode.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentHashMap.FullNode.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.PersistentStructMap.Seq.rest()";"clojure.lang.PersistentStructMap.Seq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.PersistentStructMap.Seq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.RT.rest(Object)";"clojure.lang.RT.next(Object)";"Rename Method public rest(x Object) : ISeq renamed to public next(x Object) : ISeq in class clojure.lang.RT"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.LazySeq.rest()";"clojure.lang.LazySeq.seq()";"Rename Method public rest() : ISeq renamed to public seq() : ISeq in class clojure.lang.LazySeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.APersistentMap.KeySeq.rest()";"clojure.lang.APersistentMap.KeySeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.APersistentMap.KeySeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Rename Method";"clojure.lang.APersistentMap.ValSeq.rest()";"clojure.lang.APersistentMap.ValSeq.next()";"Rename Method public rest() : ISeq renamed to public next() : ISeq in class clojure.lang.APersistentMap.ValSeq"
1664;"b8e333fb3437dca760f16136ed074a4dd463fe35";"d209040102e3a2cb855fd8f8c67c255efe202230";"Move Attribute";"clojure.lang.CachedSeq.s";"clojure.lang.LazySeq.s";"Move Attribute private s : ISeq from class clojure.lang.CachedSeq to class clojure.lang.LazySeq"
1673;"f5ebf8fee9420b79cca1f74a7f2cd7d9cb7ca7ad";"fdd42d25f842b610f3eaacb117b3223743a7fb08";"Extract Interface";"clojure.lang.PersistentList.EmptyList";"clojure.lang.Counted";"Extract Interface clojure.lang.Counted from class clojure.lang.PersistentList.EmptyList"
1673;"f5ebf8fee9420b79cca1f74a7f2cd7d9cb7ca7ad";"fdd42d25f842b610f3eaacb117b3223743a7fb08";"Extract Interface";"clojure.lang.APersistentVector.RSeq";"clojure.lang.Counted";"Extract Interface clojure.lang.Counted from class clojure.lang.APersistentVector.RSeq"
1673;"f5ebf8fee9420b79cca1f74a7f2cd7d9cb7ca7ad";"fdd42d25f842b610f3eaacb117b3223743a7fb08";"Extract Interface";"clojure.lang.Range";"clojure.lang.Counted";"Extract Interface clojure.lang.Counted from class clojure.lang.Range"
1673;"f5ebf8fee9420b79cca1f74a7f2cd7d9cb7ca7ad";"fdd42d25f842b610f3eaacb117b3223743a7fb08";"Extract Interface";"clojure.lang.PersistentArrayMap.Seq";"clojure.lang.Counted";"Extract Interface clojure.lang.Counted from class clojure.lang.PersistentArrayMap.Seq"
1673;"f5ebf8fee9420b79cca1f74a7f2cd7d9cb7ca7ad";"fdd42d25f842b610f3eaacb117b3223743a7fb08";"Extract Interface";"clojure.lang.PersistentList";"clojure.lang.Counted";"Extract Interface clojure.lang.Counted from class clojure.lang.PersistentList"
1688;"f1daffdbae886dab563f5653ffd78db40403115c";"5577a47a390782d7ab911c2e3c4c8be1b0341aa8";"Rename Method";"clojure.lang.Agent.get()";"clojure.lang.Agent.deref()";"Rename Method public get() : Object renamed to public deref() : Object in class clojure.lang.Agent"
1688;"f1daffdbae886dab563f5653ffd78db40403115c";"5577a47a390782d7ab911c2e3c4c8be1b0341aa8";"Rename Method";"clojure.lang.Atom.get()";"clojure.lang.Atom.deref()";"Rename Method public get() : Object renamed to public deref() : Object in class clojure.lang.Atom"
1688;"f1daffdbae886dab563f5653ffd78db40403115c";"5577a47a390782d7ab911c2e3c4c8be1b0341aa8";"Rename Method";"clojure.lang.Delay.get()";"clojure.lang.Delay.deref()";"Rename Method package get() : Object renamed to public deref() : Object in class clojure.lang.Delay"
1688;"f1daffdbae886dab563f5653ffd78db40403115c";"5577a47a390782d7ab911c2e3c4c8be1b0341aa8";"Rename Method";"clojure.lang.Ref.get()";"clojure.lang.Ref.deref()";"Rename Method public get() : Object renamed to public deref() : Object in class clojure.lang.Ref"
1688;"f1daffdbae886dab563f5653ffd78db40403115c";"5577a47a390782d7ab911c2e3c4c8be1b0341aa8";"Extract Method";"clojure.lang.Var.get()";"clojure.lang.Var.deref()";"Extract Method public deref() : Object extracted from public get() : Object in class clojure.lang.Var"
1707;"8f0a24409ce9e905222b03377175533e1cab3be6";"9fcd8aea5940019c7d5ee25ddaf4b43f6339a326";"Rename Method";"clojure.lang.Util.equal(Object,Object)";"clojure.lang.Util.equiv(Object,Object)";"Rename Method public equal(k1 Object, k2 Object) : boolean renamed to public equiv(k1 Object, k2 Object) : boolean in class clojure.lang.Util"
1707;"8f0a24409ce9e905222b03377175533e1cab3be6";"9fcd8aea5940019c7d5ee25ddaf4b43f6339a326";"Extract Method";"clojure.lang.ASeq.equals(Object)";"clojure.lang.Util.equals(Object,Object)";"Extract Method public equals(k1 Object, k2 Object) : boolean extracted from public equals(obj Object) : boolean in class clojure.lang.ASeq"
1719;"51ed068c679a4a65a2aa3552f8d088a1b787b08b";"f8eea33039908560cb6fc564aea8341af4b0d7c7";"Extract Method";"clojure.lang.RT.addURL(Object)";"clojure.lang.RT.getRootClassLoader()";"Extract Method public getRootClassLoader() : DynamicClassLoader extracted from public addURL(url Object) : void in class clojure.lang.RT"
1726;"e26c24712a9e0f94e25aa6e9bdadea7835a7bec3";"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"Pull Up Method";"clojure.lang.Agent.removeWatch(Object)";"clojure.lang.ARef.removeWatch(Agent)";"Pull Up Method public removeWatch(watcher Object) : Agent from class clojure.lang.Agent to public removeWatch(watcher Agent) : IRef from class clojure.lang.ARef"
1726;"e26c24712a9e0f94e25aa6e9bdadea7835a7bec3";"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"Pull Up Method";"clojure.lang.Agent.addWatch(Object,IFn)";"clojure.lang.ARef.addWatch(Agent,IFn,boolean)";"Pull Up Method public addWatch(watcher Object, callback IFn) : Agent from class clojure.lang.Agent to public addWatch(watcher Agent, action IFn, sendOff boolean) : IRef from class clojure.lang.ARef"
1726;"e26c24712a9e0f94e25aa6e9bdadea7835a7bec3";"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"Extract Method";"clojure.lang.Agent.Action.doRun(Action)";"clojure.lang.ARef.notifyWatches()";"Extract Method public notifyWatches() : void extracted from package doRun(action Action) : void in class clojure.lang.Agent.Action"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Interface";"clojure.lang.IObj";"clojure.lang.IMeta";"Extract Interface clojure.lang.IMeta from class clojure.lang.IObj"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Pull Up Method";"clojure.lang.Agent.getValidator()";"clojure.lang.ARef.getValidator()";"Pull Up Method public getValidator() : IFn from class clojure.lang.Agent to public getValidator() : IFn from class clojure.lang.ARef"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Pull Up Method";"clojure.lang.Var.meta()";"clojure.lang.AReference.meta()";"Pull Up Method public meta() : IPersistentMap from class clojure.lang.Var to public meta() : IPersistentMap from class clojure.lang.AReference"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Pull Up Method";"clojure.lang.Agent.validate(IFn,Object)";"clojure.lang.ARef.validate(IFn,Object)";"Pull Up Method package validate(vf IFn, val Object) : void from class clojure.lang.Agent to package validate(vf IFn, val Object) : void from class clojure.lang.ARef"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Pull Up Method";"clojure.lang.Agent.setValidator(IFn)";"clojure.lang.ARef.setValidator(IFn)";"Pull Up Method public setValidator(vf IFn) : void from class clojure.lang.Agent to public setValidator(vf IFn) : void from class clojure.lang.ARef"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Method";"clojure.lang.Agent.setState(Object)";"clojure.lang.ARef.validate(Object)";"Extract Method package validate(val Object) : void extracted from package setState(newState Object) : boolean in class clojure.lang.Agent"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Method";"clojure.lang.Var.setTag(Symbol)";"clojure.lang.AReference.alterMeta(IFn,ISeq)";"Extract Method public alterMeta(alter IFn, args ISeq) : IPersistentMap extracted from public setTag(tag Symbol) : void in class clojure.lang.Var"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Method";"clojure.lang.Var.bindRoot(Object)";"clojure.lang.AReference.alterMeta(IFn,ISeq)";"Extract Method public alterMeta(alter IFn, args ISeq) : IPersistentMap extracted from public bindRoot(root Object) : void in class clojure.lang.Var"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Method";"clojure.lang.Var.setMacro()";"clojure.lang.AReference.alterMeta(IFn,ISeq)";"Extract Method public alterMeta(alter IFn, args ISeq) : IPersistentMap extracted from public setMacro() : void in class clojure.lang.Var"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Extract Method";"clojure.lang.Var.setMeta(IPersistentMap)";"clojure.lang.AReference.resetMeta(IPersistentMap)";"Extract Method public resetMeta(m IPersistentMap) : IPersistentMap extracted from public setMeta(m IPersistentMap) : void in class clojure.lang.Var"
1727;"8a6c52556d92ab6ab369c7bf2a8c956add582de9";"96757ae6fe6651f2753f7495a6ff476ed72c1798";"Pull Up Attribute";"clojure.lang.Agent.validator";"clojure.lang.ARef.validator";"Pull Up Attribute private validator : IFn from class clojure.lang.Agent to class clojure.lang.ARef"
1731;"49063a9bba42d14f83474802b3240f13e75bcb36";"db598ed1a8d2105f552e1dcdaf2b37b781f015e0";"Extract Method";"clojure.lang.Repl.main(String[])";"clojure.main.legacy_repl(String[])";"Extract Method public legacy_repl(args String[]) : void extracted from public main(args String[]) : void in class clojure.lang.Repl"
1731;"49063a9bba42d14f83474802b3240f13e75bcb36";"db598ed1a8d2105f552e1dcdaf2b37b781f015e0";"Extract Method";"clojure.lang.Script.main(String[])";"clojure.main.legacy_script(String[])";"Extract Method public legacy_script(args String[]) : void extracted from public main(args String[]) : void in class clojure.lang.Script"
1735;"c29ccf985770f751a41f7e5728938af0316b5dfe";"7d603560e3a43ba8e787a38312319ff0d6139b54";"Extract Method";"clojure.lang.Agent.Action.doRun(Action)";"clojure.lang.Agent.releasePendingSends()";"Extract Method public releasePendingSends() : int extracted from package doRun(action Action) : void in class clojure.lang.Agent.Action"
1747;"56431834457820979e55c066e995ffe961ca11b3";"cad4fcf1afe7977b83c3ee2f40521eb38aa33e10";"Push Down Method";"clojure.lang.AFn.compare(Object,Object)";"clojure.lang.AFunction.compare(Object,Object)";"Push Down Method public compare(o1 Object, o2 Object) : int from class clojure.lang.AFn to public compare(o1 Object, o2 Object) : int from class clojure.lang.AFunction"
1814;"a25af8d4b183e0bd3220e155e41efc4baa991922";"240969a3af34ff0661238d03c006cc5a74dc1698";"Rename Method";"clojure.lang.RT.loadLib(String,boolean)";"clojure.lang.RT.load(String,boolean)";"Rename Method public loadLib(lib String, failIfNotFound boolean) : void renamed to public load(scriptbase String, failIfNotFound boolean) : void in class clojure.lang.RT"
1814;"a25af8d4b183e0bd3220e155e41efc4baa991922";"240969a3af34ff0661238d03c006cc5a74dc1698";"Rename Method";"clojure.lang.RT.compileLib(String)";"clojure.lang.RT.compile(String)";"Rename Method public compileLib(lib String) : void renamed to package compile(cljfile String) : void in class clojure.lang.RT"
1815;"240969a3af34ff0661238d03c006cc5a74dc1698";"22a2d9080da1ab1761306f0171d85c5464d82096";"Extract Method";"clojure.lang.Compiler.FnExpr.compile()";"clojure.lang.Compiler.writeClassFile(String,byte[])";"Extract Method public writeClassFile(internalName String, bytecode byte[]) : void extracted from private compile() : void in class clojure.lang.Compiler.FnExpr"
1815;"240969a3af34ff0661238d03c006cc5a74dc1698";"22a2d9080da1ab1761306f0171d85c5464d82096";"Extract Method";"clojure.lang.Compiler.FnExpr.compile()";"clojure.lang.Compiler.FnExpr.emitConstants(GeneratorAdapter)";"Extract Method package emitConstants(clinitgen GeneratorAdapter) : void extracted from private compile() : void in class clojure.lang.Compiler.FnExpr"
1815;"240969a3af34ff0661238d03c006cc5a74dc1698";"22a2d9080da1ab1761306f0171d85c5464d82096";"Extract Method";"clojure.lang.Compiler.compile(Reader,String,String)";"clojure.lang.Compiler.FnExpr.emitConstants(GeneratorAdapter)";"Extract Method package emitConstants(clinitgen GeneratorAdapter) : void extracted from public compile(rdr Reader, sourcePath String, sourceName String) : Object in class clojure.lang.Compiler"
1815;"240969a3af34ff0661238d03c006cc5a74dc1698";"22a2d9080da1ab1761306f0171d85c5464d82096";"Extract Method";"clojure.lang.RT.doInit()";"clojure.lang.RT.loadLib(String)";"Extract Method public loadLib(lib String) : void extracted from package doInit() : void in class clojure.lang.RT"
1822;"d3d2b3a1523aac31887b7670a56fcf472a588771";"8dad2038fd97dc5757ca95a6ea515860f227502c";"Extract Method";"clojure.lang.Reflector.invokeMatchingMethod(String,List,Object,Object[])";"clojure.lang.Reflector.noMethodReport(String,Object)";"Extract Method private noMethodReport(methodName String, target Object) : String extracted from package invokeMatchingMethod(methodName String, methods List, target Object, args Object[]) : Object in class clojure.lang.Reflector"
1834;"7c8af7266505c3425712f6b48b5f250114015c20";"e7e3ca9d005df867ee44609785b166d1043f77af";"Extract Method";"clojure.lang.RT.seqToTypedArray(ISeq)";"clojure.lang.RT.seqToTypedArray(Class,ISeq)";"Extract Method public seqToTypedArray(type Class, seq ISeq) : Object extracted from public seqToTypedArray(seq ISeq) : Object in class clojure.lang.RT"
1849;"2faa08e4d42feac84230d52272de6f10b0caa434";"53ec9af4fd879482a6b8e04cff029d5db9634870";"Extract Method";"clojure.lang.Compiler.macroexpand1(Object)";"clojure.lang.Compiler.namesStaticMember(Symbol)";"Extract Method public namesStaticMember(sym Symbol) : boolean extracted from public macroexpand1(x Object) : Object in class clojure.lang.Compiler"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Rename Method";"clojure.lang.APersistentMap.add(Object)";"clojure.lang.APersistentMap.put(Object,Object)";"Rename Method public add(o Object) : boolean renamed to public put(key Object, value Object) : Object in class clojure.lang.APersistentMap"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Rename Method";"clojure.lang.APersistentMap.addAll(Collection)";"clojure.lang.APersistentMap.putAll(Map)";"Rename Method public addAll(c Collection) : boolean renamed to public putAll(t Map) : void in class clojure.lang.APersistentMap"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Rename Method";"clojure.lang.APersistentMap.contains(Object)";"clojure.lang.APersistentMap.entrySet()";"Rename Method public contains(o Object) : boolean renamed to public entrySet() : Set in class clojure.lang.APersistentMap"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Pull Up Method";"clojure.lang.MapEntry.setValue(Object)";"clojure.lang.AMapEntry.setValue(Object)";"Pull Up Method public setValue(value Object) : Object from class clojure.lang.MapEntry to public setValue(value Object) : Object from class clojure.lang.AMapEntry"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Pull Up Method";"clojure.lang.PersistentHashMap.LeafNode.setValue(Object)";"clojure.lang.AMapEntry.setValue(Object)";"Pull Up Method public setValue(value Object) : Object from class clojure.lang.PersistentHashMap.LeafNode to public setValue(value Object) : Object from class clojure.lang.AMapEntry"
1856;"7de158ba6ee7cbf73e9f91fce4d038dd73b40789";"2763e3f0dea103890bb6f8fe407186f257a29e35";"Pull Up Method";"clojure.lang.PersistentTreeMap.Node.setValue(Object)";"clojure.lang.AMapEntry.setValue(Object)";"Pull Up Method public setValue(value Object) : Object from class clojure.lang.PersistentTreeMap.Node to public setValue(value Object) : Object from class clojure.lang.AMapEntry"
1865;"9b9785d3877b10e0ada69eccedd471a17be2a6d2";"1c2a26ad5d07f6cc4175f86d9aa95656cf76c6f1";"Rename Method";"clojure.lang.Agent.Action.call()";"clojure.lang.Agent.Action.run()";"Rename Method public call() : Object renamed to public run() : void in class clojure.lang.Agent.Action"
1866;"1c2a26ad5d07f6cc4175f86d9aa95656cf76c6f1";"d25ed01f4c028d04e8134daf584c6d5fcc7b858d";"Rename Method";"clojure.lang.Agent.Action.run()";"clojure.lang.Agent.Action.call()";"Rename Method public run() : void renamed to public call() : Object in class clojure.lang.Agent.Action"
1879;"edf6f303654ae113d733ee7347200143c7fdd2de";"9016a7ed9e5e728dff5e7c855b1baabccaf272d2";"Extract Method";"clojure.lang.Compiler.namespaceFor(Symbol)";"clojure.lang.Compiler.namespaceFor(Namespace,Symbol)";"Extract Method private namespaceFor(inns Namespace, sym Symbol) : Namespace extracted from private namespaceFor(sym Symbol) : Namespace in class clojure.lang.Compiler"
1885;"dcd325e36cffdb53fee52dac186bcf02b7220452";"6d32a71c424d44bbec801d62db6cd90ff0312539";"Extract Method";"clojure.lang.Compiler.FnExpr.eval()";"clojure.lang.Compiler.FnExpr.getCompiledClass()";"Extract Method package getCompiledClass() : Class extracted from public eval() : Object in class clojure.lang.Compiler.FnExpr"
1912;"a8307cc884811af0a769023bf1459d77c1c02f7d";"6b8b308e3a36a79489d7b923620b7d83cd0b6da5";"Extract Method";"clojure.lang.RT.seq(Object)";"clojure.lang.RT.seqFrom(Object)";"Extract Method package seqFrom(coll Object) : ISeq extracted from public seq(coll Object) : ISeq in class clojure.lang.RT"
1913;"6b8b308e3a36a79489d7b923620b7d83cd0b6da5";"158698c6ad3a95b52a3120be1bcdd381bc8750d5";"Move Attribute";"clojure.lang.LazySeq._firstFn";"clojure.lang.LazyCons._firstFn";"Move Attribute package _firstFn : IFn from class clojure.lang.LazySeq to class clojure.lang.LazyCons"
1913;"6b8b308e3a36a79489d7b923620b7d83cd0b6da5";"158698c6ad3a95b52a3120be1bcdd381bc8750d5";"Move Attribute";"clojure.lang.LazySeq._restFn";"clojure.lang.LazyCons._restFn";"Move Attribute package _restFn : IFn from class clojure.lang.LazySeq to class clojure.lang.LazyCons"
1913;"6b8b308e3a36a79489d7b923620b7d83cd0b6da5";"158698c6ad3a95b52a3120be1bcdd381bc8750d5";"Move Attribute";"clojure.lang.LazySeq._first";"clojure.lang.LazyCons._first";"Move Attribute package _first : Object from class clojure.lang.LazySeq to class clojure.lang.LazyCons"
1913;"6b8b308e3a36a79489d7b923620b7d83cd0b6da5";"158698c6ad3a95b52a3120be1bcdd381bc8750d5";"Move Attribute";"clojure.lang.LazySeq._rest";"clojure.lang.LazyCons._rest";"Move Attribute package _rest : ISeq from class clojure.lang.LazySeq to class clojure.lang.LazyCons"
1919;"5c97b610426556b6d032084f1dc601e85000f829";"fca8d50f0191456b3aa4e20824dae29e70a0b12d";"Extract Method";"clojure.lang.RT.loadResourceScript(Class,String)";"clojure.lang.RT.loadResourceScript(Class,String,boolean)";"Extract Method public loadResourceScript(c Class, name String, failIfNotFound boolean) : void extracted from public loadResourceScript(c Class, name String) : void in class clojure.lang.RT"
1919;"5c97b610426556b6d032084f1dc601e85000f829";"fca8d50f0191456b3aa4e20824dae29e70a0b12d";"Extract Method";"clojure.lang.RT.loadResourceScript(String)";"clojure.lang.RT.loadResourceScript(String,boolean)";"Extract Method public loadResourceScript(name String, failIfNotFound boolean) : void extracted from public loadResourceScript(name String) : void in class clojure.lang.RT"
1919;"5c97b610426556b6d032084f1dc601e85000f829";"fca8d50f0191456b3aa4e20824dae29e70a0b12d";"Extract Method";"clojure.lang.RT.doInit()";"clojure.lang.RT.maybeLoadResourceScript(String)";"Extract Method public maybeLoadResourceScript(name String) : void extracted from package doInit() : void in class clojure.lang.RT"
1932;"a8e7ec162fb395bd5d1a4f29a106dfc98333e85c";"b11b857af37611adc0739c801fbfb8c8aee6b8dd";"Extract Method";"clojure.lang.PersistentStructMap.withMeta(IPersistentMap)";"clojure.lang.PersistentStructMap.makeNew(IPersistentMap,Def,Object[],IPersistentMap)";"Extract Method protected makeNew(meta IPersistentMap, def Def, vals Object[], ext IPersistentMap) : PersistentStructMap extracted from public withMeta(meta IPersistentMap) : Obj in class clojure.lang.PersistentStructMap"
1932;"a8e7ec162fb395bd5d1a4f29a106dfc98333e85c";"b11b857af37611adc0739c801fbfb8c8aee6b8dd";"Extract Method";"clojure.lang.PersistentStructMap.assoc(Object,Object)";"clojure.lang.PersistentStructMap.makeNew(IPersistentMap,Def,Object[],IPersistentMap)";"Extract Method protected makeNew(meta IPersistentMap, def Def, vals Object[], ext IPersistentMap) : PersistentStructMap extracted from public assoc(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentStructMap"
1932;"a8e7ec162fb395bd5d1a4f29a106dfc98333e85c";"b11b857af37611adc0739c801fbfb8c8aee6b8dd";"Extract Method";"clojure.lang.PersistentStructMap.without(Object)";"clojure.lang.PersistentStructMap.makeNew(IPersistentMap,Def,Object[],IPersistentMap)";"Extract Method protected makeNew(meta IPersistentMap, def Def, vals Object[], ext IPersistentMap) : PersistentStructMap extracted from public without(key Object) : IPersistentMap in class clojure.lang.PersistentStructMap"
1941;"4b47829f59992f7de22a859fd32306bb512747de";"a63f62ee1ffcab5c042d42a1dbc01e59e5ec9960";"Extract Method";"clojure.lang.MultiFn.findAndCacheBestMethod(Object)";"clojure.lang.MultiFn.isA(Object,Object)";"Extract Method private isA(x Object, y Object) : boolean extracted from private findAndCacheBestMethod(dispatchVal Object) : IFn in class clojure.lang.MultiFn"
1946;"00061735edd435995167ee7bbf01a17d8ae2cc66";"e2feeee5b58d841085b708bfdb53178df8b884e7";"Rename Method";"clojure.lang.MultiFn.assoc(Object,IFn)";"clojure.lang.MultiFn.addMethod(Object,IFn)";"Rename Method public assoc(dispatchVal Object, method IFn) : MultiFn renamed to public addMethod(dispatchVal Object, method IFn) : MultiFn in class clojure.lang.MultiFn"
1946;"00061735edd435995167ee7bbf01a17d8ae2cc66";"e2feeee5b58d841085b708bfdb53178df8b884e7";"Rename Method";"clojure.lang.MultiFn.dissoc(Object)";"clojure.lang.MultiFn.removeMethod(Object)";"Rename Method public dissoc(dispatchVal Object) : MultiFn renamed to public removeMethod(dispatchVal Object) : MultiFn in class clojure.lang.MultiFn"
1946;"00061735edd435995167ee7bbf01a17d8ae2cc66";"e2feeee5b58d841085b708bfdb53178df8b884e7";"Extract Method";"clojure.lang.MultiFn.getFn(Object)";"clojure.lang.MultiFn.resetCache()";"Extract Method private resetCache() : IPersistentMap extracted from private getFn(dispatchVal Object) : IFn in class clojure.lang.MultiFn"
1958;"4c38b36cfb0fef594f06484cfaf99fb6a0b676de";"5f52000facfdbc65ee4e52834dfe9626040e54fe";"Extract Method";"clojure.lang.Compiler.analyzeSymbol(Symbol)";"clojure.lang.Compiler.namespaceFor(Symbol)";"Extract Method private namespaceFor(sym Symbol) : Namespace extracted from private analyzeSymbol(sym Symbol) : Expr in class clojure.lang.Compiler"
1958;"4c38b36cfb0fef594f06484cfaf99fb6a0b676de";"5f52000facfdbc65ee4e52834dfe9626040e54fe";"Extract Method";"clojure.lang.Compiler.resolveIn(Namespace,Symbol)";"clojure.lang.Compiler.namespaceFor(Symbol)";"Extract Method private namespaceFor(sym Symbol) : Namespace extracted from public resolveIn(n Namespace, sym Symbol) : Object in class clojure.lang.Compiler"
1958;"4c38b36cfb0fef594f06484cfaf99fb6a0b676de";"5f52000facfdbc65ee4e52834dfe9626040e54fe";"Extract Method";"clojure.lang.Compiler.maybeResolveIn(Namespace,Symbol)";"clojure.lang.Compiler.namespaceFor(Symbol)";"Extract Method private namespaceFor(sym Symbol) : Namespace extracted from public maybeResolveIn(n Namespace, sym Symbol) : Object in class clojure.lang.Compiler"
1958;"4c38b36cfb0fef594f06484cfaf99fb6a0b676de";"5f52000facfdbc65ee4e52834dfe9626040e54fe";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Compiler.namespaceFor(Symbol)";"Extract Method private namespaceFor(sym Symbol) : Namespace extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
1958;"4c38b36cfb0fef594f06484cfaf99fb6a0b676de";"5f52000facfdbc65ee4e52834dfe9626040e54fe";"Extract Method";"clojure.lang.Compiler.macroexpand1(Object)";"clojure.lang.Compiler.namespaceFor(Symbol)";"Extract Method private namespaceFor(sym Symbol) : Namespace extracted from public macroexpand1(x Object) : Object in class clojure.lang.Compiler"
1977;"1d5027ce0b18e8c35d630632aade98399b9456fb";"6b377f9b42fbcfe92e8709787d9333cac4b0de0f";"Extract Method";"clojure.lang.Delay.invoke()";"clojure.lang.Delay.get()";"Extract Method public get() : Object extracted from public invoke() : Object in class clojure.lang.Delay"
2002;"1cd6377ff7644f88680c7ec2107c0ff2b7997f22";"4ce1fc09273b2e2dafce015453a03319f5c11e28";"Extract Method";"clojure.lang.RT.classForName(String)";"clojure.lang.RT.baseLoader()";"Extract Method package baseLoader() : ClassLoader extracted from public classForName(name String) : Class in class clojure.lang.RT"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.ArraySeq.ArraySeq_float";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.ArraySeq.ArraySeq_float"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.ArraySeq.ArraySeq_int";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.ArraySeq.ArraySeq_int"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.ArraySeq.ArraySeq_long";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.ArraySeq.ArraySeq_long"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.ArraySeq";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.ArraySeq"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.Range";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.Range"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.ArraySeq.ArraySeq_double";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.ArraySeq.ArraySeq_double"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Extract Interface";"clojure.lang.APersistentVector.Seq";"clojure.lang.IReduce";"Extract Interface clojure.lang.IReduce from class clojure.lang.APersistentVector.Seq"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Push Down Method";"clojure.lang.ASeq.reduce(IFn)";"clojure.lang.PersistentList.reduce(IFn)";"Push Down Method public reduce(f IFn) : Object from class clojure.lang.ASeq to public reduce(f IFn) : Object from class clojure.lang.PersistentList"
2005;"9bc10fc85c9ec0cca1aa4e7faa59cee45a4deea0";"4f14c794f51d942b9be046841ece5afe7bbfcf35";"Push Down Method";"clojure.lang.ASeq.reduce(IFn,Object)";"clojure.lang.PersistentList.reduce(IFn,Object)";"Push Down Method public reduce(f IFn, start Object) : Object from class clojure.lang.ASeq to public reduce(f IFn, start Object) : Object from class clojure.lang.PersistentList"
2009;"049b6b071da0d96d50b99a82817fdfa5e6f60204";"005ea1b5f96c5bb762e155032a865e29ad71bcf3";"Extract Method";"clojure.lang.Compiler.LocalBindingExpr.emitUnboxed(C,FnExpr,GeneratorAdapter)";"clojure.lang.Compiler.FnExpr.emitUnboxedLocal(GeneratorAdapter,LocalBinding)";"Extract Method private emitUnboxedLocal(gen GeneratorAdapter, lb LocalBinding) : void extracted from public emitUnboxed(context C, fn FnExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.LocalBindingExpr"
2018;"1206781b751321716b1cd7a85331d9991a12f5bd";"b692f3e2697badd25b593298887ab5c3f91c5687";"Rename Method";"clojure.lang.Numbers.divide(int,int)";"clojure.lang.Numbers.unchecked_divide(int,int)";"Rename Method public divide(x int, y int) : int renamed to public unchecked_divide(x int, y int) : int in class clojure.lang.Numbers"
2018;"1206781b751321716b1cd7a85331d9991a12f5bd";"b692f3e2697badd25b593298887ab5c3f91c5687";"Rename Method";"clojure.lang.Numbers.divide(long,long)";"clojure.lang.Numbers.unchecked_divide(long,long)";"Rename Method public divide(x long, y long) : long renamed to public unchecked_divide(x long, y long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_add(double,double)";"clojure.lang.Numbers.add(double,double)";"Rename Method public prim_add(x double, y double) : double renamed to public add(x double, y double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_add(float,float)";"clojure.lang.Numbers.add(float,float)";"Rename Method public prim_add(x float, y float) : float renamed to public add(x float, y float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_add(int,int)";"clojure.lang.Numbers.unchecked_add(int,int)";"Rename Method public prim_add(x int, y int) : int renamed to public unchecked_add(x int, y int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_add(long,long)";"clojure.lang.Numbers.unchecked_add(long,long)";"Rename Method public prim_add(x long, y long) : long renamed to public unchecked_add(x long, y long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_dec(double)";"clojure.lang.Numbers.dec(double)";"Rename Method public prim_dec(x double) : double renamed to public dec(x double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_dec(float)";"clojure.lang.Numbers.dec(float)";"Rename Method public prim_dec(x float) : float renamed to public dec(x float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_dec(int)";"clojure.lang.Numbers.unchecked_dec(int)";"Rename Method public prim_dec(x int) : int renamed to public unchecked_dec(x int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_dec(long)";"clojure.lang.Numbers.unchecked_dec(long)";"Rename Method public prim_dec(x long) : long renamed to public unchecked_dec(x long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_divide(double,double)";"clojure.lang.Numbers.divide(double,double)";"Rename Method public prim_divide(x double, y double) : double renamed to public divide(x double, y double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_divide(float,float)";"clojure.lang.Numbers.divide(float,float)";"Rename Method public prim_divide(x float, y float) : float renamed to public divide(x float, y float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_divide(int,int)";"clojure.lang.Numbers.divide(int,int)";"Rename Method public prim_divide(x int, y int) : int renamed to public divide(x int, y int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_divide(long,long)";"clojure.lang.Numbers.divide(long,long)";"Rename Method public prim_divide(x long, y long) : long renamed to public divide(x long, y long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_equiv(double,double)";"clojure.lang.Numbers.equiv(double,double)";"Rename Method public prim_equiv(x double, y double) : boolean renamed to public equiv(x double, y double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_equiv(float,float)";"clojure.lang.Numbers.equiv(float,float)";"Rename Method public prim_equiv(x float, y float) : boolean renamed to public equiv(x float, y float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_equiv(int,int)";"clojure.lang.Numbers.equiv(int,int)";"Rename Method public prim_equiv(x int, y int) : boolean renamed to public equiv(x int, y int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_equiv(long,long)";"clojure.lang.Numbers.equiv(long,long)";"Rename Method public prim_equiv(x long, y long) : boolean renamed to public equiv(x long, y long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gt(double,double)";"clojure.lang.Numbers.gt(double,double)";"Rename Method public prim_gt(x double, y double) : boolean renamed to public gt(x double, y double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gt(float,float)";"clojure.lang.Numbers.gt(float,float)";"Rename Method public prim_gt(x float, y float) : boolean renamed to public gt(x float, y float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gt(int,int)";"clojure.lang.Numbers.gt(int,int)";"Rename Method public prim_gt(x int, y int) : boolean renamed to public gt(x int, y int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gt(long,long)";"clojure.lang.Numbers.gt(long,long)";"Rename Method public prim_gt(x long, y long) : boolean renamed to public gt(x long, y long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gte(double,double)";"clojure.lang.Numbers.gte(double,double)";"Rename Method public prim_gte(x double, y double) : boolean renamed to public gte(x double, y double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gte(float,float)";"clojure.lang.Numbers.gte(float,float)";"Rename Method public prim_gte(x float, y float) : boolean renamed to public gte(x float, y float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gte(int,int)";"clojure.lang.Numbers.gte(int,int)";"Rename Method public prim_gte(x int, y int) : boolean renamed to public gte(x int, y int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_gte(long,long)";"clojure.lang.Numbers.gte(long,long)";"Rename Method public prim_gte(x long, y long) : boolean renamed to public gte(x long, y long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_inc(double)";"clojure.lang.Numbers.inc(double)";"Rename Method public prim_inc(x double) : double renamed to public inc(x double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_inc(float)";"clojure.lang.Numbers.inc(float)";"Rename Method public prim_inc(x float) : float renamed to public inc(x float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_inc(int)";"clojure.lang.Numbers.unchecked_inc(int)";"Rename Method public prim_inc(x int) : int renamed to public unchecked_inc(x int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_inc(long)";"clojure.lang.Numbers.unchecked_inc(long)";"Rename Method public prim_inc(x long) : long renamed to public unchecked_inc(x long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isNeg(double)";"clojure.lang.Numbers.isNeg(double)";"Rename Method public prim_isNeg(x double) : boolean renamed to public isNeg(x double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isNeg(float)";"clojure.lang.Numbers.isNeg(float)";"Rename Method public prim_isNeg(x float) : boolean renamed to public isNeg(x float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isNeg(int)";"clojure.lang.Numbers.isNeg(int)";"Rename Method public prim_isNeg(x int) : boolean renamed to public isNeg(x int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isNeg(long)";"clojure.lang.Numbers.isNeg(long)";"Rename Method public prim_isNeg(x long) : boolean renamed to public isNeg(x long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isPos(double)";"clojure.lang.Numbers.isPos(double)";"Rename Method public prim_isPos(x double) : boolean renamed to public isPos(x double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isPos(float)";"clojure.lang.Numbers.isPos(float)";"Rename Method public prim_isPos(x float) : boolean renamed to public isPos(x float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isPos(int)";"clojure.lang.Numbers.isPos(int)";"Rename Method public prim_isPos(x int) : boolean renamed to public isPos(x int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isPos(long)";"clojure.lang.Numbers.isPos(long)";"Rename Method public prim_isPos(x long) : boolean renamed to public isPos(x long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isZero(double)";"clojure.lang.Numbers.isZero(double)";"Rename Method public prim_isZero(x double) : boolean renamed to public isZero(x double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isZero(float)";"clojure.lang.Numbers.isZero(float)";"Rename Method public prim_isZero(x float) : boolean renamed to public isZero(x float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isZero(int)";"clojure.lang.Numbers.isZero(int)";"Rename Method public prim_isZero(x int) : boolean renamed to public isZero(x int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_isZero(long)";"clojure.lang.Numbers.isZero(long)";"Rename Method public prim_isZero(x long) : boolean renamed to public isZero(x long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lt(double,double)";"clojure.lang.Numbers.lt(double,double)";"Rename Method public prim_lt(x double, y double) : boolean renamed to public lt(x double, y double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lt(float,float)";"clojure.lang.Numbers.lt(float,float)";"Rename Method public prim_lt(x float, y float) : boolean renamed to public lt(x float, y float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lt(int,int)";"clojure.lang.Numbers.lt(int,int)";"Rename Method public prim_lt(x int, y int) : boolean renamed to public lt(x int, y int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lt(long,long)";"clojure.lang.Numbers.lt(long,long)";"Rename Method public prim_lt(x long, y long) : boolean renamed to public lt(x long, y long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lte(double,double)";"clojure.lang.Numbers.lte(double,double)";"Rename Method public prim_lte(x double, y double) : boolean renamed to public lte(x double, y double) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lte(float,float)";"clojure.lang.Numbers.lte(float,float)";"Rename Method public prim_lte(x float, y float) : boolean renamed to public lte(x float, y float) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lte(int,int)";"clojure.lang.Numbers.lte(int,int)";"Rename Method public prim_lte(x int, y int) : boolean renamed to public lte(x int, y int) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_lte(long,long)";"clojure.lang.Numbers.lte(long,long)";"Rename Method public prim_lte(x long, y long) : boolean renamed to public lte(x long, y long) : boolean in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_multiply(double,double)";"clojure.lang.Numbers.multiply(double,double)";"Rename Method public prim_multiply(x double, y double) : double renamed to public multiply(x double, y double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_multiply(float,float)";"clojure.lang.Numbers.multiply(float,float)";"Rename Method public prim_multiply(x float, y float) : float renamed to public multiply(x float, y float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_multiply(int,int)";"clojure.lang.Numbers.unchecked_multiply(int,int)";"Rename Method public prim_multiply(x int, y int) : int renamed to public unchecked_multiply(x int, y int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_multiply(long,long)";"clojure.lang.Numbers.unchecked_multiply(long,long)";"Rename Method public prim_multiply(x long, y long) : long renamed to public unchecked_multiply(x long, y long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_negate(double)";"clojure.lang.Numbers.minus(double)";"Rename Method public prim_negate(x double) : double renamed to public minus(x double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_negate(float)";"clojure.lang.Numbers.minus(float)";"Rename Method public prim_negate(x float) : float renamed to public minus(x float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_negate(int)";"clojure.lang.Numbers.unchecked_negate(int)";"Rename Method public prim_negate(x int) : int renamed to public unchecked_negate(x int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_negate(long)";"clojure.lang.Numbers.unchecked_negate(long)";"Rename Method public prim_negate(x long) : long renamed to public unchecked_negate(x long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_subtract(double,double)";"clojure.lang.Numbers.minus(double,double)";"Rename Method public prim_subtract(x double, y double) : double renamed to public minus(x double, y double) : double in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_subtract(float,float)";"clojure.lang.Numbers.minus(float,float)";"Rename Method public prim_subtract(x float, y float) : float renamed to public minus(x float, y float) : float in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_subtract(int,int)";"clojure.lang.Numbers.unchecked_subtract(int,int)";"Rename Method public prim_subtract(x int, y int) : int renamed to public unchecked_subtract(x int, y int) : int in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.prim_subtract(long,long)";"clojure.lang.Numbers.unchecked_subtract(long,long)";"Rename Method public prim_subtract(x long, y long) : long renamed to public unchecked_subtract(x long, y long) : long in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.subtract(Number,Number)";"clojure.lang.Numbers.minus(Object,Object)";"Rename Method public subtract(x Number, y Number) : Number renamed to public minus(x Object, y Object) : Number in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Rename Method";"clojure.lang.Numbers.negate(Number)";"clojure.lang.Numbers.minus(Object)";"Rename Method public negate(x Number) : Number renamed to public minus(x Object) : Number in class clojure.lang.Numbers"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.D.aclone(double[])";"clojure.lang.RT.aclone(Object[])";"Move Method public aclone(xs double[]) : double[] from class clojure.lang.Numbers.D to public aclone(xs Object[]) : Object[] from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.D.aget(double[],int)";"clojure.lang.RT.aget(Object[],int)";"Move Method public aget(xs double[], i int) : double from class clojure.lang.Numbers.D to public aget(xs Object[], i int) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.D.alength(double[])";"clojure.lang.RT.alength(Object[])";"Move Method public alength(xs double[]) : int from class clojure.lang.Numbers.D to public alength(xs Object[]) : int from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.D.aset(double[],int,double)";"clojure.lang.RT.aset(Object[],int,Object)";"Move Method public aset(xs double[], i int, v double) : double from class clojure.lang.Numbers.D to public aset(xs Object[], i int, v Object) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.F.aclone(float[])";"clojure.lang.RT.aclone(Object[])";"Move Method public aclone(xs float[]) : float[] from class clojure.lang.Numbers.F to public aclone(xs Object[]) : Object[] from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.F.aget(float[],int)";"clojure.lang.RT.aget(Object[],int)";"Move Method public aget(xs float[], i int) : float from class clojure.lang.Numbers.F to public aget(xs Object[], i int) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.F.alength(float[])";"clojure.lang.RT.alength(Object[])";"Move Method public alength(xs float[]) : int from class clojure.lang.Numbers.F to public alength(xs Object[]) : int from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.F.aset(float[],int,float)";"clojure.lang.RT.aset(Object[],int,Object)";"Move Method public aset(xs float[], i int, v float) : float from class clojure.lang.Numbers.F to public aset(xs Object[], i int, v Object) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.I.aclone(int[])";"clojure.lang.RT.aclone(Object[])";"Move Method public aclone(xs int[]) : int[] from class clojure.lang.Numbers.I to public aclone(xs Object[]) : Object[] from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.I.aget(int[],int)";"clojure.lang.RT.aget(Object[],int)";"Move Method public aget(xs int[], i int) : int from class clojure.lang.Numbers.I to public aget(xs Object[], i int) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.I.alength(int[])";"clojure.lang.RT.alength(Object[])";"Move Method public alength(xs int[]) : int from class clojure.lang.Numbers.I to public alength(xs Object[]) : int from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.I.aset(int[],int,int)";"clojure.lang.RT.aset(Object[],int,Object)";"Move Method public aset(xs int[], i int, v int) : int from class clojure.lang.Numbers.I to public aset(xs Object[], i int, v Object) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.L.aclone(long[])";"clojure.lang.RT.aclone(Object[])";"Move Method public aclone(xs long[]) : long[] from class clojure.lang.Numbers.L to public aclone(xs Object[]) : Object[] from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.L.aget(long[],int)";"clojure.lang.RT.aget(Object[],int)";"Move Method public aget(xs long[], i int) : long from class clojure.lang.Numbers.L to public aget(xs Object[], i int) : Object from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.L.alength(long[])";"clojure.lang.RT.alength(Object[])";"Move Method public alength(xs long[]) : int from class clojure.lang.Numbers.L to public alength(xs Object[]) : int from class clojure.lang.RT"
2020;"2c57f4b5cbb5608905f45cccad3958de51c62590";"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"Move Method";"clojure.lang.Numbers.L.aset(long[],int,long)";"clojure.lang.RT.aset(Object[],int,Object)";"Move Method public aset(xs long[], i int, v long) : long from class clojure.lang.Numbers.L to public aset(xs Object[], i int, v Object) : Object from class clojure.lang.RT"
2021;"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"dbeb11e22fd1a30610b07cf27505e5ec0fd6e1e7";"Extract Interface";"clojure.lang.Compiler.HostExpr";"clojure.lang.Compiler.MaybePrimitiveExpr";"Extract Interface clojure.lang.Compiler.MaybePrimitiveExpr from class clojure.lang.Compiler.HostExpr"
2021;"c98a632c86515d2c7c133608d07b8b33bcfa75fc";"dbeb11e22fd1a30610b07cf27505e5ec0fd6e1e7";"Extract Method";"clojure.lang.Compiler.MethodExpr.emitTypedArgs(FnExpr,GeneratorAdapter,Class[],IPersistentVector)";"clojure.lang.Compiler.maybePrimitiveType(Expr)";"Extract Method package maybePrimitiveType(e Expr) : Class extracted from public emitTypedArgs(fn FnExpr, gen GeneratorAdapter, parameterTypes Class[], args IPersistentVector) : void in class clojure.lang.Compiler.MethodExpr"
2029;"69e5e3659b7cb45433333bd501cc82a4893cc3df";"8f1bdd060645a82b24ed732f73a4516fb12b563b";"Rename Method";"clojure.lang.Numbers.D.array(int,Object)";"clojure.lang.Numbers.D.vec(int,Object)";"Rename Method public array(size int, init Object) : double[] renamed to public vec(size int, init Object) : double[] in class clojure.lang.Numbers.D"
2029;"69e5e3659b7cb45433333bd501cc82a4893cc3df";"8f1bdd060645a82b24ed732f73a4516fb12b563b";"Rename Method";"clojure.lang.Numbers.F.array(int,Object)";"clojure.lang.Numbers.F.vec(int,Object)";"Rename Method public array(size int, init Object) : float[] renamed to public vec(size int, init Object) : float[] in class clojure.lang.Numbers.F"
2029;"69e5e3659b7cb45433333bd501cc82a4893cc3df";"8f1bdd060645a82b24ed732f73a4516fb12b563b";"Rename Method";"clojure.lang.Numbers.I.array(int,Object)";"clojure.lang.Numbers.I.vec(int,Object)";"Rename Method public array(size int, init Object) : int[] renamed to public vec(size int, init Object) : int[] in class clojure.lang.Numbers.I"
2029;"69e5e3659b7cb45433333bd501cc82a4893cc3df";"8f1bdd060645a82b24ed732f73a4516fb12b563b";"Rename Method";"clojure.lang.Numbers.L.array(int,Object)";"clojure.lang.Numbers.L.vec(int,Object)";"Rename Method public array(size int, init Object) : long[] renamed to public vec(size int, init Object) : long[] in class clojure.lang.Numbers.L"
2049;"660f36af98afeb3c5c05a1ec7b3657a324abebba";"f8b016d9ec69264d3de42e20c92c1884db891339";"Extract Method";"clojure.lang.LockingTransaction.run(IFn)";"clojure.lang.Agent.dispatchAction(Action)";"Extract Method package dispatchAction(action Action) : void extracted from package run(fn IFn) : Object in class clojure.lang.LockingTransaction"
2049;"660f36af98afeb3c5c05a1ec7b3657a324abebba";"f8b016d9ec69264d3de42e20c92c1884db891339";"Extract Method";"clojure.lang.Agent.dispatch(IFn,ISeq,boolean)";"clojure.lang.Agent.dispatchAction(Action)";"Extract Method package dispatchAction(action Action) : void extracted from public dispatch(fn IFn, args ISeq, solo boolean) : Object in class clojure.lang.Agent"
2061;"ab789fc2a395d19c1a8670765578fcda736e121c";"51ad6e94d9d4dc1818e9f730ef7c32d5a7227c2d";"Extract Method";"clojure.lang.RT.loadResourceScript(String)";"clojure.lang.RT.loadResourceScript(Class,String)";"Extract Method public loadResourceScript(c Class, name String) : void extracted from public loadResourceScript(name String) : void in class clojure.lang.RT"
2084;"dff8bca0286f2af46ab5522cf9d86165ab83eaa6";"110ad2b1764d2f0ff21c5566028671a36cde1e39";"Extract Method";"clojure.lang.Compiler.HostExpr.maybeClass(Object,boolean)";"clojure.lang.RT.classForName(String)";"Extract Method public classForName(name String) : Class extracted from private maybeClass(form Object, stringOk boolean) : Class in class clojure.lang.Compiler.HostExpr"
2084;"dff8bca0286f2af46ab5522cf9d86165ab83eaa6";"110ad2b1764d2f0ff21c5566028671a36cde1e39";"Extract Method";"clojure.lang.Compiler.resolveIn(Namespace,Symbol)";"clojure.lang.RT.classForName(String)";"Extract Method public classForName(name String) : Class extracted from public resolveIn(n Namespace, sym Symbol) : Object in class clojure.lang.Compiler"
2084;"dff8bca0286f2af46ab5522cf9d86165ab83eaa6";"110ad2b1764d2f0ff21c5566028671a36cde1e39";"Extract Method";"clojure.lang.Compiler.maybeResolveIn(Namespace,Symbol)";"clojure.lang.RT.classForName(String)";"Extract Method public classForName(name String) : Class extracted from public maybeResolveIn(n Namespace, sym Symbol) : Object in class clojure.lang.Compiler"
2087;"9e24fabf1232f129e5aac45802cce6dfd5e300ce";"7cd3b285328e7e7e71b23080303d66640e0f21e8";"Move Method";"clojure.lang.RT.equal(Object,Object)";"clojure.lang.Util.equal(Object,Object)";"Move Method public equal(k1 Object, k2 Object) : boolean from class clojure.lang.RT to public equal(k1 Object, k2 Object) : boolean from class clojure.lang.Util"
2087;"9e24fabf1232f129e5aac45802cce6dfd5e300ce";"7cd3b285328e7e7e71b23080303d66640e0f21e8";"Move Method";"clojure.lang.RT.hash(Object)";"clojure.lang.Util.hash(Object)";"Move Method public hash(o Object) : int from class clojure.lang.RT to public hash(o Object) : int from class clojure.lang.Util"
2087;"9e24fabf1232f129e5aac45802cce6dfd5e300ce";"7cd3b285328e7e7e71b23080303d66640e0f21e8";"Move Method";"clojure.lang.RT.hashCombine(int,int)";"clojure.lang.Util.hashCombine(int,int)";"Move Method public hashCombine(seed int, hash int) : int from class clojure.lang.RT to public hashCombine(seed int, hash int) : int from class clojure.lang.Util"
2088;"7cd3b285328e7e7e71b23080303d66640e0f21e8";"9511034dda56770857cf596705b624c01e1fa127";"Extract Method";"clojure.lang.Compiler.load(Reader,String,String)";"clojure.lang.RT.makeClassLoader()";"Extract Method public makeClassLoader() : ClassLoader extracted from public load(rdr Reader, sourcePath String, sourceName String) : Object in class clojure.lang.Compiler"
2088;"7cd3b285328e7e7e71b23080303d66640e0f21e8";"9511034dda56770857cf596705b624c01e1fa127";"Extract Method";"clojure.lang.Compiler.eval(Object)";"clojure.lang.RT.makeClassLoader()";"Extract Method public makeClassLoader() : ClassLoader extracted from public eval(form Object) : Object in class clojure.lang.Compiler"
2088;"7cd3b285328e7e7e71b23080303d66640e0f21e8";"9511034dda56770857cf596705b624c01e1fa127";"Extract Method";"clojure.lang.Compiler.main(String[])";"clojure.lang.RT.makeClassLoader()";"Extract Method public makeClassLoader() : ClassLoader extracted from public main(args String[]) : void in class clojure.lang.Compiler"
2098;"914c26752481ffd380b5e4f8e7754a7a68d27adc";"8e88388231dda1f026dbb4db9597d50e3594cdc0";"Extract Method";"clojure.lang.Compiler.load(Reader)";"clojure.lang.Compiler.load(Reader,String,String)";"Extract Method public load(rdr Reader, sourcePath String, sourceName String) : Object extracted from public load(rdr Reader) : Object in class clojure.lang.Compiler"
2115;"ee2250dd7a5b6d6c99d276fa333ca663a555f5e8";"dd837d94fca1f502f62def7d734d98bff3b0b20a";"Extract Method";"clojure.lang.Compiler.analyzeSeq(C,ISeq,String)";"clojure.lang.Compiler.macroexpand1(Object)";"Extract Method public macroexpand1(x Object) : Object extracted from private analyzeSeq(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler"
2117;"a8948f6cec04ecc8abfaf8b75be1fd8537e50222";"f1e899669768695b4471f60b01d843bf3405fa9a";"Rename Method";"clojure.lang.Numbers.add(int,Object)";"clojure.lang.Numbers.ops(Object)";"Rename Method public add(x int, y Object) : Object renamed to package ops(x Object) : Ops in class clojure.lang.Numbers"
2117;"a8948f6cec04ecc8abfaf8b75be1fd8537e50222";"f1e899669768695b4471f60b01d843bf3405fa9a";"Move Method";"clojure.lang.Numbers.add(int,int)";"clojure.lang.Numbers.IntegerOps.add(Object,Object)";"Move Method public add(x int, y int) : Number from class clojure.lang.Numbers to public add(x Object, y Object) : Object from class clojure.lang.Numbers.IntegerOps"
2143;"e9b69139a0b501c802707363275c19686399a428";"2053768cab92920c42406a893601ce7351605795";"Rename Method";"clojure.lang.Compiler.FnMethod.emitClearArgs(GeneratorAdapter)";"clojure.lang.Compiler.FnMethod.emitClearLocals(GeneratorAdapter)";"Rename Method package emitClearArgs(gen GeneratorAdapter) : void renamed to package emitClearLocals(gen GeneratorAdapter) : void in class clojure.lang.Compiler.FnMethod"
2170;"19449a772787d94dee4bb31f9b5081e934e79d90";"5789303b240a81c8dc467ef038b529abde936749";"Extract Method";"clojure.lang.RT.init()";"clojure.lang.RT.loadResourceScript(String)";"Extract Method package loadResourceScript(name String) : void extracted from public init() : void in class clojure.lang.RT"
2180;"dd665dc8a62f7636c3e26dbbddd92b1089294e31";"b3dca1598211ce7f929225d6f9389f534701653e";"Rename Method";"clojure.lang.PersistentVector.doCons(int,Object[],Object,Box)";"clojure.lang.PersistentVector.pushTail(int,Object[],Object[],Box)";"Rename Method private doCons(level int, arr Object[], val Object, expansion Box) : Object[] renamed to private pushTail(level int, arr Object[], tailNode Object[], expansion Box) : Object[] in class clojure.lang.PersistentVector"
2180;"dd665dc8a62f7636c3e26dbbddd92b1089294e31";"b3dca1598211ce7f929225d6f9389f534701653e";"Rename Method";"clojure.lang.PersistentVector.doPop(int,Object[])";"clojure.lang.PersistentVector.popTail(int,Object[],Box)";"Rename Method private doPop(shift int, arr Object[]) : Object[] renamed to private popTail(shift int, arr Object[], ptail Box) : Object[] in class clojure.lang.PersistentVector"
2184;"91dd32a14013140d5321942cb041631109ba7480";"bc6abe711da5fc60cb4684c81f99276dc4f02d7d";"Rename Method";"clojure.lang.PersistentHashMap.BitmapIndexedNode.seq()";"clojure.lang.PersistentHashMap.BitmapIndexedNode.nodeSeq()";"Rename Method public seq() : ISeq renamed to public nodeSeq() : ISeq in class clojure.lang.PersistentHashMap.BitmapIndexedNode"
2184;"91dd32a14013140d5321942cb041631109ba7480";"bc6abe711da5fc60cb4684c81f99276dc4f02d7d";"Rename Method";"clojure.lang.PersistentHashMap.EmptyNode.seq()";"clojure.lang.PersistentHashMap.EmptyNode.nodeSeq()";"Rename Method public seq() : ISeq renamed to public nodeSeq() : ISeq in class clojure.lang.PersistentHashMap.EmptyNode"
2184;"91dd32a14013140d5321942cb041631109ba7480";"bc6abe711da5fc60cb4684c81f99276dc4f02d7d";"Rename Method";"clojure.lang.PersistentHashMap.FullNode.seq()";"clojure.lang.PersistentHashMap.FullNode.nodeSeq()";"Rename Method public seq() : ISeq renamed to public nodeSeq() : ISeq in class clojure.lang.PersistentHashMap.FullNode"
2184;"91dd32a14013140d5321942cb041631109ba7480";"bc6abe711da5fc60cb4684c81f99276dc4f02d7d";"Rename Method";"clojure.lang.PersistentHashMap.HashCollisionNode.seq()";"clojure.lang.PersistentHashMap.HashCollisionNode.nodeSeq()";"Rename Method public seq() : ISeq renamed to public nodeSeq() : ISeq in class clojure.lang.PersistentHashMap.HashCollisionNode"
2184;"91dd32a14013140d5321942cb041631109ba7480";"bc6abe711da5fc60cb4684c81f99276dc4f02d7d";"Rename Method";"clojure.lang.PersistentHashMap.LeafNode.seq()";"clojure.lang.PersistentHashMap.LeafNode.nodeSeq()";"Rename Method public seq() : ISeq renamed to public nodeSeq() : ISeq in class clojure.lang.PersistentHashMap.LeafNode"
2198;"7705d1c11ba26627f4889f7b6afceb1e634c7839";"978af02b0a7e2b430c917b32b58215edcae2ad2d";"Extract Method";"clojure.lang.APersistentVector.equals(Object)";"clojure.lang.APersistentVector.doEquals(IPersistentVector,Object)";"Extract Method package doEquals(v IPersistentVector, obj Object) : boolean extracted from public equals(obj Object) : boolean in class clojure.lang.APersistentVector"
2198;"7705d1c11ba26627f4889f7b6afceb1e634c7839";"978af02b0a7e2b430c917b32b58215edcae2ad2d";"Extract Method";"clojure.lang.AMapEntry.equals(Object)";"clojure.lang.APersistentVector.doEquals(IPersistentVector,Object)";"Extract Method package doEquals(v IPersistentVector, obj Object) : boolean extracted from public equals(obj Object) : boolean in class clojure.lang.AMapEntry"
2199;"978af02b0a7e2b430c917b32b58215edcae2ad2d";"9aaa7bf632bf84a3d32788f23116d07e6fe2b1a8";"Pull Up Method";"clojure.lang.MapEntry.valAt(Object)";"clojure.lang.AMapEntry.valAt(Object)";"Pull Up Method public valAt(key Object) : Object from class clojure.lang.MapEntry to public valAt(key Object) : Object from class clojure.lang.AMapEntry"
2256;"221023b4d27e75757e3c842176872d5300d35b23";"81d57a3b85548d82668494a95368524087055665";"Move Attribute";"clojure.lang.Compiler.MetaExpr.IPERSISTENTMAP_TYPE";"clojure.lang.Compiler.IPERSISTENTMAP_TYPE";"Move Attribute package IPERSISTENTMAP_TYPE : Type from class clojure.lang.Compiler.MetaExpr to class clojure.lang.Compiler"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Rename Method";"clojure.lang.DynamicClassLoader.registerQuotedVal(int,Object)";"clojure.lang.DynamicClassLoader.registerConstants(int,Object[])";"Rename Method public registerQuotedVal(id int, val Object) : void renamed to public registerConstants(id int, val Object[]) : void in class clojure.lang.DynamicClassLoader"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Rename Method";"clojure.lang.DynamicClassLoader.getQuotedVal(int)";"clojure.lang.DynamicClassLoader.getConstants(int)";"Rename Method public getQuotedVal(id int) : Object renamed to public getConstants(id int) : Object[] in class clojure.lang.DynamicClassLoader"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.ConstantExpr.(Object)";"clojure.lang.Compiler.registerConstant(Object)";"Extract Method private registerConstant(o Object) : int extracted from public ConstantExpr(v Object) in class clojure.lang.Compiler.ConstantExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.FnExpr.compile()";"clojure.lang.Compiler.FnExpr.constantName(int)";"Extract Method package constantName(id int) : String extracted from private compile() : void in class clojure.lang.Compiler.FnExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.FnExpr.compile()";"clojure.lang.Compiler.FnExpr.constantType(int)";"Extract Method package constantType(id int) : Type extracted from private compile() : void in class clojure.lang.Compiler.FnExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.FnExpr.emitVar(GeneratorAdapter,Var)";"clojure.lang.Compiler.FnExpr.emitConstant(GeneratorAdapter,int)";"Extract Method public emitConstant(gen GeneratorAdapter, id int) : void extracted from public emitVar(gen GeneratorAdapter, var Var) : void in class clojure.lang.Compiler.FnExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.FnExpr.emitKeyword(GeneratorAdapter,Keyword)";"clojure.lang.Compiler.FnExpr.emitConstant(GeneratorAdapter,int)";"Extract Method public emitConstant(gen GeneratorAdapter, id int) : void extracted from public emitKeyword(gen GeneratorAdapter, k Keyword) : void in class clojure.lang.Compiler.FnExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Extract Method";"clojure.lang.Compiler.ConstantExpr.emit(C,FnExpr,GeneratorAdapter)";"clojure.lang.Compiler.FnExpr.emitConstant(GeneratorAdapter,int)";"Extract Method public emitConstant(gen GeneratorAdapter, id int) : void extracted from public emit(context C, fn FnExpr, gen GeneratorAdapter) : void in class clojure.lang.Compiler.ConstantExpr"
2277;"28b5f12e50f37f1e520512c96c7d18494e779eca";"e952d81f687abea07327724d15e60a1500080b67";"Move Attribute";"clojure.lang.Compiler.ConstantExpr.getClassLoaderMethod";"clojure.lang.Compiler.FnExpr.getClassLoaderMethod";"Move Attribute package getClassLoaderMethod : Method from class clojure.lang.Compiler.ConstantExpr to class clojure.lang.Compiler.FnExpr"
2278;"e952d81f687abea07327724d15e60a1500080b67";"bd2912fac5941b008d0f53a9edbb4909d7320c6a";"Rename Class";"clojure.lang.Compiler.QuoteExpr";"clojure.lang.Compiler.ConstantExpr";"Rename Class clojure.lang.Compiler.QuoteExpr renamed to clojure.lang.Compiler.ConstantExpr"
2280;"3849410faf554b7268d8175c5a0cb29f51a8ebcc";"999111485f8bc28332780dcd92f6cfa1a2bc66c9";"Rename Method";"clojure.lang.Namespace.unintern(Symbol)";"clojure.lang.Namespace.unmap(Symbol)";"Rename Method public unintern(sym Symbol) : void renamed to public unmap(sym Symbol) : void in class clojure.lang.Namespace"
2284;"2fd70293876dc3713cb9deb1c3e1f237336c6b62";"8da00aca0e47b20cd7c50e29d42ed6a58e9a7a62";"Extract Method";"clojure.lang.Compiler.resolve(Symbol)";"clojure.lang.Compiler.resolveIn(Namespace,Symbol)";"Extract Method public resolveIn(n Namespace, sym Symbol) : Object extracted from package resolve(sym Symbol) : Object in class clojure.lang.Compiler"
2287;"36868a7734f15c51eb1831aa9d72a14544496987";"bba289e42620408d912de604cbd75b78de74b628";"Rename Method";"clojure.lang.Compiler.HostExpr.maybeClassName(Object,boolean)";"clojure.lang.Compiler.HostExpr.maybeClass(Object,boolean)";"Rename Method private maybeClassName(form Object, stringOk boolean) : String renamed to private maybeClass(form Object, stringOk boolean) : Class in class clojure.lang.Compiler.HostExpr"
2287;"36868a7734f15c51eb1831aa9d72a14544496987";"bba289e42620408d912de604cbd75b78de74b628";"Extract Method";"clojure.lang.Reflector.getStaticField(String,String)";"clojure.lang.Reflector.getStaticField(Class,String)";"Extract Method public getStaticField(c Class, fieldName String) : Object extracted from public getStaticField(className String, fieldName String) : Object in class clojure.lang.Reflector"
2287;"36868a7734f15c51eb1831aa9d72a14544496987";"bba289e42620408d912de604cbd75b78de74b628";"Extract Method";"clojure.lang.Reflector.invokeStaticMethod(String,String,Object[])";"clojure.lang.Reflector.invokeStaticMethod(Class,String,Object[])";"Extract Method public invokeStaticMethod(c Class, methodName String, args Object[]) : Object extracted from public invokeStaticMethod(className String, methodName String, args Object[]) : Object in class clojure.lang.Reflector"
2287;"36868a7734f15c51eb1831aa9d72a14544496987";"bba289e42620408d912de604cbd75b78de74b628";"Extract Method";"clojure.lang.Reflector.setStaticField(String,String,Object)";"clojure.lang.Reflector.setStaticField(Class,String,Object)";"Extract Method public setStaticField(c Class, fieldName String, val Object) : Object extracted from public setStaticField(className String, fieldName String, val Object) : Object in class clojure.lang.Reflector"
2289;"44f0b51091dbe7d43aafb0932359f0b460f75018";"df498fe4972a46a89cf06248af1712bae5d4a83a";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Namespace.find(Symbol)";"Extract Method public find(name Symbol) : Namespace extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
2289;"44f0b51091dbe7d43aafb0932359f0b460f75018";"df498fe4972a46a89cf06248af1712bae5d4a83a";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Namespace.findInternedVar(Symbol)";"Extract Method public findInternedVar(symbol Symbol) : Var extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
2289;"44f0b51091dbe7d43aafb0932359f0b460f75018";"df498fe4972a46a89cf06248af1712bae5d4a83a";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Namespace.getMapping(Symbol)";"Extract Method public getMapping(name Symbol) : Object extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
2290;"df498fe4972a46a89cf06248af1712bae5d4a83a";"dca114e71248ddd7a172e38ff6dc9956db09c6cf";"Extract Method";"clojure.lang.Compiler.lookupVar(Symbol,boolean)";"clojure.lang.Var.intern(Namespace,Symbol)";"Extract Method public intern(ns Namespace, sym Symbol) : Var extracted from package lookupVar(sym Symbol, internNew boolean) : Var in class clojure.lang.Compiler"
2291;"dca114e71248ddd7a172e38ff6dc9956db09c6cf";"345aff14826f375f9809bd8a6b36b6b8b9927100";"Rename Method";"clojure.lang.Var.table(Symbol)";"clojure.lang.Var.getns(Symbol)";"Rename Method package table(sym Symbol) : ConcurrentHashMap renamed to package getns(sym Symbol) : ConcurrentHashMap in class clojure.lang.Var"
2305;"82e8dc1deaa37a52515f353d8494dc03be2c6e50";"443cce766feb8477b2480840bea6d7967212da0c";"Extract Interface";"clojure.lang.PersistentTreeMap";"clojure.lang.Reversible";"Extract Interface clojure.lang.Reversible from class clojure.lang.PersistentTreeMap"
2312;"368c7989e33ecb50b59de48a71fe3c96c6b0c483";"3d14de92f6d7ce58b9f56f9e6112ddb8c5721a38";"Rename Method";"clojure.lang.Reflector.primBoxTypeMatch(Class,Class)";"clojure.lang.Reflector.paramArgTypeMatch(Class,Class)";"Rename Method public primBoxTypeMatch(primType Class, boxType Class) : boolean renamed to public paramArgTypeMatch(paramType Class, argType Class) : boolean in class clojure.lang.Reflector"
2327;"7ceb044e9ee962c4fd5f86a9152a4ed703ef5c80";"7c2ef5d06bde5b0475e4523b7b4d47ed4bcfe52e";"Rename Method";"clojure.lang.Reflector.invokeMatchingMethod(List,Object,Object[])";"clojure.lang.Reflector.getAsMethodOfPublicBase(Class,Method)";"Rename Method private invokeMatchingMethod(methods List, target Object, args Object[]) : Object renamed to public getAsMethodOfPublicBase(c Class, m Method) : Method in class clojure.lang.Reflector"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Class";"clojure.lang.PersistentVector.RSeq";"clojure.lang.APersistentVector.RSeq";"Move Class clojure.lang.PersistentVector.RSeq moved to clojure.lang.APersistentVector.RSeq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Extract Superclass";"clojure.lang.PersistentVector";"clojure.lang.APersistentVector";"Extract Superclass clojure.lang.APersistentVector from class clojure.lang.PersistentVector"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Method";"clojure.lang.PersistentVector.Seq.first()";"clojure.lang.APersistentVector.Seq.first()";"Move Method public first() : Object from class clojure.lang.PersistentVector.Seq to public first() : Object from class clojure.lang.APersistentVector.Seq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Method";"clojure.lang.PersistentVector.Seq.index()";"clojure.lang.APersistentVector.Seq.index()";"Move Method public index() : int from class clojure.lang.PersistentVector.Seq to public index() : int from class clojure.lang.APersistentVector.Seq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Method";"clojure.lang.PersistentVector.Seq.withMeta(IPersistentMap)";"clojure.lang.APersistentVector.Seq.withMeta(IPersistentMap)";"Move Method public withMeta(meta IPersistentMap) : Seq from class clojure.lang.PersistentVector.Seq to public withMeta(meta IPersistentMap) : PersistentVector.Seq from class clojure.lang.APersistentVector.Seq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Method";"clojure.lang.PersistentVector.Seq.rest()";"clojure.lang.APersistentVector.Seq.rest()";"Move Method public rest() : ISeq from class clojure.lang.PersistentVector.Seq to public rest() : ISeq from class clojure.lang.APersistentVector.Seq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Method";"clojure.lang.PersistentVector.Seq.count()";"clojure.lang.APersistentVector.Seq.count()";"Move Method public count() : int from class clojure.lang.PersistentVector.Seq to public count() : int from class clojure.lang.APersistentVector.Seq"
2337;"b876bc01060191c4fecef062bdddd190c79fd83f";"563ce9095b9b2610a845123dec1d8e2884177aa0";"Move Attribute";"clojure.lang.PersistentVector.Seq.i";"clojure.lang.APersistentVector.Seq.i";"Move Attribute package i : int from class clojure.lang.PersistentVector.Seq to class clojure.lang.APersistentVector.Seq"
2356;"e86035f9f9fb002b247bd7ae60c8d6fb190c8f4c";"59fede97ed5a7bb8f2531dd9bcbd08f36139e4ad";"Extract Method";"clojure.lang.Compiler.analyzeSeq(C,ISeq,String)";"clojure.lang.Compiler.isMacro(Object)";"Extract Method public isMacro(op Object) : Var extracted from private analyzeSeq(context C, form ISeq, name String) : Expr in class clojure.lang.Compiler"
2364;"c2d824b9bf74523156a47ffae27eb2a7c76b3074";"bb0c28d8a30c12ba0aedab6f902ef869b957fba8";"Extract Method";"clojure.lang.Agent.Action.run()";"clojure.lang.Agent.Action.doRun(Action)";"Extract Method package doRun(action Action) : void extracted from public run() : void in class clojure.lang.Agent.Action"
2369;"e997be6fcd8fa7f4529de3767e6cd799b6687416";"e80506c0a027365a557ae0a9262399e11338d68a";"Extract Method";"clojure.lang.PersistentVector.valAt(Object)";"clojure.lang.PersistentVector.valAt(Object,Object)";"Extract Method public valAt(key Object, notFound Object) : Object extracted from public valAt(key Object) : Object in class clojure.lang.PersistentVector"
2372;"3e01095b3f355c2f597dd6efc2a049caf682f5d1";"a273729aec06a817e077cb4c2fc1d3b7f517c3dd";"Rename Method";"clojure.lang.PersistentTreeMap.compare(Object,Object)";"clojure.lang.PersistentTreeMap.doCompare(Object,Object)";"Rename Method package compare(k1 Object, k2 Object) : int renamed to public doCompare(k1 Object, k2 Object) : int in class clojure.lang.PersistentTreeMap"
2376;"14287172ee1ea7549e83e115e8b943a94c444736";"e953a3bbe78362b8d180f72400af3cc6d3e6c641";"Extract Method";"clojure.lang.MapEntry.valAt(Object)";"clojure.lang.MapEntry.valAt(Object,Object)";"Extract Method public valAt(key Object, notFound Object) : Object extracted from public valAt(key Object) : Object in class clojure.lang.MapEntry"
2376;"14287172ee1ea7549e83e115e8b943a94c444736";"e953a3bbe78362b8d180f72400af3cc6d3e6c641";"Extract Method";"clojure.lang.PersistentArrayMap.valAt(Object)";"clojure.lang.PersistentArrayMap.valAt(Object,Object)";"Extract Method public valAt(key Object, notFound Object) : Object extracted from public valAt(key Object) : Object in class clojure.lang.PersistentArrayMap"
2376;"14287172ee1ea7549e83e115e8b943a94c444736";"e953a3bbe78362b8d180f72400af3cc6d3e6c641";"Extract Method";"clojure.lang.PersistentHashMap.valAt(Object)";"clojure.lang.PersistentHashMap.valAt(Object,Object)";"Extract Method public valAt(key Object, notFound Object) : Object extracted from public valAt(key Object) : Object in class clojure.lang.PersistentHashMap"
2376;"14287172ee1ea7549e83e115e8b943a94c444736";"e953a3bbe78362b8d180f72400af3cc6d3e6c641";"Extract Method";"clojure.lang.PersistentTreeMap.valAt(Object)";"clojure.lang.PersistentTreeMap.valAt(Object,Object)";"Extract Method public valAt(key Object, notFound Object) : Object extracted from public valAt(key Object) : Object in class clojure.lang.PersistentTreeMap"
2384;"0822f76b347fa29643ad8de5f4b5e15434145fab";"dacf426c70b836581ab6a505e6ae45355582122f";"Rename Class";"clojure.lang.TRef";"clojure.lang.Ref";"Rename Class clojure.lang.TRef renamed to clojure.lang.Ref"
2385;"dacf426c70b836581ab6a505e6ae45355582122f";"b84042c0bc9901954864335dd1bee007e8bcdcc1";"Rename Class";"clojure.lang.Ref";"clojure.lang.IRef";"Rename Class clojure.lang.Ref renamed to clojure.lang.IRef"
2386;"b84042c0bc9901954864335dd1bee007e8bcdcc1";"0ec345bceb26be46eae80a6ca7b365aeb968efb8";"Rename Class";"clojure.lang.IRef";"clojure.lang.Agent";"Rename Class clojure.lang.IRef renamed to clojure.lang.Agent"
2386;"b84042c0bc9901954864335dd1bee007e8bcdcc1";"0ec345bceb26be46eae80a6ca7b365aeb968efb8";"Rename Method";"clojure.lang.IRef.send(IFn,ISeq)";"clojure.lang.Agent.dispatch(IFn,ISeq)";"Rename Method public send(fn IFn, args ISeq) : Object renamed to public dispatch(fn IFn, args ISeq) : Object in class clojure.lang.Agent"
2386;"b84042c0bc9901954864335dd1bee007e8bcdcc1";"0ec345bceb26be46eae80a6ca7b365aeb968efb8";"Inline Method";"clojure.lang.IRef.doAlter(IFn,ISeq)";"clojure.lang.Agent.Action.run()";"Inline Method package doAlter(fn IFn, args ISeq) : void inlined to public run() : void in class clojure.lang.Agent.Action"
2388;"d647fbb3dc2027e837077cd94aaa9b2ffe3689eb";"139ddd146f2a272b7ddda397f54b501ff499c643";"Rename Method";"clojure.lang.IRef.commute(IFn,ISeq)";"clojure.lang.IRef.send(IFn,ISeq)";"Rename Method public commute(fn IFn, args ISeq) : Object renamed to public send(fn IFn, args ISeq) : Object in class clojure.lang.IRef"
2390;"340b89a20353fb118a923fcf0109b2feeeae88e0";"8779cee7968ca6479b572854afb4095a21e33f07";"Rename Class";"clojure.lang.Actor";"clojure.lang.IRef";"Rename Class clojure.lang.Actor renamed to clojure.lang.IRef"
2391;"8779cee7968ca6479b572854afb4095a21e33f07";"89bf1ae672b543ad15789533e18954603df2e25b";"Rename Class";"clojure.lang.IRef";"clojure.lang.Ref";"Rename Class clojure.lang.IRef renamed to clojure.lang.Ref"
2392;"89bf1ae672b543ad15789533e18954603df2e25b";"b2bd83819314795cf43defcd361d77271467ca8d";"Rename Class";"clojure.lang.Ref";"clojure.lang.TRef";"Rename Class clojure.lang.Ref renamed to clojure.lang.TRef"
2392;"89bf1ae672b543ad15789533e18954603df2e25b";"b2bd83819314795cf43defcd361d77271467ca8d";"Rename Method";"clojure.lang.Actor.change(IFn,ISeq)";"clojure.lang.Actor.alter(IFn,ISeq)";"Rename Method public change(fn IFn, args ISeq) : Object renamed to public alter(fn IFn, args ISeq) : Object in class clojure.lang.Actor"
2393;"b2bd83819314795cf43defcd361d77271467ca8d";"ce3b83c95f6758dbb40c031eb131a09e6650173a";"Extract Method";"clojure.lang.Actor.Action.run()";"clojure.lang.Actor.commute(IFn,ISeq)";"Extract Method package commute(fn IFn, args ISeq) : void extracted from public run() : void in class clojure.lang.Actor.Action"
2401;"e40ebe81b7f21ba844c08e3411ce437557630a3f";"e8d476806bc50753b3a72c11db1c6a10b3ad8d8c";"Rename Method";"clojure.lang.Actor.doInvoke(Object,Object)";"clojure.lang.Actor.send(IFn,ISeq)";"Rename Method public doInvoke(fn Object, args Object) : Object renamed to public send(fn IFn, args ISeq) : Object in class clojure.lang.Actor"
2403;"4159ecf6dba6283f921ede53c35a78850acbed61";"7baa797211e956e289bc4e736021161f2e8c085d";"Extract Interface";"clojure.lang.Var";"clojure.lang.IRef";"Extract Interface clojure.lang.IRef from class clojure.lang.Var"
2403;"4159ecf6dba6283f921ede53c35a78850acbed61";"7baa797211e956e289bc4e736021161f2e8c085d";"Extract Interface";"clojure.lang.Ref";"clojure.lang.IRef";"Extract Interface clojure.lang.IRef from class clojure.lang.Ref"
2403;"4159ecf6dba6283f921ede53c35a78850acbed61";"7baa797211e956e289bc4e736021161f2e8c085d";"Rename Method";"clojure.lang.Actor.getState()";"clojure.lang.Actor.get()";"Rename Method public getState() : Object renamed to public get() : Object in class clojure.lang.Actor"
2417;"fe567065b55b47705a6292e6f993001e4ef31997";"068bc4439d03127b78cf223504a626dbd05e6b04";"Rename Method";"clojure.lang.MultiFn.without(Object)";"clojure.lang.MultiFn.dissoc(Object)";"Rename Method public without(dispatchVal Object) : MultiFn renamed to public dissoc(dispatchVal Object) : MultiFn in class clojure.lang.MultiFn"
2419;"134557050ec4858b4d1ac2af8b600adbfe3f4f49";"e1261423aa9d01e8c4dc2a4518ed86e0ada0ccd3";"Rename Class";"clojure.lang.PolyFn";"clojure.lang.MultiFn";"Rename Class clojure.lang.PolyFn renamed to clojure.lang.MultiFn"
2424;"5c4b0b8323fe091f5a6c5a0af041a41403fbf3fb";"0197214873330bffbdaa0b37da2cf95c6d40d3e0";"Rename Method";"clojure.lang.MapEntry.contains(Object)";"clojure.lang.MapEntry.containsKey(Object)";"Rename Method public contains(key Object) : boolean renamed to public containsKey(key Object) : boolean in class clojure.lang.MapEntry"
2424;"5c4b0b8323fe091f5a6c5a0af041a41403fbf3fb";"0197214873330bffbdaa0b37da2cf95c6d40d3e0";"Rename Method";"clojure.lang.PersistentArrayMap.contains(Object)";"clojure.lang.PersistentArrayMap.containsKey(Object)";"Rename Method public contains(key Object) : boolean renamed to public containsKey(key Object) : boolean in class clojure.lang.PersistentArrayMap"
2424;"5c4b0b8323fe091f5a6c5a0af041a41403fbf3fb";"0197214873330bffbdaa0b37da2cf95c6d40d3e0";"Rename Method";"clojure.lang.PersistentHashMap.contains(Object)";"clojure.lang.PersistentHashMap.containsKey(Object)";"Rename Method public contains(key Object) : boolean renamed to public containsKey(key Object) : boolean in class clojure.lang.PersistentHashMap"
2424;"5c4b0b8323fe091f5a6c5a0af041a41403fbf3fb";"0197214873330bffbdaa0b37da2cf95c6d40d3e0";"Rename Method";"clojure.lang.PersistentTreeMap.contains(Object)";"clojure.lang.PersistentTreeMap.containsKey(Object)";"Rename Method public contains(key Object) : boolean renamed to public containsKey(key Object) : boolean in class clojure.lang.PersistentTreeMap"
2466;"7aac33d1447ccea5ef6a70318ea67085af994a68";"23554c4cd66e4821e39b21f60f8101868ac51070";"Rename Class";"clojure.lang.IStack";"clojure.lang.IPersistentStack";"Rename Class clojure.lang.IStack renamed to clojure.lang.IPersistentStack"
2467;"23554c4cd66e4821e39b21f60f8101868ac51070";"db86652ad2da15f500ad84806c2bf7a7af807741";"Extract Interface";"clojure.lang.IPersistentList";"clojure.lang.IStack";"Extract Interface clojure.lang.IStack from class clojure.lang.IPersistentList"
2467;"23554c4cd66e4821e39b21f60f8101868ac51070";"db86652ad2da15f500ad84806c2bf7a7af807741";"Push Down Method";"clojure.lang.ASeq.peek()";"clojure.lang.PersistentList.peek()";"Push Down Method public peek() : Object from class clojure.lang.ASeq to public peek() : Object from class clojure.lang.PersistentList"
2484;"d041b1fe404e73fb01ee572825d32a1d9df731d7";"a6be4971c2e80127462bcd564e237fdfa293755c";"Rename Class";"clojure.lang.LispReader.QuoteReader";"clojure.lang.LispReader.WrappingReader";"Rename Class clojure.lang.LispReader.QuoteReader renamed to clojure.lang.LispReader.WrappingReader"
2493;"8cbacf156a7a42c7ff1a816783e1afda1781becb";"cccaea9bcb03f737d79581284b51d7e99384d5ea";"Rename Method";"clojure.lang.RT.cons(Object,IPersistentCollection)";"clojure.lang.RT.conj(Object,IPersistentCollection)";"Rename Method public cons(x Object, y IPersistentCollection) : IPersistentCollection renamed to public conj(x Object, y IPersistentCollection) : IPersistentCollection in class clojure.lang.RT"
2510;"f78d8b3fe57b7eee920a1566f7207708d84a8a3f";"7686aa3fba8bf1a0ae6829625eb322abc7681ed6";"Move Method";"clojure.lang.Compiler.flattenMap(Object)";"clojure.lang.LispReader.SyntaxQuoteReader.flattenMap(Object)";"Move Method private flattenMap(form Object) : IPersistentVector from class clojure.lang.Compiler to private flattenMap(form Object) : IPersistentVector from class clojure.lang.LispReader.SyntaxQuoteReader"
2510;"f78d8b3fe57b7eee920a1566f7207708d84a8a3f";"7686aa3fba8bf1a0ae6829625eb322abc7681ed6";"Move Method";"clojure.lang.Compiler.sqExpandList(PersistentVector,ISeq)";"clojure.lang.LispReader.SyntaxQuoteReader.sqExpandList(PersistentVector,ISeq)";"Move Method private sqExpandList(ret PersistentVector, seq ISeq) : PersistentVector from class clojure.lang.Compiler to private sqExpandList(ret PersistentVector, seq ISeq) : ISeq from class clojure.lang.LispReader.SyntaxQuoteReader"
2510;"f78d8b3fe57b7eee920a1566f7207708d84a8a3f";"7686aa3fba8bf1a0ae6829625eb322abc7681ed6";"Move Method";"clojure.lang.Compiler.syntaxQuote(Object)";"clojure.lang.LispReader.SyntaxQuoteReader.syntaxQuote(Object)";"Move Method public syntaxQuote(form Object) : Expr from class clojure.lang.Compiler to package syntaxQuote(form Object) : Object from class clojure.lang.LispReader.SyntaxQuoteReader"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.DefExpr.parse(C,ISeq)";"clojure.lang.Compiler.DefExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.DefExpr to public parse(context C, form Object) : Expr from class clojure.lang.Compiler.DefExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.QuoteExpr.parse(C,ISeq)";"clojure.lang.Compiler.QuoteExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.QuoteExpr to public parse(context C, form Object) : Expr from class clojure.lang.Compiler.QuoteExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.TheVarExpr.parse(C,ISeq)";"clojure.lang.Compiler.TheVarExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.TheVarExpr to public parse(context C, form Object) : Expr from class clojure.lang.Compiler.TheVarExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.ThrowExpr.parse(C,ISeq)";"clojure.lang.Compiler.ThrowExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.ThrowExpr to public parse(context C, form Object) : Expr from class clojure.lang.Compiler.ThrowExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.HostExpr.parse(C,ISeq)";"clojure.lang.Compiler.HostExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.HostExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.HostExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.RecurExpr.parse(C,ISeq)";"clojure.lang.Compiler.RecurExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.RecurExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.RecurExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.LetExpr.parse(C,ISeq,boolean)";"clojure.lang.Compiler.LetExpr.Parser.parse(C,Object)";"Move Method package parse(context C, form ISeq, isLoop boolean) : Expr from class clojure.lang.Compiler.LetExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.LetExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.AssignExpr.parse(C,ISeq)";"clojure.lang.Compiler.AssignExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.AssignExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.AssignExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.IfExpr.parse(C,ISeq)";"clojure.lang.Compiler.IfExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.IfExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.IfExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.InstanceExpr.parse(C,ISeq)";"clojure.lang.Compiler.InstanceExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.InstanceExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.InstanceExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.TryFinallyExpr.parse(C,ISeq)";"clojure.lang.Compiler.TryFinallyExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.TryFinallyExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.TryFinallyExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.EqlRefExpr.parse(C,ISeq)";"clojure.lang.Compiler.EqlRefExpr.Parser.parse(C,Object)";"Move Method public parse(context C, form ISeq) : Expr from class clojure.lang.Compiler.EqlRefExpr to public parse(context C, frm Object) : Expr from class clojure.lang.Compiler.EqlRefExpr.Parser"
2515;"d3ba5541568cd748daae80a9866fa109ded2d520";"9913465259449b6b278b304eb24e03ef20a194d0";"Move Method";"clojure.lang.Compiler.BodyExpr.parse(C,ISeq)";"clojure.lang.Compiler.BodyExpr.Parser.parse(C,Object)";"Move Method package parse(context C, forms ISeq) : Expr from class clojure.lang.Compiler.BodyExpr to public parse(context C, frms Object) : Expr from class clojure.lang.Compiler.BodyExpr.Parser"
2516;"9913465259449b6b278b304eb24e03ef20a194d0";"a6272ace730f0de9791c26fcbf7c96acd24ab9d2";"Rename Class";"clojure.lang.LispReader.BackquoteReader";"clojure.lang.LispReader.SyntaxQuoteReader";"Rename Class clojure.lang.LispReader.BackquoteReader renamed to clojure.lang.LispReader.SyntaxQuoteReader"
2517;"a6272ace730f0de9791c26fcbf7c96acd24ab9d2";"3be7356fb858fd68d92471ad46ee7e9a4378d5a7";"Rename Method";"clojure.lang.RT.without(Object,Object)";"clojure.lang.RT.dissoc(Object,Object)";"Rename Method public without(key Object, coll Object) : Object renamed to public dissoc(key Object, coll Object) : Object in class clojure.lang.RT"
2522;"ed021e912e1d3c23ff533961d9564e8b9c184ea1";"ce9726806209cdf6d5770a693e3dc844ba1f3a7b";"Rename Class";"clojure.lang.IPersistentArray";"clojure.lang.IPersistentVector";"Rename Class clojure.lang.IPersistentArray renamed to clojure.lang.IPersistentVector"
2523;"ce9726806209cdf6d5770a693e3dc844ba1f3a7b";"db6cffe28cf45b42777245a1c02f6e4d93c203ab";"Rename Class";"clojure.lang.BytecodeCompiler";"clojure.lang.Compiler";"Rename Class clojure.lang.BytecodeCompiler renamed to clojure.lang.Compiler"
2524;"db6cffe28cf45b42777245a1c02f6e4d93c203ab";"b6cdf89042b44d0665ea760e8ab596c26817827e";"Rename Class";"clojure.lang.Compiler";"clojure.lang.OldCompiler";"Rename Class clojure.lang.Compiler renamed to clojure.lang.OldCompiler"
2524;"db6cffe28cf45b42777245a1c02f6e4d93c203ab";"b6cdf89042b44d0665ea760e8ab596c26817827e";"Rename Method";"clojure.lang.RT.tuple(Object[])";"clojure.lang.RT.vector(Object[])";"Rename Method public tuple(init Object[]) : IPersistentArray renamed to public vector(init Object[]) : IPersistentArray in class clojure.lang.RT"
2525;"b6cdf89042b44d0665ea760e8ab596c26817827e";"83a708fcac4cb37ed91ad4d32d70e54041b41dec";"Extract Method";"clojure.lang.BytecodeCompiler.HostExpr.parse(C,ISeq)";"clojure.lang.BytecodeCompiler.HostExpr.maybeClassName(Object)";"Extract Method private maybeClassName(form Object) : String extracted from public parse(context C, form ISeq) : Expr in class clojure.lang.BytecodeCompiler.HostExpr"
2537;"fc05db1783036d621215de9c297500c2d349b33e";"5c6f9df565814bf01b1886639ee10dd6c296f08c";"Rename Method";"clojure.lang.Delay.force()";"clojure.lang.Delay.invoke()";"Rename Method public force() : Object renamed to public invoke() : Object in class clojure.lang.Delay"
2550;"5759cb53f75f34e43814d99a362f96ffc315eb42";"54acb784b9b1872195466924377ec49587f88f58";"Inline Method";"clojure.lang.BytecodeCompiler.FnExpr.emitVarValue(GeneratorAdapter,Var)";"clojure.lang.BytecodeCompiler.VarExpr.emit(C,FnExpr,GeneratorAdapter)";"Inline Method public emitVarValue(gen GeneratorAdapter, var Var) : void inlined to public emit(context C, fn FnExpr, gen GeneratorAdapter) : void in class clojure.lang.BytecodeCompiler.VarExpr"
2550;"5759cb53f75f34e43814d99a362f96ffc315eb42";"54acb784b9b1872195466924377ec49587f88f58";"Move Attribute";"clojure.lang.BytecodeCompiler.FnExpr.getMethod";"clojure.lang.BytecodeCompiler.VarExpr.getMethod";"Move Attribute package getMethod : Method from class clojure.lang.BytecodeCompiler.FnExpr to class clojure.lang.BytecodeCompiler.VarExpr"
2551;"54acb784b9b1872195466924377ec49587f88f58";"58b4e4494a55e334b85852b95c9afd378202c74b";"Extract Method";"clojure.lang.BytecodeCompiler.DefExpr.emit(C,FnExpr,GeneratorAdapter)";"clojure.lang.BytecodeCompiler.FnExpr.emitVarValue(GeneratorAdapter,Var)";"Extract Method public emitVarValue(gen GeneratorAdapter, var Var) : void extracted from public emit(context C, fn FnExpr, gen GeneratorAdapter) : void in class clojure.lang.BytecodeCompiler.DefExpr"
2551;"54acb784b9b1872195466924377ec49587f88f58";"58b4e4494a55e334b85852b95c9afd378202c74b";"Extract Method";"clojure.lang.BytecodeCompiler.VarExpr.emit(C,FnExpr,GeneratorAdapter)";"clojure.lang.BytecodeCompiler.FnExpr.emitVarValue(GeneratorAdapter,Var)";"Extract Method public emitVarValue(gen GeneratorAdapter, var Var) : void extracted from public emit(context C, fn FnExpr, gen GeneratorAdapter) : void in class clojure.lang.BytecodeCompiler.VarExpr"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object, arg17 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object, arg17 Object, arg18 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object, arg17 Object, arg18 Object, arg19 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object, arg17 Object, arg18 Object, arg19 Object, arg20 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke()";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke() : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(obj Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(obj Object, val Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object) : Object in class clojure.lang.StaticMemberInvoker"
2554;"3a4ab3a82e9b1b750da2d3c536d4867f69654ce5";"44e91204bbc4a8bf8217cb8b2eea14de94e6b9d2";"Extract Method";"clojure.lang.StaticMemberInvoker.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object)";"clojure.lang.Reflector.invokeStaticMethodVariadic(String,String,Object[])";"Extract Method public invokeStaticMethodVariadic(className String, methodName String, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object) : Object in class clojure.lang.StaticMemberInvoker"
2556;"2115153ec692d1393c654b6a60be2a395ef1beb2";"74a408a19df659ba79eadfde48340f6397c310be";"Extract Method";"clojure.lang.BytecodeCompiler.registerLocal(Symbol,Symbol)";"clojure.lang.BytecodeCompiler.getAndIncLocalNum()";"Extract Method private getAndIncLocalNum() : int extracted from private registerLocal(sym Symbol, tag Symbol) : LocalBinding in class clojure.lang.BytecodeCompiler"
2561;"8a36fd5f840f13e2cb16e7876012d5dc43c244e3";"f96102812da70214ef45e4f7bb68707258d3a41c";"Rename Class";"clojure.lang.DynamicVar";"clojure.lang.Var";"Rename Class clojure.lang.DynamicVar renamed to clojure.lang.Var"
2568;"c894ed9bcc2bb8e45822d48f00b1cb8d90f8c603";"cb96c6d66d4e77b162359495840199cb94e0ccbf";"Extract Method";"clojure.lang.BytecodeCompiler.lookupVar(Symbol)";"clojure.lang.BytecodeCompiler.currentNS()";"Extract Method private currentNS() : String extracted from package lookupVar(sym Symbol) : DynamicVar in class clojure.lang.BytecodeCompiler"
2571;"f93cacece6c5bb48d20fdbbf7b228fcdb1477981";"5d1806f75ee05769a7683afc806c389091667e04";"Rename Method";"clojure.lang.Keyword.(String,String)";"clojure.lang.Keyword.intern(String,String)";"Rename Method public Keyword(ns String, name String) renamed to public intern(ns String, name String) : Keyword in class clojure.lang.Keyword"
2573;"f12a76d3063e4a024b1e67a63c4f9fc12d168088";"92075ac2c07da8a76bb3b07db4e59c8f7a10d915";"Extract Method";"clojure.lang.LispReader.read(PushbackReader,boolean,Object,boolean)";"clojure.lang.LispReader.isWhitespace(int)";"Extract Method package isWhitespace(ch int) : boolean extracted from public read(r PushbackReader, eofIsError boolean, eofValue Object, isRecursive boolean) : Object in class clojure.lang.LispReader"
2573;"f12a76d3063e4a024b1e67a63c4f9fc12d168088";"92075ac2c07da8a76bb3b07db4e59c8f7a10d915";"Extract Method";"clojure.lang.LispReader.readDelimitedList(char,PushbackReader,boolean)";"clojure.lang.LispReader.isWhitespace(int)";"Extract Method package isWhitespace(ch int) : boolean extracted from public readDelimitedList(delim char, r PushbackReader, isRecursive boolean) : List in class clojure.lang.LispReader"
2573;"f12a76d3063e4a024b1e67a63c4f9fc12d168088";"92075ac2c07da8a76bb3b07db4e59c8f7a10d915";"Extract Method";"clojure.lang.LispReader.readToken(PushbackReader,char)";"clojure.lang.LispReader.isWhitespace(int)";"Extract Method package isWhitespace(ch int) : boolean extracted from private readToken(r PushbackReader, initch char) : String in class clojure.lang.LispReader"
2573;"f12a76d3063e4a024b1e67a63c4f9fc12d168088";"92075ac2c07da8a76bb3b07db4e59c8f7a10d915";"Extract Method";"clojure.lang.LispReader.readNumber(PushbackReader,char)";"clojure.lang.LispReader.isWhitespace(int)";"Extract Method package isWhitespace(ch int) : boolean extracted from private readNumber(r PushbackReader, initch char) : Object in class clojure.lang.LispReader"
2579;"7818b558dfa10006178b9a9b4334de7c4bab2d78";"35e67dc6215ab3be205b1b95d7ffe7a235cedd8f";"Extract Method";"clojure.lang.DynamicVar.isBound()";"clojure.lang.DynamicVar.hasRoot()";"Extract Method public hasRoot() : boolean extracted from public isBound() : boolean in class clojure.lang.DynamicVar"
2579;"7818b558dfa10006178b9a9b4334de7c4bab2d78";"35e67dc6215ab3be205b1b95d7ffe7a235cedd8f";"Extract Method";"clojure.lang.DynamicVar.get()";"clojure.lang.DynamicVar.hasRoot()";"Extract Method public hasRoot() : boolean extracted from public get() : Object in class clojure.lang.DynamicVar"
2579;"7818b558dfa10006178b9a9b4334de7c4bab2d78";"35e67dc6215ab3be205b1b95d7ffe7a235cedd8f";"Extract Method";"clojure.lang.DynamicVar.set(Object)";"clojure.lang.DynamicVar.hasRoot()";"Extract Method public hasRoot() : boolean extracted from public set(val Object) : Object in class clojure.lang.DynamicVar"
2579;"7818b558dfa10006178b9a9b4334de7c4bab2d78";"35e67dc6215ab3be205b1b95d7ffe7a235cedd8f";"Extract Method";"clojure.lang.DynamicVar.intern(Symbol,Object,boolean)";"clojure.lang.DynamicVar.hasRoot()";"Extract Method public hasRoot() : boolean extracted from public intern(sym Symbol, root Object, replaceRoot boolean) : DynamicVar in class clojure.lang.DynamicVar"
2580;"35e67dc6215ab3be205b1b95d7ffe7a235cedd8f";"8b21472e502732159b4d2e3fa20b25089cfd9c79";"Rename Method";"clojure.lang.DynamicVar.setRoot(Object)";"clojure.lang.DynamicVar.bindRoot(Object)";"Rename Method public setRoot(root Object) : DynamicVar renamed to public bindRoot(root Object) : DynamicVar in class clojure.lang.DynamicVar"
2583;"1e4492b15775747144472f30e3cf4aeff193a2bc";"7ae2f7310f3817a98c738e84e70ec69d2f60b56f";"Extract Method";"clojure.lang.Compiler.analyzeOr(C,ISeq)";"clojure.lang.Symbol.create(String)";"Extract Method public create(name_interned String) : Symbol extracted from private analyzeOr(context C, form ISeq) : Expr in class clojure.lang.Compiler"
2585;"04c59e81c4f16bfcaef2fdfd3f5bc5d887445045";"3fb1ffaceed047e58d219065deed567930ebeb15";"Rename Method";"clojure.lang.Symbol.(String)";"clojure.lang.Symbol.intern(String)";"Rename Method public Symbol(name String) renamed to public intern(nsname String) : Symbol in class clojure.lang.Symbol"
2593;"faa1146288b03e82451943a3f7fd6e927bb1acc7";"389cf13600985156e8e44640e2781d48af8e00a1";"Move Method";"clojure.lang.Ref.popThreadBinding()";"clojure.lang.DynamicVar.popThreadBinding()";"Move Method public popThreadBinding() : void from class clojure.lang.Ref to public popThreadBinding() : void from class clojure.lang.DynamicVar"
2595;"0a6ceab0717beeabef24062d68449a8147ed9e22";"bd6e6a16c32f15713a351263a07c384a19c2d21d";"Rename Method";"clojure.lang.Ref.val()";"clojure.lang.Ref.get()";"Rename Method public val() : Object renamed to public get() : Object in class clojure.lang.Ref"
2596;"bd6e6a16c32f15713a351263a07c384a19c2d21d";"031971d1d80e1e2f6fbc50ac6a6afe81fcbc2e27";"Extract Method";"clojure.lang.LockingTransaction.lock(Ref)";"clojure.lang.LockingTransaction.barge(Info)";"Extract Method private barge(refinfo Info) : boolean extracted from package lock(ref Ref) : Object in class clojure.lang.LockingTransaction"
2601;"5c719b2f91f723c78d0f066f6ddd7fa558ff8bcc";"4294c94279eecee549d4969e194a40b5ea50649f";"Extract Method";"clojure.lang.LockingTransaction.lock(Ref,boolean)";"clojure.lang.LockingTransaction.stop(int)";"Extract Method package stop(status int) : void extracted from package lock(ref Ref, ensurePoint boolean) : Object in class clojure.lang.LockingTransaction"
2601;"5c719b2f91f723c78d0f066f6ddd7fa558ff8bcc";"4294c94279eecee549d4969e194a40b5ea50649f";"Extract Method";"clojure.lang.LockingTransaction.run(IFn)";"clojure.lang.LockingTransaction.stop(int)";"Extract Method package stop(status int) : void extracted from package run(fn IFn) : Object in class clojure.lang.LockingTransaction"
2601;"5c719b2f91f723c78d0f066f6ddd7fa558ff8bcc";"4294c94279eecee549d4969e194a40b5ea50649f";"Extract Method";"clojure.lang.LockingTransaction.lock(Ref,boolean)";"clojure.lang.LockingTransaction.Info.running()";"Extract Method public running() : boolean extracted from package lock(ref Ref, ensurePoint boolean) : Object in class clojure.lang.LockingTransaction"
2601;"5c719b2f91f723c78d0f066f6ddd7fa558ff8bcc";"4294c94279eecee549d4969e194a40b5ea50649f";"Extract Method";"clojure.lang.LockingTransaction.run(IFn)";"clojure.lang.LockingTransaction.Info.running()";"Extract Method public running() : boolean extracted from package run(fn IFn) : Object in class clojure.lang.LockingTransaction"
2601;"5c719b2f91f723c78d0f066f6ddd7fa558ff8bcc";"4294c94279eecee549d4969e194a40b5ea50649f";"Inline Method";"clojure.lang.LockingTransaction.relinquishReadPoint()";"clojure.lang.LockingTransaction.run(IFn)";"Inline Method package relinquishReadPoint() : void inlined to package run(fn IFn) : Object in class clojure.lang.LockingTransaction"
2604;"f39e88435ebb9bba67ce46a758dce82fc71eb0be";"099953cd4057aacf696de026baaee0295fc4db19";"Rename Method";"clojure.lang.Transaction.getNextPoint()";"clojure.lang.Transaction.getCommitPoint()";"Rename Method package getNextPoint() : long renamed to package getCommitPoint() : long in class clojure.lang.Transaction"
2606;"fc33cf217b1dbfaaee3ca3294a6785df5befdaa1";"2f851022c1de98dd11dd05e30e4fca5e118c30f9";"Extract Method";"clojure.lang.ReaderParser.expression()";"clojure.lang.ReaderParser.otherThanDotExpression()";"Extract Method public otherThanDotExpression() : Object extracted from public expression() : Object in class clojure.lang.ReaderParser"
2607;"2f851022c1de98dd11dd05e30e4fca5e118c30f9";"3ed3682254f22b1bfbc45ee72b49b80fe995e990";"Rename Method";"clojure.lang.ReaderLexer.mT28()";"clojure.lang.ReaderLexer.mT38()";"Rename Method public mT28() : void renamed to public mT38() : void in class clojure.lang.ReaderLexer"
2615;"7ee1a813d0c90a1bde3e8c341d3fc18ba0ad462e";"4232de83a53e12741252d31aef9cecee5b8981da";"Move Method";"clojure.lang.APersistentArray.equals(Object)";"clojure.lang.PersistentVector.equals(Object)";"Move Method public equals(obj Object) : boolean from class clojure.lang.APersistentArray to public equals(obj Object) : boolean from class clojure.lang.PersistentVector"
2615;"7ee1a813d0c90a1bde3e8c341d3fc18ba0ad462e";"4232de83a53e12741252d31aef9cecee5b8981da";"Move Method";"clojure.lang.APersistentArray.hashCode()";"clojure.lang.PersistentVector.hashCode()";"Move Method public hashCode() : int from class clojure.lang.APersistentArray to public hashCode() : int from class clojure.lang.PersistentVector"
2615;"7ee1a813d0c90a1bde3e8c341d3fc18ba0ad462e";"4232de83a53e12741252d31aef9cecee5b8981da";"Move Attribute";"clojure.lang.APersistentArray._hash";"clojure.lang.PersistentVector._hash";"Move Attribute package _hash : int from class clojure.lang.APersistentArray to class clojure.lang.PersistentVector"
2617;"ec855a884cc289812332d34a6b8f2ebf18ccb1cc";"296da9b329a1a7f07a8a8baeed2c59439e24e889";"Move Method";"clojure.lang.PersistentHashMap.BitmapIndexedNode.mask(int,int)";"clojure.lang.PersistentHashMap.mask(int,int)";"Move Method package mask(hash int, shift int) : int from class clojure.lang.PersistentHashMap.BitmapIndexedNode to package mask(hash int, shift int) : int from class clojure.lang.PersistentHashMap"
2617;"ec855a884cc289812332d34a6b8f2ebf18ccb1cc";"296da9b329a1a7f07a8a8baeed2c59439e24e889";"Move Method";"clojure.lang.PersistentHashMap.FullNode.mask(int,int)";"clojure.lang.PersistentHashMap.mask(int,int)";"Move Method package mask(hash int, shift int) : int from class clojure.lang.PersistentHashMap.FullNode to package mask(hash int, shift int) : int from class clojure.lang.PersistentHashMap"
2618;"296da9b329a1a7f07a8a8baeed2c59439e24e889";"829f3e3fb7908c958355ccde936c62c4ddc8099c";"Extract Method";"clojure.lang.PersistentArrayMap.createHT(Object[])";"clojure.lang.PersistentHashMap.create(IPersistentMap,Object[])";"Extract Method public create(meta IPersistentMap, init Object[]) : IPersistentMap extracted from package createHT(init Object[]) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2622;"97795e1e3c44870ea715d602fa39ea61163bc3a4";"ee8b13bd2d08c2636e453bd65c599d70e8d7bf0c";"Rename Class";"clojure.lang.StaticMemberSymbol";"clojure.lang.StaticMemberInvoker";"Rename Class clojure.lang.StaticMemberSymbol renamed to clojure.lang.StaticMemberInvoker"
2622;"97795e1e3c44870ea715d602fa39ea61163bc3a4";"ee8b13bd2d08c2636e453bd65c599d70e8d7bf0c";"Rename Class";"clojure.lang.InstanceMemberSymbol";"clojure.lang.InstanceMemberInvoker";"Rename Class clojure.lang.InstanceMemberSymbol renamed to clojure.lang.InstanceMemberInvoker"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.APersistentArray.find(Object)";"clojure.lang.APersistentArray.entryAt(Object)";"Rename Method public find(key Object) : IMapEntry renamed to public entryAt(key Object) : IMapEntry in class clojure.lang.APersistentArray"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.APersistentArray.get(Object)";"clojure.lang.APersistentArray.valAt(Object)";"Rename Method public get(key Object) : Object renamed to public valAt(key Object) : Object in class clojure.lang.APersistentArray"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.MapEntry.find(Object)";"clojure.lang.MapEntry.entryAt(Object)";"Rename Method public find(key Object) : IMapEntry renamed to public entryAt(key Object) : IMapEntry in class clojure.lang.MapEntry"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.MapEntry.get(Object)";"clojure.lang.MapEntry.valAt(Object)";"Rename Method public get(key Object) : Object renamed to public valAt(key Object) : Object in class clojure.lang.MapEntry"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentArrayMap.find(Object)";"clojure.lang.PersistentArrayMap.entryAt(Object)";"Rename Method public find(key Object) : IMapEntry renamed to public entryAt(key Object) : IMapEntry in class clojure.lang.PersistentArrayMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentArrayMap.get(Object)";"clojure.lang.PersistentArrayMap.valAt(Object)";"Rename Method public get(key Object) : Object renamed to public valAt(key Object) : Object in class clojure.lang.PersistentArrayMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentHashMap.find(Object)";"clojure.lang.PersistentHashMap.entryAt(Object)";"Rename Method public find(key Object) : IMapEntry renamed to public entryAt(key Object) : IMapEntry in class clojure.lang.PersistentHashMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentTreeMap.find(Object)";"clojure.lang.PersistentTreeMap.entryAt(Object)";"Rename Method public find(key Object) : Node renamed to public entryAt(key Object) : Node in class clojure.lang.PersistentTreeMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.TRef.getCurrentVal()";"clojure.lang.TRef.currentVal()";"Rename Method public getCurrentVal() : T renamed to public currentVal() : T in class clojure.lang.TRef"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.TRef.get()";"clojure.lang.TRef.val()";"Rename Method public get() : T renamed to public val() : T in class clojure.lang.TRef"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentHashtableMap.get(Object)";"clojure.lang.PersistentHashtableMap.entryAt(Object)";"Rename Method public get(key Object) : Object renamed to public entryAt(key Object) : IMapEntry in class clojure.lang.PersistentHashtableMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentHashtableMap.find(Object)";"clojure.lang.PersistentHashtableMap.valAt(Object)";"Rename Method public find(key Object) : IMapEntry renamed to public valAt(key Object) : Object in class clojure.lang.PersistentHashtableMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentTreeMap.get(Object)";"clojure.lang.PersistentTreeMap.valAt(Object)";"Rename Method public get(key Object) : Object renamed to public valAt(key Object) : Object in class clojure.lang.PersistentTreeMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.PersistentHashMap.get(Object)";"clojure.lang.PersistentHashMap.valAt(Object)";"Rename Method public get(key Object) : Object renamed to public valAt(key Object) : Object in class clojure.lang.PersistentHashMap"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.Module.find(String)";"clojure.lang.Module.findModule(String)";"Rename Method public find(name String) : Module renamed to public findModule(name String) : Module in class clojure.lang.Module"
2624;"c8f2340902b1c3efd66dec3071f93b82eb5632e4";"e4bbdb0c9af57495d16c8b4f97248c0137030da9";"Rename Method";"clojure.lang.Module.findOrCreate(String)";"clojure.lang.Module.findOrCreateModule(String)";"Rename Method public findOrCreate(name String) : Module renamed to public findOrCreateModule(name String) : Module in class clojure.lang.Module"
2627;"21cb093d49c39537d26c0f7735b9b2b2b7684b8f";"58d22d11d8313d630a43da8bf716bf0212227505";"Extract Method";"clojure.lang.Var.getValue()";"clojure.lang.TRef.isBound()";"Extract Method package isBound() : boolean extracted from public getValue() : Object in class clojure.lang.Var"
2628;"58d22d11d8313d630a43da8bf716bf0212227505";"bbe9d7ace49db4e368443818220e5268c3e3a367";"Extract Method";"clojure.lang.FnSeq.rest()";"clojure.lang.Delay.force()";"Extract Method public force() : Object extracted from public rest() : ISeq in class clojure.lang.FnSeq"
2629;"bbe9d7ace49db4e368443818220e5268c3e3a367";"2f727ab53baa48fded8f8735484c8b7cddf7b95b";"Rename Method";"clojure.lang.Transaction.getTransaction()";"clojure.lang.Transaction.get()";"Rename Method package getTransaction() : Transaction renamed to package get() : Transaction in class clojure.lang.Transaction"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Rename Method";"clojure.lang.Transaction.()";"clojure.lang.Transaction.getNextPoint()";"Rename Method package Transaction() renamed to package getNextPoint() : long in class clojure.lang.Transaction"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Move Method";"clojure.lang.TPool.valAsOfTime(TRef,long)";"clojure.lang.TRef.valAsOfTime(TRef,long)";"Move Method package valAsOfTime(tref TRef, msecs long) : TVal from class clojure.lang.TPool to package valAsOfTime(tref TRef, msecs long) : TVal from class clojure.lang.TRef"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Move Method";"clojure.lang.TPool.valAsOfPoint(TRef,int)";"clojure.lang.TRef.valAsOfPoint(TRef,int)";"Move Method package valAsOfPoint(tref TRef, tpoint int) : TVal from class clojure.lang.TPool to package valAsOfPoint(tref TRef, tpoint int) : TVal from class clojure.lang.TRef"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Move Method";"clojure.lang.TPool.trimHistoryPriorToTime(long)";"clojure.lang.TRef.trimHistoryPriorToTime(long)";"Move Method package trimHistoryPriorToTime(msecs long) : void from class clojure.lang.TPool to package trimHistoryPriorToTime(msecs long) : void from class clojure.lang.TRef"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Move Method";"clojure.lang.TPool.trimHistoryPriorToPoint(int)";"clojure.lang.TRef.trimHistoryPriorToPoint(int)";"Move Method package trimHistoryPriorToPoint(tpoint int) : void from class clojure.lang.TPool to package trimHistoryPriorToPoint(tpoint int) : void from class clojure.lang.TRef"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Move Method";"clojure.lang.TPool.trimHistory()";"clojure.lang.TRef.trimHistory()";"Move Method package trimHistory() : void from class clojure.lang.TPool to package trimHistory() : void from class clojure.lang.TRef"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Extract Method";"clojure.lang.Transaction.doCommute(TRef,IFn)";"clojure.lang.Transaction.lock(TRef,boolean)";"Extract Method package lock(tref TRef, ensurePoint boolean) : void extracted from package doCommute(tref TRef, fn IFn) : void in class clojure.lang.Transaction"
2635;"76e5252aaf17760df635115999bc212a860c8b9d";"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"Extract Method";"clojure.lang.Transaction.run(IFn)";"clojure.lang.Transaction.relinquish(long)";"Extract Method package relinquish(tpoint long) : void extracted from package run(fn IFn) : Object in class clojure.lang.Transaction"
2636;"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"fa6d4d3681917738c1acf5653239c19872bf71d9";"Inline Method";"clojure.lang.Transaction.getNextSeq()";"clojure.lang.Transaction.run(IFn)";"Inline Method package getNextSeq() : int inlined to package run(fn IFn) : Object in class clojure.lang.Transaction"
2636;"97c180a498e6ca60c36b4dbf08581bc27d8aeb2a";"fa6d4d3681917738c1acf5653239c19872bf71d9";"Inline Method";"clojure.lang.Transaction.reset()";"clojure.lang.Transaction.run(IFn)";"Inline Method private reset() : void inlined to package run(fn IFn) : Object in class clojure.lang.Transaction"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Rename Class";"clojure.lang.PersistentHashMap.Node";"clojure.lang.PersistentHashMap.BitmapIndexedNode";"Rename Class clojure.lang.PersistentHashMap.Node renamed to clojure.lang.PersistentHashMap.BitmapIndexedNode"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Rename Class";"clojure.lang.PersistentHashMap.HashCollisionLeaf";"clojure.lang.PersistentHashMap.HashCollisionNode";"Rename Class clojure.lang.PersistentHashMap.HashCollisionLeaf renamed to clojure.lang.PersistentHashMap.HashCollisionNode"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Rename Class";"clojure.lang.PersistentHashMap.Leaf";"clojure.lang.PersistentHashMap.LeafNode";"Rename Class clojure.lang.PersistentHashMap.Leaf renamed to clojure.lang.PersistentHashMap.LeafNode"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Extract Method";"clojure.lang.PersistentHashMap.Node.create(int,ILeaf,int,Object,Object)";"clojure.lang.PersistentHashMap.BitmapIndexedNode.bitpos(int,int)";"Extract Method package bitpos(hash int, shift int) : int extracted from package create(shift int, leaf ILeaf, hash int, key Object, val Object) : INode in class clojure.lang.PersistentHashMap.Node"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Extract Method";"clojure.lang.PersistentHashMap.Node.assoc(int,int,Object,Object)";"clojure.lang.PersistentHashMap.BitmapIndexedNode.bitpos(int,int)";"Extract Method package bitpos(hash int, shift int) : int extracted from public assoc(shift int, hash int, key Object, val Object) : INode in class clojure.lang.PersistentHashMap.Node"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Extract Method";"clojure.lang.PersistentHashMap.Node.without(int,Object)";"clojure.lang.PersistentHashMap.BitmapIndexedNode.bitpos(int,int)";"Extract Method package bitpos(hash int, shift int) : int extracted from public without(hash int, key Object) : INode in class clojure.lang.PersistentHashMap.Node"
2637;"fa6d4d3681917738c1acf5653239c19872bf71d9";"c070e63a413e1cfe3d95f2100b6aa7ce28ea5221";"Extract Method";"clojure.lang.PersistentHashMap.Node.find(int,Object)";"clojure.lang.PersistentHashMap.BitmapIndexedNode.bitpos(int,int)";"Extract Method package bitpos(hash int, shift int) : int extracted from public find(hash int, key Object) : Leaf in class clojure.lang.PersistentHashMap.Node"
2640;"12457e7bf29747232bbfda2a0de3b72fbb14f3a9";"5eeba526b27ced81a6116ac31d989830d589b456";"Rename Class";"clojure.lang.PersistentHashMap.MultiLeaf";"clojure.lang.PersistentHashMap.HashCollisionLeaf";"Rename Class clojure.lang.PersistentHashMap.MultiLeaf renamed to clojure.lang.PersistentHashMap.HashCollisionLeaf"
2640;"12457e7bf29747232bbfda2a0de3b72fbb14f3a9";"5eeba526b27ced81a6116ac31d989830d589b456";"Extract Method";"clojure.lang.PersistentHashMap.MultiLeaf.assoc(int,int,Object,Object)";"clojure.lang.PersistentHashMap.Node.create(int,ILeaf,int,Object,Object)";"Extract Method package create(shift int, leaf ILeaf, hash int, key Object, val Object) : INode extracted from public assoc(level int, hash int, key Object, val Object) : INode in class clojure.lang.PersistentHashMap.MultiLeaf"
2640;"12457e7bf29747232bbfda2a0de3b72fbb14f3a9";"5eeba526b27ced81a6116ac31d989830d589b456";"Extract Method";"clojure.lang.PersistentHashMap.Node.assoc(int,int,Object,Object)";"clojure.lang.PersistentHashMap.Node.mask(int,int)";"Extract Method package mask(hash int, shift int) : int extracted from public assoc(level int, hash int, key Object, val Object) : INode in class clojure.lang.PersistentHashMap.Node"
2640;"12457e7bf29747232bbfda2a0de3b72fbb14f3a9";"5eeba526b27ced81a6116ac31d989830d589b456";"Extract Method";"clojure.lang.PersistentHashMap.Node.without(int,Object)";"clojure.lang.PersistentHashMap.Node.mask(int,int)";"Extract Method package mask(hash int, shift int) : int extracted from public without(hash int, key Object) : INode in class clojure.lang.PersistentHashMap.Node"
2640;"12457e7bf29747232bbfda2a0de3b72fbb14f3a9";"5eeba526b27ced81a6116ac31d989830d589b456";"Extract Method";"clojure.lang.PersistentHashMap.Node.find(int,Object)";"clojure.lang.PersistentHashMap.Node.mask(int,int)";"Extract Method package mask(hash int, shift int) : int extracted from public find(hash int, key Object) : Leaf in class clojure.lang.PersistentHashMap.Node"
2647;"348f4fa02df4c2b111be5cc7afd48123fd40d195";"b8e4aa5295ac361ebc01c40274b336b875e93489";"Rename Method";"clojure.lang.Compiler.findSingleStaticMethod(Class,String,PersistentArrayList)";"clojure.lang.Compiler.findSingleMethod(Class,String,PersistentArrayList,boolean)";"Rename Method public findSingleStaticMethod(c Class, methodName String, args PersistentArrayList) : Method renamed to public findSingleMethod(c Class, methodName String, args PersistentArrayList, isStatic boolean) : Object in class clojure.lang.Compiler"
2649;"e8bbb66e066c06854814aa7bfb00fe9c8fd2e273";"c486dde7e4b3e74c2a41d2fff3deeb9833f2c1ab";"Rename Class";"clojure.lang.Compiler.HostStaticExpr";"clojure.lang.Compiler.HostStaticFieldExpr";"Rename Class clojure.lang.Compiler.HostStaticExpr renamed to clojure.lang.Compiler.HostStaticFieldExpr"
2649;"e8bbb66e066c06854814aa7bfb00fe9c8fd2e273";"c486dde7e4b3e74c2a41d2fff3deeb9833f2c1ab";"Rename Class";"clojure.lang.Compiler.InvokeHostClassExpr";"clojure.lang.Compiler.InvokeConstructorExpr";"Rename Class clojure.lang.Compiler.InvokeHostClassExpr renamed to clojure.lang.Compiler.InvokeConstructorExpr"
2649;"e8bbb66e066c06854814aa7bfb00fe9c8fd2e273";"c486dde7e4b3e74c2a41d2fff3deeb9833f2c1ab";"Rename Method";"clojure.lang.Compiler.isCompatible(Class[],PersistentArrayList)";"clojure.lang.Compiler.emitTypedArgs(Class[],PersistentArrayList)";"Rename Method private isCompatible(parameterTypes Class[], args PersistentArrayList) : boolean renamed to package emitTypedArgs(parameterTypes Class[], args PersistentArrayList) : void in class clojure.lang.Compiler"
2655;"a1128113559fa272dada3cfc25757a0223fbdea1";"dc4c38e0f3bea2ebb7708c36ac8d670fe9b95f97";"Extract Method";"clojure.lang.Compiler.LocalBindingExpr.emitExpression()";"clojure.lang.Compiler.LocalBinding.getExpr()";"Extract Method package getExpr() : String extracted from public emitExpression() : void in class clojure.lang.Compiler.LocalBindingExpr"
2664;"bc8dbcb2c35fe41b38b05a061614bcacfd21f29b";"f36e07ecf4275fc6c6773b56faff7426b5671147";"Extract Method";"clojure.lang.Compiler.analyzeFn(C,ISeq)";"clojure.lang.Compiler.FnMethod.isVariadic()";"Extract Method package isVariadic() : boolean extracted from private analyzeFn(context C, form ISeq) : Expr in class clojure.lang.Compiler"
2665;"f36e07ecf4275fc6c6773b56faff7426b5671147";"63f878b1103d32483c44ef6416a6c74c4b7b969b";"Rename Method";"clojure.lang.Compiler.FnExpr.getClassName()";"clojure.lang.Compiler.FnExpr.getName()";"Rename Method package getClassName() : String renamed to package getName() : String in class clojure.lang.Compiler.FnExpr"
2666;"63f878b1103d32483c44ef6416a6c74c4b7b969b";"c62973eb7d0af525fe5e9e6d1e9d8a8971aab8b2";"Move Attribute";"clojure.lang.Compiler.FnFrame.locals";"clojure.lang.Compiler.FnMethod.locals";"Move Attribute package locals : IPersistentMap from class clojure.lang.Compiler.FnFrame to class clojure.lang.Compiler.FnMethod"
2668;"2212ddd3122b6f0799b4ed73e77aeeea7c19c34c";"bbabe65cbbbba066e2df174d7b7bea9b5739b8a5";"Move Attribute";"clojure.lang.Compiler.SymExpr.typeHint";"clojure.lang.Compiler.VarExpr.typeHint";"Move Attribute package typeHint : String from class clojure.lang.Compiler.SymExpr to class clojure.lang.Compiler.VarExpr"
2668;"2212ddd3122b6f0799b4ed73e77aeeea7c19c34c";"bbabe65cbbbba066e2df174d7b7bea9b5739b8a5";"Move Attribute";"clojure.lang.Compiler.VarExpr.init";"clojure.lang.Compiler.DefExpr.init";"Move Attribute package init : Expr from class clojure.lang.Compiler.VarExpr to class clojure.lang.Compiler.DefExpr"
2668;"2212ddd3122b6f0799b4ed73e77aeeea7c19c34c";"bbabe65cbbbba066e2df174d7b7bea9b5739b8a5";"Move Attribute";"clojure.lang.Compiler.LocalBindingExpr.sym";"clojure.lang.Compiler.LocalBinding.sym";"Move Attribute package sym : Symbol from class clojure.lang.Compiler.LocalBindingExpr to class clojure.lang.Compiler.LocalBinding"
2668;"2212ddd3122b6f0799b4ed73e77aeeea7c19c34c";"bbabe65cbbbba066e2df174d7b7bea9b5739b8a5";"Move Attribute";"clojure.lang.Compiler.SymExpr.sym";"clojure.lang.Compiler.LocalBinding.sym";"Move Attribute package sym : Symbol from class clojure.lang.Compiler.SymExpr to class clojure.lang.Compiler.LocalBinding"
2674;"51c468f878a842bc6e469c32acbc58543448d081";"987dad567505261e0daf3dcbdd6363353cbe15a5";"Rename Class";"clojure.lang.Namespace";"clojure.lang.Module";"Rename Class clojure.lang.Namespace renamed to clojure.lang.Module"
2679;"fc795d4a8da2e9fc990037678b22a51475685600";"3a21d8fa903baed26643ac212626dbc17d26f859";"Rename Method";"clojure.lang.RT.format(Writer,String,ISeq)";"clojure.lang.RT.doFormat(Writer,String,ISeq)";"Rename Method public format(w Writer, s String, args ISeq) : void renamed to public doFormat(w Writer, s String, args ISeq) : void in class clojure.lang.RT"
2682;"db5107d5d868cdd95e5af40cc9ab02f0261df7f4";"73b3f73d469b4a37dd3827e4fff45efce7459d24";"Extract Method";"clojure.lang.RestFn.invoke(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object[])";"clojure.lang.RestFn.ontoArrayPrepend(Object[],Object[])";"Extract Method protected ontoArrayPrepend(array Object[], args Object[]) : ISeq extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, arg6 Object, arg7 Object, arg8 Object, arg9 Object, arg10 Object, arg11 Object, arg12 Object, arg13 Object, arg14 Object, arg15 Object, arg16 Object, arg17 Object, arg18 Object, arg19 Object, arg20 Object, args Object[]) : Object in class clojure.lang.RestFn"
2696;"397f768ca30a4615c753ec544dedc5c39be7743b";"a619d3a6f9cde068d0945ab26b275113c8ffde1b";"Move Method";"clojure.lang.PersistentListMap.Link.rest()";"clojure.lang.PersistentList.rest()";"Move Method public rest() : ISeq from class clojure.lang.PersistentListMap.Link to public rest() : ISeq from class clojure.lang.PersistentList"
2696;"397f768ca30a4615c753ec544dedc5c39be7743b";"a619d3a6f9cde068d0945ab26b275113c8ffde1b";"Move Method";"clojure.lang.PersistentListMap.Tail.rest()";"clojure.lang.PersistentListMap.Tail.Seq.rest()";"Move Method public rest() : ISeq from class clojure.lang.PersistentListMap.Tail to public rest() : ISeq from class clojure.lang.PersistentListMap.Tail.Seq"
2697;"a619d3a6f9cde068d0945ab26b275113c8ffde1b";"5572d24dae42bf686048a1add52437b4b3627ca0";"Rename Method";"clojure.lang.PersistentArrayList.remove()";"clojure.lang.PersistentArrayList.pop()";"Rename Method public remove() : PersistentArrayList renamed to public pop() : PersistentArrayList in class clojure.lang.PersistentArrayList"
2699;"73f8a4754a43dfce194989457b54aceca5595979";"9213607263509ebc766e7bcf082784ec8ae19bfd";"Rename Class";"clojure.lang.AnArray";"clojure.lang.APersistentArray";"Rename Class clojure.lang.AnArray renamed to clojure.lang.APersistentArray"
2699;"73f8a4754a43dfce194989457b54aceca5595979";"9213607263509ebc766e7bcf082784ec8ae19bfd";"Rename Class";"clojure.lang.IArray";"clojure.lang.IPersistentArray";"Rename Class clojure.lang.IArray renamed to clojure.lang.IPersistentArray"
2701;"279dd21d4b919496c8fb54c3135f2b82cc36f5c2";"da11eb9d0dd587e532470965b3c655b741d1fa5c";"Rename Method";"clojure.lang.PersistentArrayList.add(Object)";"clojure.lang.PersistentArrayList.cons(Object)";"Rename Method public add(val Object) : PersistentArrayList renamed to public cons(val Object) : PersistentArrayList in class clojure.lang.PersistentArrayList"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.MapEntry.add(Object,Object)";"clojure.lang.MapEntry.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : IPersistentMap renamed to public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.MapEntry"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.MapEntry.remove(Object)";"clojure.lang.MapEntry.without(Object)";"Rename Method public remove(key Object) : IPersistentMap renamed to public without(key Object) : IPersistentMap in class clojure.lang.MapEntry"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentArrayMap.remove(Object)";"clojure.lang.PersistentArrayMap.without(Object)";"Rename Method public remove(key Object) : IPersistentMap renamed to public without(key Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.add(Object,Object)";"clojure.lang.PersistentListMap.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : IPersistentMap renamed to public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentListMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.remove(Object)";"clojure.lang.PersistentListMap.without(Object)";"Rename Method public remove(key Object) : PersistentListMap renamed to public without(key Object) : PersistentListMap in class clojure.lang.PersistentListMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.Link.add(Object,Object)";"clojure.lang.PersistentListMap.Link.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : PersistentListMap renamed to public assocEx(key Object, val Object) : PersistentListMap in class clojure.lang.PersistentListMap.Link"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.Tail.add(Object,Object)";"clojure.lang.PersistentListMap.Tail.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : PersistentListMap renamed to public assocEx(key Object, val Object) : PersistentListMap in class clojure.lang.PersistentListMap.Tail"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.Tail.remove(Object)";"clojure.lang.PersistentListMap.Tail.without(Object)";"Rename Method public remove(key Object) : PersistentListMap renamed to public without(key Object) : PersistentListMap in class clojure.lang.PersistentListMap.Tail"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentTreeMap.add(Object,Object)";"clojure.lang.PersistentTreeMap.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : PersistentTreeMap renamed to public assocEx(key Object, val Object) : PersistentTreeMap in class clojure.lang.PersistentTreeMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentTreeMap.remove(Object)";"clojure.lang.PersistentTreeMap.without(Object)";"Rename Method public remove(key Object) : PersistentTreeMap renamed to public without(key Object) : PersistentTreeMap in class clojure.lang.PersistentTreeMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentArrayMap.add(Object,Object)";"clojure.lang.PersistentArrayMap.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : IPersistentMap renamed to public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentHashtableMap.remove(Object)";"clojure.lang.PersistentHashtableMap.without(Object)";"Rename Method public remove(key Object) : IPersistentMap renamed to public without(key Object) : IPersistentMap in class clojure.lang.PersistentHashtableMap"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentListMap.Link.remove(Object)";"clojure.lang.PersistentListMap.Link.without(Object)";"Rename Method public remove(key Object) : PersistentListMap renamed to public without(key Object) : PersistentListMap in class clojure.lang.PersistentListMap.Link"
2703;"db58898d1d44d8025208bb5f0b2c4a493a5cdb43";"cfbe0fe8a1adaf7b16f37d92545c89230256221d";"Rename Method";"clojure.lang.PersistentHashtableMap.add(Object,Object)";"clojure.lang.PersistentHashtableMap.assocEx(Object,Object)";"Rename Method public add(key Object, val Object) : IPersistentMap renamed to public assocEx(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentHashtableMap"
2705;"a8ba1dbdec6976596e005b7ffe2d06355280a10f";"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"Extract Superclass";"clojure.lang.PersistentArray";"clojure.lang.AnArray";"Extract Superclass clojure.lang.AnArray from class clojure.lang.PersistentArray"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentArray.get(int)";"clojure.lang.PersistentArray.nth(int)";"Rename Method public get(i int) : Object renamed to public nth(i int) : Object in class clojure.lang.PersistentArray"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentArray.set(int,Object)";"clojure.lang.PersistentArray.assocN(int,Object)";"Rename Method public set(i int, val Object) : PersistentArray renamed to public assocN(i int, val Object) : PersistentArray in class clojure.lang.PersistentArray"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentListMap.put(Object,Object)";"clojure.lang.PersistentListMap.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : PersistentListMap renamed to public assoc(key Object, val Object) : PersistentListMap in class clojure.lang.PersistentListMap"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentListMap.Link.put(Object,Object)";"clojure.lang.PersistentListMap.Link.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : PersistentListMap renamed to public assoc(key Object, val Object) : PersistentListMap in class clojure.lang.PersistentListMap.Link"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentListMap.Tail.put(Object,Object)";"clojure.lang.PersistentListMap.Tail.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : PersistentListMap renamed to public assoc(key Object, val Object) : PersistentListMap in class clojure.lang.PersistentListMap.Tail"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentTreeMap.put(Object,Object)";"clojure.lang.PersistentTreeMap.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : PersistentTreeMap renamed to public assoc(key Object, val Object) : PersistentTreeMap in class clojure.lang.PersistentTreeMap"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.Tuple.get(int)";"clojure.lang.Tuple.nth(int)";"Rename Method public get(i int) : Object renamed to public nth(i int) : Object in class clojure.lang.Tuple"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.Tuple.set(int,Object)";"clojure.lang.Tuple.assocN(int,Object)";"Rename Method public set(i int, val Object) : IArray renamed to public assocN(i int, val Object) : IArray in class clojure.lang.Tuple"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentArrayMap.put(Object,Object)";"clojure.lang.PersistentArrayMap.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : IPersistentMap renamed to public assoc(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentHashtableMap.put(Object,Object)";"clojure.lang.PersistentHashtableMap.assoc(Object,Object)";"Rename Method public put(key Object, val Object) : IPersistentMap renamed to public assoc(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentHashtableMap"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentArrayList.set(int,Object)";"clojure.lang.PersistentArrayList.assocN(int,Object)";"Rename Method public set(i int, val Object) : PersistentArrayList renamed to public assocN(i int, val Object) : PersistentArrayList in class clojure.lang.PersistentArrayList"
2706;"cdd429f0d51b754ed0d2f4ab4cd9b90d320a3c0e";"ee19adc3e5bc9e5b525dac99e9281f3db30d3ece";"Rename Method";"clojure.lang.PersistentArrayList.get(int)";"clojure.lang.PersistentArrayList.nth(int)";"Rename Method public get(i int) : Object renamed to public nth(i int) : Object in class clojure.lang.PersistentArrayList"
2709;"ae23e1e284833c61924cc09f4053ded4cc96cc44";"b47c234ac5a398894c8f3ce5dc7c06a5e7926e10";"Extract Interface";"clojure.lang.IPersistentMap";"clojure.lang.Associative";"Extract Interface clojure.lang.Associative from class clojure.lang.IPersistentMap"
2710;"b47c234ac5a398894c8f3ce5dc7c06a5e7926e10";"8c2c0ea39e31c05863a5f0d07fb3916a345c3da8";"Rename Class";"clojure.lang.ISequential";"clojure.lang.IPersistentCollection";"Rename Class clojure.lang.ISequential renamed to clojure.lang.IPersistentCollection"
2713;"df7b30a6c1dfd253d63786ed8277ab43329a11dd";"0c422d65c6dc16d9e2887695ee5f6fa3e07fe617";"Extract Method";"clojure.lang.Accessor.invoke(Object,Object,Object,Object,Object,Object[])";"clojure.lang.Reflector.invokeInstanceMember(String,Object,Object[])";"Extract Method public invokeInstanceMember(name String, target Object, args Object[]) : Object extracted from public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Object[]) : Object in class clojure.lang.Accessor"
2718;"97a189bf60c4f4186a51cff166bbaa4f157be3b1";"38f212abb55f9f660210f24a2b64cf919496c8ec";"Rename Class";"clojure.lang.PersistentTree";"clojure.lang.PersistentTreeMap";"Rename Class clojure.lang.PersistentTree renamed to clojure.lang.PersistentTreeMap"
2722;"3224d6ff2e2e28a6e283a3106992dc0545d4e1b6";"2e0a542ba24109004ec523f5897418105f1fcd8c";"Extract Method";"clojure.lang.PersistentArray.getSetArray()";"clojure.lang.PersistentArray.create(Master,int,int,BitSet)";"Extract Method protected create(master Master, rev int, baseline int, history BitSet) : PersistentArray extracted from private getSetArray() : PersistentArray in class clojure.lang.PersistentArray"
2722;"3224d6ff2e2e28a6e283a3106992dc0545d4e1b6";"2e0a542ba24109004ec523f5897418105f1fcd8c";"Extract Method";"clojure.lang.PersistentArray.resize(int)";"clojure.lang.PersistentArray.create(int,Object,float)";"Extract Method protected create(size int, defaultVal Object, loadFactor float) : PersistentArray extracted from public resize(newLength int) : PersistentArray in class clojure.lang.PersistentArray"
2725;"e5dcae7b0a24af84476b1192563fa149ad6a4a96";"84406ba09fe16b4b56b5ce40de33f8bee340a947";"Move Method";"clojure.lang.ThreadLocalData.setTransaction(Transaction)";"clojure.lang.Transaction.setTransaction(Transaction)";"Move Method public setTransaction(t Transaction) : void from class clojure.lang.ThreadLocalData to package setTransaction(t Transaction) : void from class clojure.lang.Transaction"
2725;"e5dcae7b0a24af84476b1192563fa149ad6a4a96";"84406ba09fe16b4b56b5ce40de33f8bee340a947";"Move Attribute";"clojure.lang.ThreadLocalData.transaction";"clojure.lang.Transaction.transaction";"Move Attribute private transaction : ThreadLocal from class clojure.lang.ThreadLocalData to class clojure.lang.Transaction"
2728;"299745acaf1cf2671c30915a2f6ac9a3fc8fca49";"45928ffe7f2b9e59633fb7931f2a3c75c9d6589f";"Rename Method";"clojure.lang.Obj.putAttr(Object,Object)";"clojure.lang.Obj.addAttr(Object,Object)";"Rename Method public putAttr(key Object, val Object) : Object renamed to public addAttr(key Object, val Object) : Object in class clojure.lang.Obj"
2732;"ae623590ccb2fd017d67637b2f52e747b9b4ad73";"1ebfb2b8cf60011222bc61f065954641f8cbd28e";"Extract Method";"clojure.lang.PersistentArrayMap.put(Object,Object)";"clojure.lang.PersistentArrayMap.create(Object[])";"Extract Method package create(init Object[]) : PersistentArrayMap extracted from public put(key Object, val Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2732;"ae623590ccb2fd017d67637b2f52e747b9b4ad73";"1ebfb2b8cf60011222bc61f065954641f8cbd28e";"Extract Method";"clojure.lang.PersistentArrayMap.remove(Object)";"clojure.lang.PersistentArrayMap.create(Object[])";"Extract Method package create(init Object[]) : PersistentArrayMap extracted from public remove(key Object) : IPersistentMap in class clojure.lang.PersistentArrayMap"
2740;"0d697a5d3edb1551353f6fad0a4c98b8d803b106";"89fc0caa43811c7dfcb47a29aa59e78d295e6a1c";"Extract Interface";"clojure.lang.PersistentArray";"clojure.lang.IArray";"Extract Interface clojure.lang.IArray from class clojure.lang.PersistentArray"
2740;"0d697a5d3edb1551353f6fad0a4c98b8d803b106";"89fc0caa43811c7dfcb47a29aa59e78d295e6a1c";"Extract Interface";"clojure.lang.ArraySeq";"clojure.lang.IndexedSeq";"Extract Interface clojure.lang.IndexedSeq from class clojure.lang.ArraySeq"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.Obj.get(Object)";"clojure.lang.Obj.getAttr(Object)";"Rename Method public get(key Object) : Object renamed to public getAttr(key Object) : Object in class clojure.lang.Obj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.Obj.has(Object)";"clojure.lang.Obj.hasAttr(Object)";"Rename Method public has(key Object) : boolean renamed to public hasAttr(key Object) : boolean in class clojure.lang.Obj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.Obj.put(Object,Object)";"clojure.lang.Obj.putAttr(Object,Object)";"Rename Method public put(key Object, val Object) : Object renamed to public putAttr(key Object, val Object) : Object in class clojure.lang.Obj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.Obj.remove(Object)";"clojure.lang.Obj.removeAttr(Object)";"Rename Method public remove(key Object) : void renamed to public removeAttr(key Object) : void in class clojure.lang.Obj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.TObj.get(Object)";"clojure.lang.TObj.getAttr(Object)";"Rename Method public get(key Object) : Object renamed to public getAttr(key Object) : Object in class clojure.lang.TObj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.TObj.has(Object)";"clojure.lang.TObj.hasAttr(Object)";"Rename Method public has(key Object) : boolean renamed to public hasAttr(key Object) : boolean in class clojure.lang.TObj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.TObj.put(Object,Object)";"clojure.lang.TObj.putAttr(Object,Object)";"Rename Method public put(key Object, val Object) : Object renamed to public putAttr(key Object, val Object) : Object in class clojure.lang.TObj"
2745;"a00179b2fb6cc09f87efbe8100fb17a7dd34a920";"f127034f649276cb1bcde4fea50e6be4637dd5d0";"Rename Method";"clojure.lang.TObj.remove(Object)";"clojure.lang.TObj.removeAttr(Object)";"Rename Method public remove(key Object) : void renamed to public removeAttr(key Object) : void in class clojure.lang.TObj"
2746;"f127034f649276cb1bcde4fea50e6be4637dd5d0";"01820bfb5829d8be3bdafdf8fae8046f339a0949";"Extract Method";"clojure.lang.Transaction.commutate(TRef,IFn)";"clojure.lang.Transaction.doCommutate(TRef,IFn)";"Extract Method package doCommutate(tref TRef, fn IFn) : void extracted from package commutate(tref TRef, fn IFn) : void in class clojure.lang.Transaction"
2746;"f127034f649276cb1bcde4fea50e6be4637dd5d0";"01820bfb5829d8be3bdafdf8fae8046f339a0949";"Extract Method";"clojure.lang.Transaction.get(TRef)";"clojure.lang.Transaction.doGet(TRef)";"Extract Method package doGet(tref TRef) : Object extracted from package get(tref TRef) : Object in class clojure.lang.Transaction"
2746;"f127034f649276cb1bcde4fea50e6be4637dd5d0";"01820bfb5829d8be3bdafdf8fae8046f339a0949";"Extract Method";"clojure.lang.Transaction.set(TRef,Object)";"clojure.lang.Transaction.doSet(TRef,Object)";"Extract Method package doSet(tref TRef, val Object) : Object extracted from package set(tref TRef, val Object) : Object in class clojure.lang.Transaction"
2746;"f127034f649276cb1bcde4fea50e6be4637dd5d0";"01820bfb5829d8be3bdafdf8fae8046f339a0949";"Extract Method";"clojure.lang.Transaction.touch(TRef)";"clojure.lang.Transaction.doTouch(TRef)";"Extract Method package doTouch(tref TRef) : void extracted from package touch(tref TRef) : void in class clojure.lang.Transaction"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.AFn";"clojure.lang.AFn";"Move Class clojure.runtime.AFn moved to clojure.lang.AFn"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.AGenerator";"clojure.lang.AGenerator";"Move Class clojure.runtime.AGenerator moved to clojure.lang.AGenerator"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Accessor";"clojure.lang.Accessor";"Move Class clojure.runtime.Accessor moved to clojure.lang.Accessor"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.BigNum";"clojure.lang.BigNum";"Move Class clojure.runtime.BigNum moved to clojure.lang.BigNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Binding";"clojure.lang.Binding";"Move Class clojure.runtime.Binding moved to clojure.lang.Binding"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Box";"clojure.lang.Box";"Move Class clojure.runtime.Box moved to clojure.lang.Box"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Cons";"clojure.lang.Cons";"Move Class clojure.runtime.Cons moved to clojure.lang.Cons"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.DoubleNum";"clojure.lang.DoubleNum";"Move Class clojure.runtime.DoubleNum moved to clojure.lang.DoubleNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.FixNum";"clojure.lang.FixNum";"Move Class clojure.runtime.FixNum moved to clojure.lang.FixNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.FloatNum";"clojure.lang.FloatNum";"Move Class clojure.runtime.FloatNum moved to clojure.lang.FloatNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.FnSeq";"clojure.lang.FnSeq";"Move Class clojure.runtime.FnSeq moved to clojure.lang.FnSeq"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IFn";"clojure.lang.IFn";"Move Class clojure.runtime.IFn moved to clojure.lang.IFn"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IMapEntry";"clojure.lang.IMapEntry";"Move Class clojure.runtime.IMapEntry moved to clojure.lang.IMapEntry"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IObj";"clojure.lang.IObj";"Move Class clojure.runtime.IObj moved to clojure.lang.IObj"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IPersistentMap";"clojure.lang.IPersistentMap";"Move Class clojure.runtime.IPersistentMap moved to clojure.lang.IPersistentMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.ISeq";"clojure.lang.ISeq";"Move Class clojure.runtime.ISeq moved to clojure.lang.ISeq"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.ISequential";"clojure.lang.ISequential";"Move Class clojure.runtime.ISequential moved to clojure.lang.ISequential"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Indexer";"clojure.lang.Indexer";"Move Class clojure.runtime.Indexer moved to clojure.lang.Indexer"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IntegerNum";"clojure.lang.IntegerNum";"Move Class clojure.runtime.IntegerNum moved to clojure.lang.IntegerNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Iter";"clojure.lang.Iter";"Move Class clojure.runtime.Iter moved to clojure.lang.Iter"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.IteratorIter";"clojure.lang.IteratorIter";"Move Class clojure.runtime.IteratorIter moved to clojure.lang.IteratorIter"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Keyword";"clojure.lang.Keyword";"Move Class clojure.runtime.Keyword moved to clojure.lang.Keyword"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.LineNumberingPushbackReader";"clojure.lang.LineNumberingPushbackReader";"Move Class clojure.runtime.LineNumberingPushbackReader moved to clojure.lang.LineNumberingPushbackReader"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Namespace";"clojure.lang.Namespace";"Move Class clojure.runtime.Namespace moved to clojure.lang.Namespace"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Num";"clojure.lang.Num";"Move Class clojure.runtime.Num moved to clojure.lang.Num"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Obj";"clojure.lang.Obj";"Move Class clojure.runtime.Obj moved to clojure.lang.Obj"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentArray";"clojure.lang.PersistentArray";"Move Class clojure.runtime.PersistentArray moved to clojure.lang.PersistentArray"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentArrayIdentityMap";"clojure.lang.PersistentArrayIdentityMap";"Move Class clojure.runtime.PersistentArrayIdentityMap moved to clojure.lang.PersistentArrayIdentityMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentArrayMap";"clojure.lang.PersistentArrayMap";"Move Class clojure.runtime.PersistentArrayMap moved to clojure.lang.PersistentArrayMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentHashtableIdentityMap";"clojure.lang.PersistentHashtableIdentityMap";"Move Class clojure.runtime.PersistentHashtableIdentityMap moved to clojure.lang.PersistentHashtableIdentityMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentHashtableMap";"clojure.lang.PersistentHashtableMap";"Move Class clojure.runtime.PersistentHashtableMap moved to clojure.lang.PersistentHashtableMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentHybridIdentityMap";"clojure.lang.PersistentHybridIdentityMap";"Move Class clojure.runtime.PersistentHybridIdentityMap moved to clojure.lang.PersistentHybridIdentityMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentHybridMap";"clojure.lang.PersistentHybridMap";"Move Class clojure.runtime.PersistentHybridMap moved to clojure.lang.PersistentHybridMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentListIdentityMap";"clojure.lang.PersistentListIdentityMap";"Move Class clojure.runtime.PersistentListIdentityMap moved to clojure.lang.PersistentListIdentityMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentListMap";"clojure.lang.PersistentListMap";"Move Class clojure.runtime.PersistentListMap moved to clojure.lang.PersistentListMap"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.PersistentTree";"clojure.lang.PersistentTree";"Move Class clojure.runtime.PersistentTree moved to clojure.lang.PersistentTree"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RT";"clojure.lang.RT";"Move Class clojure.runtime.RT moved to clojure.lang.RT"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RatioNum";"clojure.lang.RatioNum";"Move Class clojure.runtime.RatioNum moved to clojure.lang.RatioNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RationalNum";"clojure.lang.RationalNum";"Move Class clojure.runtime.RationalNum moved to clojure.lang.RationalNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RealNum";"clojure.lang.RealNum";"Move Class clojure.runtime.RealNum moved to clojure.lang.RealNum"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Reflector";"clojure.lang.Reflector";"Move Class clojure.runtime.Reflector moved to clojure.lang.Reflector"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn0";"clojure.lang.RestFn0";"Move Class clojure.runtime.RestFn0 moved to clojure.lang.RestFn0"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn1";"clojure.lang.RestFn1";"Move Class clojure.runtime.RestFn1 moved to clojure.lang.RestFn1"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn2";"clojure.lang.RestFn2";"Move Class clojure.runtime.RestFn2 moved to clojure.lang.RestFn2"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn3";"clojure.lang.RestFn3";"Move Class clojure.runtime.RestFn3 moved to clojure.lang.RestFn3"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn4";"clojure.lang.RestFn4";"Move Class clojure.runtime.RestFn4 moved to clojure.lang.RestFn4"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.RestFn5";"clojure.lang.RestFn5";"Move Class clojure.runtime.RestFn5 moved to clojure.lang.RestFn5"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Symbol";"clojure.lang.Symbol";"Move Class clojure.runtime.Symbol moved to clojure.lang.Symbol"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.TObj";"clojure.lang.TObj";"Move Class clojure.runtime.TObj moved to clojure.lang.TObj"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.TRef";"clojure.lang.TRef";"Move Class clojure.runtime.TRef moved to clojure.lang.TRef"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.TVal";"clojure.lang.TVal";"Move Class clojure.runtime.TVal moved to clojure.lang.TVal"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.ThreadLocalData";"clojure.lang.ThreadLocalData";"Move Class clojure.runtime.ThreadLocalData moved to clojure.lang.ThreadLocalData"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Transaction";"clojure.lang.Transaction";"Move Class clojure.runtime.Transaction moved to clojure.lang.Transaction"
2750;"63b40e8e3713954a366563594e548c9528008f45";"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"Move Class";"clojure.runtime.Var";"clojure.lang.Var";"Move Class clojure.runtime.Var moved to clojure.lang.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.AGenerator";"clojure.runtime.AGenerator";"Move Class org.clojure.runtime.AGenerator moved to clojure.runtime.AGenerator"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Box";"clojure.runtime.Box";"Move Class org.clojure.runtime.Box moved to clojure.runtime.Box"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.FloatNum";"clojure.runtime.FloatNum";"Move Class org.clojure.runtime.FloatNum moved to clojure.runtime.FloatNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.IMapEntry";"clojure.runtime.IMapEntry";"Move Class org.clojure.runtime.IMapEntry moved to clojure.runtime.IMapEntry"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Indexer";"clojure.runtime.Indexer";"Move Class org.clojure.runtime.Indexer moved to clojure.runtime.Indexer"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.IntegerNum";"clojure.runtime.IntegerNum";"Move Class org.clojure.runtime.IntegerNum moved to clojure.runtime.IntegerNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Iter";"clojure.runtime.Iter";"Move Class org.clojure.runtime.Iter moved to clojure.runtime.Iter"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.IteratorIter";"clojure.runtime.IteratorIter";"Move Class org.clojure.runtime.IteratorIter moved to clojure.runtime.IteratorIter"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.LineNumberingPushbackReader";"clojure.runtime.LineNumberingPushbackReader";"Move Class org.clojure.runtime.LineNumberingPushbackReader moved to clojure.runtime.LineNumberingPushbackReader"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Namespace";"clojure.runtime.Namespace";"Move Class org.clojure.runtime.Namespace moved to clojure.runtime.Namespace"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.RationalNum";"clojure.runtime.RationalNum";"Move Class org.clojure.runtime.RationalNum moved to clojure.runtime.RationalNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.RealNum";"clojure.runtime.RealNum";"Move Class org.clojure.runtime.RealNum moved to clojure.runtime.RealNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Symbol";"clojure.runtime.Symbol";"Move Class org.clojure.runtime.Symbol moved to clojure.runtime.Symbol"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.TRef";"clojure.runtime.TRef";"Move Class org.clojure.runtime.TRef moved to clojure.runtime.TRef"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.TVal";"clojure.runtime.TVal";"Move Class org.clojure.runtime.TVal moved to clojure.runtime.TVal"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Reflector";"clojure.runtime.Reflector";"Move Class org.clojure.runtime.Reflector moved to clojure.runtime.Reflector"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Num";"clojure.runtime.Num";"Move Class org.clojure.runtime.Num moved to clojure.runtime.Num"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.FixNum";"clojure.runtime.FixNum";"Move Class org.clojure.runtime.FixNum moved to clojure.runtime.FixNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.RatioNum";"clojure.runtime.RatioNum";"Move Class org.clojure.runtime.RatioNum moved to clojure.runtime.RatioNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.DoubleNum";"clojure.runtime.DoubleNum";"Move Class org.clojure.runtime.DoubleNum moved to clojure.runtime.DoubleNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.BigNum";"clojure.runtime.BigNum";"Move Class org.clojure.runtime.BigNum moved to clojure.runtime.BigNum"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.PersistentArray";"clojure.runtime.PersistentArray";"Move Class org.clojure.runtime.PersistentArray moved to clojure.runtime.PersistentArray"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Transaction";"clojure.runtime.Transaction";"Move Class org.clojure.runtime.Transaction moved to clojure.runtime.Transaction"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Class";"org.clojure.runtime.Obj";"clojure.runtime.Obj";"Move Class org.clojure.runtime.Obj moved to clojure.runtime.Obj"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move And Rename Class";"org.clojure.runtime.RestFn2";"clojure.runtime.RestFn1";"Move And Rename Class org.clojure.runtime.RestFn2 moved to clojure.runtime.RestFn1"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move And Rename Class";"org.clojure.runtime.RestFn1";"clojure.runtime.RestFn2";"Move And Rename Class org.clojure.runtime.RestFn1 moved to clojure.runtime.RestFn2"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move And Rename Class";"org.clojure.runtime.RestFn4";"clojure.runtime.RestFn3";"Move And Rename Class org.clojure.runtime.RestFn4 moved to clojure.runtime.RestFn3"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move And Rename Class";"org.clojure.runtime.RestFn5";"clojure.runtime.RestFn4";"Move And Rename Class org.clojure.runtime.RestFn5 moved to clojure.runtime.RestFn4"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move And Rename Class";"org.clojure.runtime.AFn";"clojure.runtime.RestFn5";"Move And Rename Class org.clojure.runtime.AFn moved to clojure.runtime.RestFn5"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Rename Method";"org.clojure.runtime.AFn.applyToHelper(IFn,ThreadLocalData,Cons)";"clojure.runtime.RestFn5.applyTo(ISeq)";"Rename Method public applyToHelper(ifn IFn, tld ThreadLocalData, arglist Cons) : Object renamed to public applyTo(arglist ISeq) : Object in class clojure.runtime.RestFn5"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Rename Method";"org.clojure.runtime.Transaction.commutate(ThreadLocalData,TRef,IFn)";"clojure.runtime.Transaction.commutate2(TRef,IFn)";"Rename Method public commutate(tld ThreadLocalData, tref TRef, fn IFn) : void renamed to public commutate2(tref TRef, fn IFn) : void in class clojure.runtime.Transaction"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Rename Method";"org.clojure.runtime.Transaction.set(ThreadLocalData,TRef,Object)";"clojure.runtime.Transaction.set2(TRef,Object)";"Rename Method public set(tld ThreadLocalData, tref TRef, val Object) : Object renamed to public set2(tref TRef, val Object) : Object in class clojure.runtime.Transaction"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Rename Method";"org.clojure.runtime.Transaction.touch(ThreadLocalData,TRef)";"clojure.runtime.Transaction.touch2(TRef)";"Rename Method public touch(tld ThreadLocalData, tref TRef) : void renamed to public touch2(tref TRef) : void in class clojure.runtime.Transaction"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Rename Method";"org.clojure.runtime.Transaction.get(ThreadLocalData,TRef)";"clojure.runtime.Transaction.get2(TRef)";"Rename Method public get(tld ThreadLocalData, tref TRef) : Object renamed to public get2(tref TRef) : Object in class clojure.runtime.Transaction"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.AFn.invoke()";"Pull Up Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.AFn to public invoke() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.throwArity()";"clojure.runtime.AFn.throwArity()";"Pull Up Method public throwArity() : Object from class org.clojure.runtime.AFn to public throwArity() : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Pull Up Method";"org.clojure.runtime.AFn.applyTo(ThreadLocalData,Cons)";"clojure.runtime.AFn.applyTo(ISeq)";"Pull Up Method public applyTo(tld ThreadLocalData, arglist Cons) : Object from class org.clojure.runtime.AFn to public applyTo(arglist ISeq) : Object from class clojure.runtime.AFn"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData) : Object from class org.clojure.runtime.Accessor to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object)";"clojure.runtime.Accessor.invoke(Object)";"Move Method public invoke(tld ThreadLocalData, obj Object) : Object from class org.clojure.runtime.Accessor to public invoke(obj Object) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.Accessor.invoke(Object,Object)";"Move Method public invoke(tld ThreadLocalData, obj Object, val Object) : Object from class org.clojure.runtime.Accessor to public invoke(obj Object, val Object) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.Accessor.invoke(Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.Accessor to public invoke(arg1 Object, arg2 Object, arg3 Object) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.Accessor.invoke(Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.Accessor to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.Accessor.invoke(Object,Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.Accessor to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.Accessor.invoke(Object,Object,Object,Object,Object,ISeq)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.Accessor to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args ISeq) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData) : Object from class org.clojure.runtime.Keyword to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.Keyword to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.Keyword to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.Keyword to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.Accessor.invoke()";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.Keyword to public invoke() : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.arrayToList(Object[])";"clojure.runtime.RT.arrayToList(Object[])";"Move Method public arrayToList(a Object[]) : Cons from class org.clojure.runtime.RT to public arrayToList(a Object[]) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.booleanCast(Object)";"clojure.runtime.RT.booleanCast(Object)";"Move Method public booleanCast(x Object) : boolean from class org.clojure.runtime.RT to public booleanCast(x Object) : boolean from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(Object)";"clojure.runtime.RT.box(Object)";"Move Method public box(x Object) : Object from class org.clojure.runtime.RT to public box(x Object) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(boolean)";"clojure.runtime.RT.box(boolean)";"Move Method public box(x boolean) : Boolean from class org.clojure.runtime.RT to public box(x boolean) : Boolean from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(byte)";"clojure.runtime.RT.box(byte)";"Move Method public box(x byte) : Byte from class org.clojure.runtime.RT to public box(x byte) : Byte from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(char)";"clojure.runtime.RT.box(char)";"Move Method public box(x char) : Character from class org.clojure.runtime.RT to public box(x char) : Character from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(double)";"clojure.runtime.RT.box(double)";"Move Method public box(x double) : Double from class org.clojure.runtime.RT to public box(x double) : Double from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(float)";"clojure.runtime.RT.box(float)";"Move Method public box(x float) : Float from class org.clojure.runtime.RT to public box(x float) : Float from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(int)";"clojure.runtime.RT.box(int)";"Move Method public box(x int) : Integer from class org.clojure.runtime.RT to public box(x int) : Integer from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(long)";"clojure.runtime.RT.box(long)";"Move Method public box(x long) : Long from class org.clojure.runtime.RT to public box(x long) : Long from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.box(short)";"clojure.runtime.RT.box(short)";"Move Method public box(x short) : Short from class org.clojure.runtime.RT to public box(x short) : Short from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.byteCast(Object)";"clojure.runtime.RT.byteCast(Object)";"Move Method public byteCast(x Object) : byte from class org.clojure.runtime.RT to public byteCast(x Object) : byte from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.charCast(Object)";"clojure.runtime.RT.charCast(Object)";"Move Method public charCast(x Object) : char from class org.clojure.runtime.RT to public charCast(x Object) : char from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.cons(Object,Cons)";"clojure.runtime.RT.cons(Object,ISeq)";"Move Method public cons(x Object, y Cons) : Cons from class org.clojure.runtime.RT to public cons(x Object, y ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.doubleCast(Object)";"clojure.runtime.RT.doubleCast(Object)";"Move Method public doubleCast(x Object) : double from class org.clojure.runtime.RT to public doubleCast(x Object) : double from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.eq(Object,Object)";"clojure.runtime.RT.eq(Object,Object)";"Move Method public eq(arg1 Object, arg2 Object) : Object from class org.clojure.runtime.RT to public eq(arg1 Object, arg2 Object) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.eql(Object,Object)";"clojure.runtime.RT.eql(Object,Object)";"Move Method public eql(arg1 Object, arg2 Object) : Object from class org.clojure.runtime.RT to public eql(arg1 Object, arg2 Object) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.floatCast(Object)";"clojure.runtime.RT.floatCast(Object)";"Move Method public floatCast(x Object) : float from class org.clojure.runtime.RT to public floatCast(x Object) : float from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.getLineNumber(Reader)";"clojure.runtime.RT.getLineNumber(Reader)";"Move Method public getLineNumber(r Reader) : int from class org.clojure.runtime.RT to public getLineNumber(r Reader) : int from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.getLineNumberingReader(Reader)";"clojure.runtime.RT.getLineNumberingReader(Reader)";"Move Method public getLineNumberingReader(r Reader) : Reader from class org.clojure.runtime.RT to public getLineNumberingReader(r Reader) : Reader from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.intCast(Object)";"clojure.runtime.RT.intCast(Object)";"Move Method public intCast(x Object) : int from class org.clojure.runtime.RT to public intCast(x Object) : int from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.isLineNumberingReader(Reader)";"clojure.runtime.RT.isLineNumberingReader(Reader)";"Move Method public isLineNumberingReader(r Reader) : boolean from class org.clojure.runtime.RT to public isLineNumberingReader(r Reader) : boolean from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.iter(Object)";"clojure.runtime.RT.iter(Object)";"Move Method public iter(coll Object) : Iter from class org.clojure.runtime.RT to public iter(coll Object) : Iter from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list()";"clojure.runtime.RT.list()";"Move Method public list() : Cons from class org.clojure.runtime.RT to public list() : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list(Object)";"clojure.runtime.RT.list(Object)";"Move Method public list(arg1 Object) : Cons from class org.clojure.runtime.RT to public list(arg1 Object) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list(Object,Object)";"clojure.runtime.RT.list(Object,Object)";"Move Method public list(arg1 Object, arg2 Object) : Cons from class org.clojure.runtime.RT to public list(arg1 Object, arg2 Object) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list(Object,Object,Object)";"clojure.runtime.RT.list(Object,Object,Object)";"Move Method public list(arg1 Object, arg2 Object, arg3 Object) : Cons from class org.clojure.runtime.RT to public list(arg1 Object, arg2 Object, arg3 Object) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list(Object,Object,Object,Object)";"clojure.runtime.RT.list(Object,Object,Object,Object)";"Move Method public list(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Cons from class org.clojure.runtime.RT to public list(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.list(Object,Object,Object,Object,Object)";"clojure.runtime.RT.list(Object,Object,Object,Object,Object)";"Move Method public list(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Cons from class org.clojure.runtime.RT to public list(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.listStar(Object,Cons)";"clojure.runtime.RT.listStar(Object,ISeq)";"Move Method public listStar(arg1 Object, rest Cons) : Cons from class org.clojure.runtime.RT to public listStar(arg1 Object, rest ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.listStar(Object,Object,Cons)";"clojure.runtime.RT.listStar(Object,Object,ISeq)";"Move Method public listStar(arg1 Object, arg2 Object, rest Cons) : Cons from class org.clojure.runtime.RT to public listStar(arg1 Object, arg2 Object, rest ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.listStar(Object,Object,Object,Cons)";"clojure.runtime.RT.listStar(Object,Object,Object,ISeq)";"Move Method public listStar(arg1 Object, arg2 Object, arg3 Object, rest Cons) : Cons from class org.clojure.runtime.RT to public listStar(arg1 Object, arg2 Object, arg3 Object, rest ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.listStar(Object,Object,Object,Object,Cons)";"clojure.runtime.RT.listStar(Object,Object,Object,Object,ISeq)";"Move Method public listStar(arg1 Object, arg2 Object, arg3 Object, arg4 Object, rest Cons) : Cons from class org.clojure.runtime.RT to public listStar(arg1 Object, arg2 Object, arg3 Object, arg4 Object, rest ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.listStar(Object,Object,Object,Object,Object,Cons)";"clojure.runtime.RT.listStar(Object,Object,Object,Object,Object,ISeq)";"Move Method public listStar(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, rest Cons) : Cons from class org.clojure.runtime.RT to public listStar(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, rest ISeq) : Cons from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.longCast(Object)";"clojure.runtime.RT.longCast(Object)";"Move Method public longCast(x Object) : long from class org.clojure.runtime.RT to public longCast(x Object) : long from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.peekChar(Reader)";"clojure.runtime.RT.peekChar(Reader)";"Move Method public peekChar(r Reader) : Object from class org.clojure.runtime.RT to public peekChar(r Reader) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.readChar(Reader)";"clojure.runtime.RT.readChar(Reader)";"Move Method public readChar(r Reader) : Object from class org.clojure.runtime.RT to public readChar(r Reader) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.readRet(int)";"clojure.runtime.RT.readRet(int)";"Move Method package readRet(ret int) : Object from class org.clojure.runtime.RT to package readRet(ret int) : Object from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.shortCast(Object)";"clojure.runtime.RT.shortCast(Object)";"Move Method public shortCast(x Object) : short from class org.clojure.runtime.RT to public shortCast(x Object) : short from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.toString()";"clojure.runtime.Var.toString()";"Move Method public toString() : String from class org.clojure.runtime.Var to public toString() : String from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object,ISeq)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args ISeq) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object,ISeq)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.RestFn3 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args ISeq) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object,Object,Cons)";"clojure.runtime.Var.invoke(Object,Object,Object,Object,Object,ISeq)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args Cons) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object, args ISeq) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object)";"clojure.runtime.Keyword.invoke(Object)";"Move Method public invoke(tld ThreadLocalData, obj Object) : Object from class org.clojure.runtime.Keyword to public invoke(obj Object) : Object from class clojure.runtime.Keyword"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.RestFn3 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.bind(Object)";"clojure.runtime.Var.bind(Object)";"Move Method public bind(val Object) : Var from class org.clojure.runtime.Var to public bind(val Object) : Var from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object,Object)";"clojure.runtime.Var.invoke(Object,Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.RestFn3 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.boundedLength(Cons,int)";"clojure.runtime.RT.boundedLength(ISeq,int)";"Move Method public boundedLength(list Cons, limit int) : int from class org.clojure.runtime.RT to public boundedLength(list ISeq, limit int) : int from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object,Object)";"clojure.runtime.Var.invoke(Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.Keyword.invoke(Object,Object)";"Move Method public invoke(tld ThreadLocalData, obj Object, val Object) : Object from class org.clojure.runtime.Keyword to public invoke(obj Object, val Object) : Object from class clojure.runtime.Keyword"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object, arg2 Object, arg3 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.Var.invoke(Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object, arg2 Object, arg3 Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RT.length(Cons)";"clojure.runtime.RT.length(ISeq)";"Move Method public length(list Cons) : int from class org.clojure.runtime.RT to public length(list ISeq) : int from class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Accessor.applyTo(ThreadLocalData,Cons)";"clojure.runtime.Accessor.applyTo(ISeq)";"Move Method public applyTo(tld ThreadLocalData, arglist Cons) : Object from class org.clojure.runtime.Accessor to public applyTo(arglist ISeq) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Keyword.applyTo(ThreadLocalData,Cons)";"clojure.runtime.Accessor.applyTo(ISeq)";"Move Method public applyTo(tld ThreadLocalData, arglist Cons) : Object from class org.clojure.runtime.Keyword to public applyTo(arglist ISeq) : Object from class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.setValue(ThreadLocalData,Object)";"clojure.runtime.Var.setValue(Object)";"Move Method public setValue(tld ThreadLocalData, val Object) : Object from class org.clojure.runtime.Var to public setValue(val Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.getValue(ThreadLocalData)";"clojure.runtime.Var.getValue()";"Move Method public getValue(tld ThreadLocalData) : Object from class org.clojure.runtime.Var to public getValue() : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object, arg2 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn1.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.RestFn0.invoke(Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object) : Object from class org.clojure.runtime.RestFn1 to public invoke(arg1 Object, arg2 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object,Object)";"clojure.runtime.Var.invoke(Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object, arg2 Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData,Object)";"clojure.runtime.RestFn0.invoke(Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object) : Object from class org.clojure.runtime.RestFn0 to public invoke(arg1 Object) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData)";"clojure.runtime.Var.invoke()";"Move Method public invoke(tld ThreadLocalData) : Object from class org.clojure.runtime.Var to public invoke() : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.invoke(ThreadLocalData,Object)";"clojure.runtime.Var.invoke(Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object) : Object from class org.clojure.runtime.Var to public invoke(arg1 Object) : Object from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.applyTo(ThreadLocalData,Cons)";"clojure.runtime.RestFn0.applyTo(ISeq)";"Move Method public applyTo(tld ThreadLocalData, arglist Cons) : Object from class org.clojure.runtime.RestFn0 to public applyTo(arglist ISeq) : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn3.invoke(ThreadLocalData,Object,Object,Object)";"clojure.runtime.RestFn5.invoke(Object,Object,Object,Object,Object)";"Move Method public invoke(tld ThreadLocalData, arg1 Object, arg2 Object, arg3 Object) : Object from class org.clojure.runtime.RestFn3 to public invoke(arg1 Object, arg2 Object, arg3 Object, arg4 Object, arg5 Object) : Object from class clojure.runtime.RestFn5"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.RestFn0.invoke(ThreadLocalData)";"clojure.runtime.RestFn0.invoke()";"Move Method public invoke(tld ThreadLocalData) : Object from class org.clojure.runtime.RestFn0 to public invoke() : Object from class clojure.runtime.RestFn0"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.Var.getBinding(ThreadLocalData)";"clojure.runtime.Var.getBinding()";"Move Method public getBinding(tld ThreadLocalData) : Box from class org.clojure.runtime.Var to private getBinding() : Binding from class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.TObj.put(ThreadLocalData,Comparable,Object)";"clojure.runtime.TObj.put(Comparable,Object)";"Move Method public put(tld ThreadLocalData, key Comparable, val Object) : Object from class org.clojure.runtime.TObj to public put(key Comparable, val Object) : Object from class clojure.runtime.TObj"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.TObj.has(ThreadLocalData,Comparable)";"clojure.runtime.TObj.has(Comparable)";"Move Method public has(tld ThreadLocalData, key Comparable) : boolean from class org.clojure.runtime.TObj to public has(key Comparable) : boolean from class clojure.runtime.TObj"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Method";"org.clojure.runtime.TObj.get(ThreadLocalData,Comparable)";"clojure.runtime.TObj.get(Comparable)";"Move Method public get(tld ThreadLocalData, key Comparable) : Object from class org.clojure.runtime.TObj to public get(key Comparable) : Object from class clojure.runtime.TObj"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.Accessor.memberName";"clojure.runtime.Accessor.memberName";"Move Attribute package memberName : String from class org.clojure.runtime.Accessor to class clojure.runtime.Accessor"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.RT.T";"clojure.runtime.RT.T";"Move Attribute public T : Symbol from class org.clojure.runtime.RT to class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.RT.chars";"clojure.runtime.RT.chars";"Move Attribute public chars : Character[] from class org.clojure.runtime.RT to class clojure.runtime.RT"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.Var.namespace";"clojure.runtime.Var.namespace";"Move Attribute public namespace : Namespace from class org.clojure.runtime.Var to class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.Var.sym";"clojure.runtime.Var.sym";"Move Attribute public sym : Symbol from class org.clojure.runtime.Var to class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.Var.fn";"clojure.runtime.Var.fn";"Move Attribute public fn : IFn from class org.clojure.runtime.Var to class clojure.runtime.Var"
2751;"6aed462896af74c4a6e692147dcf8fab6b5b6cbd";"d1a992e60915cf5715e7b796e340f18cfe9df0bf";"Move Attribute";"org.clojure.runtime.RT.EMPTY_ARRAY";"clojure.runtime.RT.EMPTY_ARRAY";"Move Attribute public EMPTY_ARRAY : Object[] from class org.clojure.runtime.RT to class clojure.runtime.RT"
2758;"ffa804456f68b721997a1a12fa98d8c9cb9d0079";"37ac3ad43d5dd08fddcbe701c82d3f28ac8f6261";"Rename Method";"org.clojure.runtime.Transaction.commutate(ThreadLocalData,TRef,IFn)";"org.clojure.runtime.Transaction.commutate2(TRef,IFn)";"Rename Method public commutate(tld ThreadLocalData, tref TRef, fn IFn) : void renamed to public commutate2(tref TRef, fn IFn) : void in class org.clojure.runtime.Transaction"
2758;"ffa804456f68b721997a1a12fa98d8c9cb9d0079";"37ac3ad43d5dd08fddcbe701c82d3f28ac8f6261";"Rename Method";"org.clojure.runtime.Transaction.set(ThreadLocalData,TRef,Object)";"org.clojure.runtime.Transaction.set2(TRef,Object)";"Rename Method public set(tld ThreadLocalData, tref TRef, val Object) : Object renamed to public set2(tref TRef, val Object) : Object in class org.clojure.runtime.Transaction"
2758;"ffa804456f68b721997a1a12fa98d8c9cb9d0079";"37ac3ad43d5dd08fddcbe701c82d3f28ac8f6261";"Rename Method";"org.clojure.runtime.Transaction.touch(ThreadLocalData,TRef)";"org.clojure.runtime.Transaction.touch2(TRef)";"Rename Method public touch(tld ThreadLocalData, tref TRef) : void renamed to public touch2(tref TRef) : void in class org.clojure.runtime.Transaction"
2758;"ffa804456f68b721997a1a12fa98d8c9cb9d0079";"37ac3ad43d5dd08fddcbe701c82d3f28ac8f6261";"Rename Method";"org.clojure.runtime.Transaction.get(ThreadLocalData,TRef)";"org.clojure.runtime.Transaction.get2(TRef)";"Rename Method public get(tld ThreadLocalData, tref TRef) : Object renamed to public get2(tref TRef) : Object in class org.clojure.runtime.Transaction"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListIdentityMap.rest()";"org.clojure.runtime.PersistentListIdentityMap.next()";"Rename Method package rest() : PersistentListIdentityMap renamed to package next() : PersistentListIdentityMap in class org.clojure.runtime.PersistentListIdentityMap"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListIdentityMap.Link.rest()";"org.clojure.runtime.PersistentListIdentityMap.Link.next()";"Rename Method package rest() : PersistentListIdentityMap renamed to package next() : PersistentListIdentityMap in class org.clojure.runtime.PersistentListIdentityMap.Link"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListIdentityMap.Tail.rest()";"org.clojure.runtime.PersistentListIdentityMap.Tail.next()";"Rename Method package rest() : PersistentListIdentityMap renamed to package next() : PersistentListIdentityMap in class org.clojure.runtime.PersistentListIdentityMap.Tail"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListMap.rest()";"org.clojure.runtime.PersistentListMap.next()";"Rename Method package rest() : PersistentListMap renamed to package next() : PersistentListMap in class org.clojure.runtime.PersistentListMap"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListMap.Link.rest()";"org.clojure.runtime.PersistentListMap.Link.next()";"Rename Method package rest() : PersistentListMap renamed to package next() : PersistentListMap in class org.clojure.runtime.PersistentListMap.Link"
2767;"abb9f4e91313a368103e73f729de5792d3c5e435";"4f72b81de88948e149af93dd96406e4f519e15c6";"Rename Method";"org.clojure.runtime.PersistentListMap.Tail.rest()";"org.clojure.runtime.PersistentListMap.Tail.next()";"Rename Method package rest() : PersistentListMap renamed to package next() : PersistentListMap in class org.clojure.runtime.PersistentListMap.Tail"
2781;"75fea82cbfc2a2d1104bba264e3f3f3b51203735";"1b7ed50694b64f33303145d1c78d8f07481a9560";"Rename Class";"org.clojure.runtime.PersistentIdentityListMap";"org.clojure.runtime.PersistentListIdentityMap";"Rename Class org.clojure.runtime.PersistentIdentityListMap renamed to org.clojure.runtime.PersistentListIdentityMap"
2781;"75fea82cbfc2a2d1104bba264e3f3f3b51203735";"1b7ed50694b64f33303145d1c78d8f07481a9560";"Rename Class";"org.clojure.runtime.PersistentIdentityHashtableMap";"org.clojure.runtime.PersistentHashtableIdentityMap";"Rename Class org.clojure.runtime.PersistentIdentityHashtableMap renamed to org.clojure.runtime.PersistentHashtableIdentityMap"
2781;"75fea82cbfc2a2d1104bba264e3f3f3b51203735";"1b7ed50694b64f33303145d1c78d8f07481a9560";"Rename Class";"org.clojure.runtime.PersistentIdentityArrayMap";"org.clojure.runtime.PersistentArrayIdentityMap";"Rename Class org.clojure.runtime.PersistentIdentityArrayMap renamed to org.clojure.runtime.PersistentArrayIdentityMap"
2782;"1b7ed50694b64f33303145d1c78d8f07481a9560";"f344502b48ebcf0546bf664de79049f5f4d573b9";"Move Method";"org.clojure.runtime.PersistentIdentityHashtableMap.createArrayMap(Object[])";"org.clojure.runtime.PersistentHybridIdentityMap.createArrayMap(Object[])";"Move Method package createArrayMap(init Object[]) : IPersistentMap from class org.clojure.runtime.PersistentIdentityHashtableMap to public createArrayMap(init Object[]) : PersistentArrayMap from class org.clojure.runtime.PersistentHybridIdentityMap"
2782;"1b7ed50694b64f33303145d1c78d8f07481a9560";"f344502b48ebcf0546bf664de79049f5f4d573b9";"Move Method";"org.clojure.runtime.PersistentHashtableMap.createArrayMap(Object[])";"org.clojure.runtime.PersistentHybridIdentityMap.createArrayMap(Object[])";"Move Method package createArrayMap(init Object[]) : IPersistentMap from class org.clojure.runtime.PersistentHashtableMap to public createArrayMap(init Object[]) : PersistentArrayMap from class org.clojure.runtime.PersistentHybridIdentityMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.RBTree";"org.clojure.runtime.PersistentTree";"Rename Class org.clojure.runtime.RBTree renamed to org.clojure.runtime.PersistentTree"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.ArrayMap";"org.clojure.runtime.PersistentArrayMap";"Rename Class org.clojure.runtime.ArrayMap renamed to org.clojure.runtime.PersistentArrayMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.HashtableMap";"org.clojure.runtime.PersistentHashtableMap";"Rename Class org.clojure.runtime.HashtableMap renamed to org.clojure.runtime.PersistentHashtableMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.ListMap";"org.clojure.runtime.PersistentListMap";"Rename Class org.clojure.runtime.ListMap renamed to org.clojure.runtime.PersistentListMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.PersistentHashMap";"org.clojure.runtime.PersistentHybridMap";"Rename Class org.clojure.runtime.PersistentHashMap renamed to org.clojure.runtime.PersistentHybridMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.IMap";"org.clojure.runtime.IPersistentMap";"Rename Class org.clojure.runtime.IMap renamed to org.clojure.runtime.IPersistentMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.IdentityArrayMap";"org.clojure.runtime.PersistentIdentityArrayMap";"Rename Class org.clojure.runtime.IdentityArrayMap renamed to org.clojure.runtime.PersistentIdentityArrayMap"
2783;"f344502b48ebcf0546bf664de79049f5f4d573b9";"e26f6aee5713bfef08d8b68959672896b44bbd2d";"Rename Class";"org.clojure.runtime.IdentityHashtableMap";"org.clojure.runtime.PersistentIdentityHashtableMap";"Rename Class org.clojure.runtime.IdentityHashtableMap renamed to org.clojure.runtime.PersistentIdentityHashtableMap"
2784;"e26f6aee5713bfef08d8b68959672896b44bbd2d";"380dab4620630c099e59e364371c8d64b7050916";"Extract Method";"org.clojure.runtime.ListMap.Link.remove(Object)";"org.clojure.runtime.ListMap.Link.create(Object,Object,ListMap)";"Extract Method package create(k Object, v Object, r ListMap) : ListMap extracted from public remove(key Object) : ListMap in class org.clojure.runtime.ListMap.Link"
2784;"e26f6aee5713bfef08d8b68959672896b44bbd2d";"380dab4620630c099e59e364371c8d64b7050916";"Extract Method";"org.clojure.runtime.ListMap.Link.put(Object,Object)";"org.clojure.runtime.ListMap.Link.create(Object,Object,ListMap)";"Extract Method package create(k Object, v Object, r ListMap) : ListMap extracted from public put(key Object, val Object) : ListMap in class org.clojure.runtime.ListMap.Link"
2785;"380dab4620630c099e59e364371c8d64b7050916";"800a956ffed030dbce4ec2bf394a331ec6dbc83b";"Move Method";"org.clojure.runtime.ListMap.Entry.key()";"org.clojure.runtime.ListMap.Link.key()";"Move Method public key() : Object from class org.clojure.runtime.ListMap.Entry to public key() : Object from class org.clojure.runtime.ListMap.Link"
2785;"380dab4620630c099e59e364371c8d64b7050916";"800a956ffed030dbce4ec2bf394a331ec6dbc83b";"Move Method";"org.clojure.runtime.ListMap.Entry.val()";"org.clojure.runtime.ListMap.Link.val()";"Move Method public val() : Object from class org.clojure.runtime.ListMap.Entry to public val() : Object from class org.clojure.runtime.ListMap.Link"
2785;"380dab4620630c099e59e364371c8d64b7050916";"800a956ffed030dbce4ec2bf394a331ec6dbc83b";"Move Method";"org.clojure.runtime.ListMap.EntryLink.rest()";"org.clojure.runtime.ListMap.Link.rest()";"Move Method package rest() : Entry from class org.clojure.runtime.ListMap.EntryLink to package rest() : ListMap from class org.clojure.runtime.ListMap.Link"
2785;"380dab4620630c099e59e364371c8d64b7050916";"800a956ffed030dbce4ec2bf394a331ec6dbc83b";"Extract Method";"org.clojure.runtime.HashtableMap.createListMap(Object,Object)";"org.clojure.runtime.ListMap.create(Object,Object)";"Extract Method public create(key Object, val Object) : ListMap extracted from private createListMap(key Object, val Object) : IMap in class org.clojure.runtime.HashtableMap"
2786;"800a956ffed030dbce4ec2bf394a331ec6dbc83b";"2c46259efd90f7c28a51cf7638f3dbbecc5f90a4";"Extract Method";"org.clojure.runtime.HashtableMap.doPut(int,Object,Object,PersistentArray)";"org.clojure.runtime.HashtableMap.createListMap(Object,Object)";"Extract Method private createListMap(key Object, val Object) : IMap extracted from package doPut(i int, key Object, val Object, array PersistentArray) : PersistentArray in class org.clojure.runtime.HashtableMap"
2789;"30b28f18a3b17d7edc7cd8a694914f37d871b39c";"526f5470cfa19f27039e287434eb6d26a7671bdd";"Extract Interface";"org.clojure.runtime.RBTree";"org.clojure.runtime.IMap";"Extract Interface org.clojure.runtime.IMap from class org.clojure.runtime.RBTree"
2789;"30b28f18a3b17d7edc7cd8a694914f37d871b39c";"526f5470cfa19f27039e287434eb6d26a7671bdd";"Extract Interface";"org.clojure.runtime.RBTree.Node";"org.clojure.runtime.IMapEntry";"Extract Interface org.clojure.runtime.IMapEntry from class org.clojure.runtime.RBTree.Node"
2795;"9f0e5fc90b67ac32dd0516065af2ff82f9d9d3bf";"be2df160b1e5c916174262bc411dffa081eded99";"Extract Method";"org.clojure.runtime.PersistentArray.get(int)";"org.clojure.runtime.PersistentArray.getEntry(int)";"Extract Method package getEntry(i int) : Entry extracted from public get(i int) : Object in class org.clojure.runtime.PersistentArray"
2805;"19d311642fa821d51365a551756146336c24a270";"00d88b349cff1b49b8026add38bb62407232ce31";"Extract Interface";"org.clojure.runtime.Obj";"org.clojure.runtime.IObj";"Extract Interface org.clojure.runtime.IObj from class org.clojure.runtime.Obj"
2807;"aaf41d731cc4baa7693cae8d09814a00cd0e6255";"57162d9fc2d5f78518b20aa49d4843d9de2c1b3e";"Rename Class";"org.clojure.runtime.AMap";"org.clojure.runtime.Obj";"Rename Class org.clojure.runtime.AMap renamed to org.clojure.runtime.Obj"
2810;"47bbbed7f23af23aa41e727c0909cdad09dbf4d6";"8b74fbd52683934c6dde25412c4d3ec86384da87";"Move Method";"org.clojure.runtime.TRef.commutate(ThreadLocalData,IFn)";"org.clojure.runtime.Transaction.commutate(ThreadLocalData,TRef,IFn)";"Move Method public commutate(tld ThreadLocalData, fn IFn) : void from class org.clojure.runtime.TRef to public commutate(tld ThreadLocalData, tref TRef, fn IFn) : void from class org.clojure.runtime.Transaction"
2810;"47bbbed7f23af23aa41e727c0909cdad09dbf4d6";"8b74fbd52683934c6dde25412c4d3ec86384da87";"Move Method";"org.clojure.runtime.TRef.set(ThreadLocalData,Object)";"org.clojure.runtime.Transaction.set(ThreadLocalData,TRef,Object)";"Move Method public set(tld ThreadLocalData, val Object) : Object from class org.clojure.runtime.TRef to public set(tld ThreadLocalData, tref TRef, val Object) : Object from class org.clojure.runtime.Transaction"
2810;"47bbbed7f23af23aa41e727c0909cdad09dbf4d6";"8b74fbd52683934c6dde25412c4d3ec86384da87";"Move Method";"org.clojure.runtime.TRef.touch(ThreadLocalData)";"org.clojure.runtime.Transaction.touch(ThreadLocalData,TRef)";"Move Method public touch(tld ThreadLocalData) : void from class org.clojure.runtime.TRef to public touch(tld ThreadLocalData, tref TRef) : void from class org.clojure.runtime.Transaction"
2810;"47bbbed7f23af23aa41e727c0909cdad09dbf4d6";"8b74fbd52683934c6dde25412c4d3ec86384da87";"Move Method";"org.clojure.runtime.TRef.get(ThreadLocalData)";"org.clojure.runtime.Transaction.get(ThreadLocalData,TRef)";"Move Method public get(tld ThreadLocalData) : Object from class org.clojure.runtime.TRef to public get(tld ThreadLocalData, tref TRef) : Object from class org.clojure.runtime.Transaction"
2810;"47bbbed7f23af23aa41e727c0909cdad09dbf4d6";"8b74fbd52683934c6dde25412c4d3ec86384da87";"Inline Method";"org.clojure.runtime.Transaction.getLocks()";"org.clojure.runtime.Transaction.run(ThreadLocalData,IFn)";"Inline Method package getLocks() : ArrayList inlined to package run(tld ThreadLocalData, fn IFn) : Object in class org.clojure.runtime.Transaction"
2812;"1cd2547d56cd7f56c1149f27bd77142e3fc40b50";"d65b16bde7ffb8caa020472cb7a88b03e128ee4f";"Rename Method";"org.clojure.runtime.Var.pushDynamicBinding(ThreadLocalData,Object)";"org.clojure.runtime.Var.establishDynamicBinding(ThreadLocalData,Object)";"Rename Method public pushDynamicBinding(tld ThreadLocalData, val Object) : Cons renamed to public establishDynamicBinding(tld ThreadLocalData, val Object) : Box in class org.clojure.runtime.Var"
2812;"1cd2547d56cd7f56c1149f27bd77142e3fc40b50";"d65b16bde7ffb8caa020472cb7a88b03e128ee4f";"Rename Method";"org.clojure.runtime.Var.popDynamicBinding(ThreadLocalData)";"org.clojure.runtime.Var.restoreDynamicBinding(ThreadLocalData,Box)";"Rename Method public popDynamicBinding(tld ThreadLocalData) : Cons renamed to public restoreDynamicBinding(tld ThreadLocalData, old Box) : void in class org.clojure.runtime.Var"
2813;"d65b16bde7ffb8caa020472cb7a88b03e128ee4f";"494fd9c97ce10cbe481e2b35eafa3c044ea093ac";"Rename Method";"org.clojure.runtime.Namespace.internVar(String)";"org.clojure.runtime.Namespace.intern(Symbol)";"Rename Method public internVar(name String) : Var renamed to public intern(sym Symbol) : Var in class org.clojure.runtime.Namespace"
2815;"8800e169cf12df893fdd89c8e93edb36f8e5388e";"7b16ded965dfa76689d0235d4f1cf999a3f1c8a5";"Extract Method";"org.clojure.runtime.AFn.applyTo(ThreadLocalData,Cons)";"org.clojure.runtime.AFn.applyToHelper(IFn,ThreadLocalData,Cons)";"Extract Method public applyToHelper(ifn IFn, tld ThreadLocalData, arglist Cons) : Object extracted from public applyTo(tld ThreadLocalData, arglist Cons) : Object in class org.clojure.runtime.AFn"
2818;"7c24c3779c837237925d14a0bf79df2876ae68ef";"4770e052cc5df518e2d32632398e46abacb93524";"Rename Class";"org.clojure.runtime.RBSet";"org.clojure.runtime.RBTree";"Rename Class org.clojure.runtime.RBSet renamed to org.clojure.runtime.RBTree"
2819;"4770e052cc5df518e2d32632398e46abacb93524";"7e7516821258dd51e411b51a8851c54320f64dc3";"Extract Method";"org.clojure.runtime.RBSet.main(String[])";"org.clojure.runtime.RBSet.maxKey()";"Extract Method public maxKey() : Object extracted from public main(args String[]) : void in class org.clojure.runtime.RBSet"
2819;"4770e052cc5df518e2d32632398e46abacb93524";"7e7516821258dd51e411b51a8851c54320f64dc3";"Extract Method";"org.clojure.runtime.RBSet.main(String[])";"org.clojure.runtime.RBSet.minKey()";"Extract Method public minKey() : Object extracted from public main(args String[]) : void in class org.clojure.runtime.RBSet"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Rename Method";"org.clojure.runtime.RBSet.Black.(Object,Node,Node)";"org.clojure.runtime.RBSet.Black.replace(Object,Object,Node,Node)";"Rename Method public Black(key Object, left Node, right Node) renamed to package replace(key Object, val Object, left Node, right Node) : Node in class org.clojure.runtime.RBSet.Black"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Rename Method";"org.clojure.runtime.RBSet.Red.(Object,Node,Node)";"org.clojure.runtime.RBSet.Red.replace(Object,Object,Node,Node)";"Rename Method public Red(key Object, left Node, right Node) renamed to package replace(key Object, val Object, left Node, right Node) : Node in class org.clojure.runtime.RBSet.Red"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Extract Method";"org.clojure.runtime.RBSet.main(String[])";"org.clojure.runtime.RBSet.keys()";"Extract Method public keys() : Iterator extracted from public main(args String[]) : void in class org.clojure.runtime.RBSet"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Extract Method";"org.clojure.runtime.RBSet.add(Object)";"org.clojure.runtime.RBSet.put(Object,Object)";"Extract Method public put(key Object, val Object) : RBSet extracted from public add(key Object) : RBSet in class org.clojure.runtime.RBSet"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Extract Method";"org.clojure.runtime.RBSet.add(Node,Object)";"org.clojure.runtime.RBSet.Node.left()";"Extract Method package left() : Node extracted from package add(t Node, key Object) : Node in class org.clojure.runtime.RBSet"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Extract Method";"org.clojure.runtime.RBSet.add(Node,Object)";"org.clojure.runtime.RBSet.Node.right()";"Extract Method package right() : Node extracted from package add(t Node, key Object) : Node in class org.clojure.runtime.RBSet"
2820;"7e7516821258dd51e411b51a8851c54320f64dc3";"13c410d343b4898d6cc17cda6b60d6776f50bd36";"Inline Method";"org.clojure.runtime.RBSet.red(Object,Node,Node)";"org.clojure.runtime.RBSet.add(Node,Object,Object,Box)";"Inline Method package red(key Object, left Node, right Node) : Red inlined to package add(t Node, key Object, val Object, found Box) : Node in class org.clojure.runtime.RBSet"
2821;"13c410d343b4898d6cc17cda6b60d6776f50bd36";"83ad2c71e2c6f5c929c3d632f4eb4e0b694b74f5";"Rename Method";"org.clojure.runtime.RBSet.treeInsert(Node,Object)";"org.clojure.runtime.RBSet.add(Node,Object)";"Rename Method package treeInsert(t Node, x Object) : Node renamed to package add(t Node, key Object) : Node in class org.clojure.runtime.RBSet"
2821;"13c410d343b4898d6cc17cda6b60d6776f50bd36";"83ad2c71e2c6f5c929c3d632f4eb4e0b694b74f5";"Rename Method";"org.clojure.runtime.RBSet.treeContains(Node,Object)";"org.clojure.runtime.RBSet.find(Object)";"Rename Method package treeContains(t Node, x Object) : boolean renamed to package find(key Object) : Node in class org.clojure.runtime.RBSet"
2821;"13c410d343b4898d6cc17cda6b60d6776f50bd36";"83ad2c71e2c6f5c929c3d632f4eb4e0b694b74f5";"Extract Method";"org.clojure.runtime.RBSet.treeContains(Node,Object)";"org.clojure.runtime.RBSet.compare(Object,Object)";"Extract Method package compare(k1 Object, k2 Object) : int extracted from package treeContains(t Node, x Object) : boolean in class org.clojure.runtime.RBSet"
2834;"dd69b27bae9fec5dadd3b57670d2f0c0a14349f1";"5fc1edd4ce80742aadd48949f6b09d3b3b810ccf";"Extract Method";"org.clojure.runtime.Reflector.invokeInstanceMethod(String,Object,Object[])";"org.clojure.runtime.Reflector.invokeMatchingMethod(List,Object,Object[])";"Extract Method private invokeMatchingMethod(methods List, target Object, args Object[]) : Object extracted from public invokeInstanceMethod(name String, target Object, args Object[]) : Object in class org.clojure.runtime.Reflector"
2845;"0df1d23f885720ff40bdccff6c4526f1fcdf2c5f";"b5867713b47e73335a0ced582741e6cae0769c0e";"Rename Method";"org.clojure.runtime.RT.ch(char)";"org.clojure.runtime.RT.box(char)";"Rename Method public ch(c char) : Character renamed to public box(x char) : Character in class org.clojure.runtime.RT"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.Symbol.invoke(ThreadLocalData,Object)";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object)";"Move Method public invoke(tld ThreadLocalData, obj Object) : Object from class org.clojure.runtime.Symbol to public invoke(tld ThreadLocalData, obj Object) : Object from class org.clojure.runtime.Keyword"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.Symbol.invoke(ThreadLocalData,Object,Object)";"org.clojure.runtime.Keyword.invoke(ThreadLocalData,Object,Object)";"Move Method public invoke(tld ThreadLocalData, obj Object, val Object) : Object from class org.clojure.runtime.Symbol to public invoke(tld ThreadLocalData, obj Object, val Object) : Object from class org.clojure.runtime.Keyword"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.ThreadLocalData.pushDynamicBinding(Symbol,Object)";"org.clojure.runtime.Var.pushDynamicBinding(ThreadLocalData,Object)";"Move Method public pushDynamicBinding(sym Symbol, val Object) : Cons from class org.clojure.runtime.ThreadLocalData to public pushDynamicBinding(tld ThreadLocalData, val Object) : Cons from class org.clojure.runtime.Var"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.Namespace.intern(String)";"org.clojure.runtime.Symbol.intern(String)";"Move Method public intern(name String) : Symbol from class org.clojure.runtime.Namespace to public intern(name String) : Symbol from class org.clojure.runtime.Symbol"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.Symbol.getValue(ThreadLocalData)";"org.clojure.runtime.Var.getValue(ThreadLocalData)";"Move Method public getValue(tld ThreadLocalData) : Object from class org.clojure.runtime.Symbol to public getValue(tld ThreadLocalData) : Object from class org.clojure.runtime.Var"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.Symbol.setValue(ThreadLocalData,Object)";"org.clojure.runtime.Var.setValue(ThreadLocalData,Object)";"Move Method public setValue(tld ThreadLocalData, val Object) : Object from class org.clojure.runtime.Symbol to public setValue(tld ThreadLocalData, val Object) : Object from class org.clojure.runtime.Var"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.ThreadLocalData.popDynamicBinding(Symbol)";"org.clojure.runtime.Var.popDynamicBinding(ThreadLocalData)";"Move Method public popDynamicBinding(sym Symbol) : Cons from class org.clojure.runtime.ThreadLocalData to public popDynamicBinding(tld ThreadLocalData) : Cons from class org.clojure.runtime.Var"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Move Method";"org.clojure.runtime.ThreadLocalData.getDynamicBinding(Symbol)";"org.clojure.runtime.Var.getDynamicBinding(ThreadLocalData)";"Move Method public getDynamicBinding(sym Symbol) : Cons from class org.clojure.runtime.ThreadLocalData to public getDynamicBinding(tld ThreadLocalData) : Cons from class org.clojure.runtime.Var"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Extract Method";"org.clojure.runtime.Symbol.getValue(ThreadLocalData)";"org.clojure.runtime.Var.getBinding(ThreadLocalData)";"Extract Method public getBinding(tld ThreadLocalData) : Cons extracted from public getValue(tld ThreadLocalData) : Object in class org.clojure.runtime.Symbol"
2872;"165da010e2c81bab2128231384128b39b7c9a127";"f987c74db3dc521a9ae469ee8fedc6e850703ede";"Extract Method";"org.clojure.runtime.Symbol.getValue(ThreadLocalData)";"org.clojure.runtime.Var.toString()";"Extract Method public toString() : String extracted from public getValue(tld ThreadLocalData) : Object in class org.clojure.runtime.Symbol"
2883;"ec6f1688589700561599e508f4813ffe11c4f065";"ab3658c3f102d470c146260c87d7ea34b365126f";"Rename Class";"org.clojure.runtime.Rational";"org.clojure.runtime.RationalNum";"Rename Class org.clojure.runtime.Rational renamed to org.clojure.runtime.RationalNum"
